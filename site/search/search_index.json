{"config":{"lang":["en","es","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to @arcaelas/collection","text":"**A powerful TypeScript collection library with MongoDB-like query DSL**    [![npm version](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![License](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![GitHub stars](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"#overview","title":"Overview","text":"<p><code>@arcaelas/collection</code> is a comprehensive utility library that extends native JavaScript arrays with powerful filtering, querying, and transformation capabilities. Inspired by Laravel's Collections and MongoDB's query language, it provides an elegant and type-safe API for working with data collections.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>MongoDB-like Query DSL - Intuitive query syntax with operators like <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code>, and more</li> <li>Type-Safe TypeScript - Full TypeScript support with generic types for autocompletion and type checking</li> <li>Rich API - Over 30 built-in methods for filtering, transforming, and aggregating data</li> <li>Method Chaining - Fluent interface for composing complex operations</li> <li>Extensible - Add custom methods with macros</li> <li>Zero Dependencies - Lightweight with minimal external dependencies</li> <li>Performance Optimized - Efficient query compilation and native array delegation</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>npm install @arcaelas/collection\n# or\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filter with MongoDB-like queries\nconst activeUsers = users.filter({ active: true });\n\n// Filter with query operators\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Chain methods\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"#why-arcaelascollection","title":"Why @arcaelas/collection?","text":""},{"location":"#problem","title":"Problem","text":"<p>Native JavaScript arrays have limited functionality for complex data operations:</p> <pre><code>// Native approach - verbose and error-prone\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"#solution","title":"Solution","text":"<p>Collection provides an elegant, chainable API:</p> <pre><code>// Collection approach - clean and expressive\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#query-operators","title":"Query Operators","text":"<p>Use MongoDB-style operators for powerful queries:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"#method-chaining","title":"Method Chaining","text":"<p>Compose complex operations with fluent syntax:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"#type-safety","title":"Type Safety","text":"<p>Leverage TypeScript for compile-time safety:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript knows the shape\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#data-filtering","title":"Data Filtering","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"#aggregation","title":"Aggregation","text":"<pre><code>const orders = new Collection(orderData);\n\nconst totalRevenue = orders.sum(\"total\");\nconst avgOrderValue = orders.sum(\"total\") / orders.length;\nconst ordersByStatus = orders.groupBy(\"status\");\n</code></pre>"},{"location":"#data-transformation","title":"Data Transformation","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li> <p> Getting Started</p> <p>Learn the basics and create your first collection</p> </li> <li> <p> Core Concepts</p> <p>Understand the fundamental principles and patterns</p> </li> <li> <p> Query Operators</p> <p>Master the MongoDB-like query syntax</p> </li> <li> <p> API Reference</p> <p>Explore all available methods and signatures</p> </li> <li> <p> Examples</p> <p>See practical examples and common patterns</p> </li> <li> <p> Advanced</p> <p>Performance tips and advanced techniques</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Report bugs or request features</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Built with \u2764\ufe0f by the Arcaelas Insiders team </p> <p>     Want to discuss any of our open source projects? Send us a message on     Twitter or sponsor us at     GitHub Sponsors.   </p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to <code>@arcaelas/collection</code> will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#212-2025-01-15","title":"[2.1.2] - 2025-01-15","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fixed TypeScript type inference for <code>every()</code> method overloads</li> <li>Corrected return type for <code>collect()</code> method to maintain generic types</li> <li>Fixed query validation for nested objects</li> </ul>"},{"location":"CHANGELOG/#improved","title":"Improved","text":"<ul> <li>Enhanced performance for <code>unique()</code> method with large datasets</li> <li>Optimized query compilation for repeated filter operations</li> <li>Better error messages for invalid operator usage</li> </ul>"},{"location":"CHANGELOG/#211-2024-12-20","title":"[2.1.1] - 2024-12-20","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>New <code>every()</code> method with multiple overload signatures</li> <li>Support for dot-notation in <code>where()</code> and <code>whereNot()</code> methods</li> <li>Enhanced <code>update()</code> method with callback support</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed <code>sort()</code> method handling of undefined values</li> <li>Corrected <code>paginate()</code> method edge cases</li> </ul>"},{"location":"CHANGELOG/#210-2024-11-10","title":"[2.1.0] - 2024-11-10","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>MongoDB-style query operators: <code>$eq</code>, <code>$not</code>, <code>$gt</code>, <code>$lt</code>, <code>$gte</code>, <code>$lte</code>, <code>$in</code>, <code>$includes</code></li> <li>Query operator aliases for convenience: <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>in</code>, <code>includes</code></li> <li>New <code>macro()</code> static and instance methods for extensibility</li> <li><code>stringify()</code> method for JSON serialization</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Improved TypeScript generic types for better type inference</li> <li>Refactored query engine for better performance</li> </ul>"},{"location":"CHANGELOG/#deprecated","title":"Deprecated","text":"<ul> <li>None</li> </ul>"},{"location":"CHANGELOG/#201-2024-10-01","title":"[2.0.1] - 2024-10-01","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed npm package build configuration</li> <li>Corrected TypeScript declaration exports</li> </ul>"},{"location":"CHANGELOG/#200-2024-09-15","title":"[2.0.0] - 2024-09-15","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Complete TypeScript rewrite</li> <li>Full generic type support: <code>Collection&lt;T, V&gt;</code></li> <li>New methods: <code>chunk()</code>, <code>countBy()</code>, <code>groupBy()</code>, <code>unique()</code></li> <li>Debug methods: <code>dd()</code> and <code>dump()</code></li> <li>Aggregation methods: <code>max()</code>, <code>min()</code>, <code>sum()</code></li> <li>Random methods: <code>random()</code> and <code>shuffle()</code></li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Breaking: Minimum Node.js version is now 14.x</li> <li>Breaking: ES2020 target for better performance</li> <li>Improved <code>filter()</code> to support both callbacks and query objects</li> <li>Enhanced <code>update()</code> with merge functionality</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Breaking: Removed deprecated <code>pluck()</code> method (use <code>map()</code> instead)</li> <li>Breaking: Removed legacy callback format</li> </ul>"},{"location":"CHANGELOG/#150-2024-06-01","title":"[1.5.0] - 2024-06-01","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li><code>where()</code> and <code>whereNot()</code> convenience methods</li> <li><code>not()</code> method for inverse filtering</li> <li><code>forget()</code> method to remove fields</li> <li><code>first()</code> and <code>last()</code> methods with query support</li> </ul>"},{"location":"CHANGELOG/#improved_1","title":"Improved","text":"<ul> <li>Better documentation with more examples</li> <li>Performance optimizations for large collections</li> </ul>"},{"location":"CHANGELOG/#140-2024-03-15","title":"[1.4.0] - 2024-03-15","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li><code>update()</code> method for bulk updates</li> <li><code>delete()</code> method for removing elements</li> <li><code>collect()</code> method to create new instances</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed collection mutation issues</li> <li>Corrected prototype chain for extended collections</li> </ul>"},{"location":"CHANGELOG/#130-2024-01-10","title":"[1.3.0] - 2024-01-10","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li><code>paginate()</code> method for pagination support</li> <li><code>each()</code> method with break support</li> </ul>"},{"location":"CHANGELOG/#improved_2","title":"Improved","text":"<ul> <li>Enhanced error handling</li> <li>Better TypeScript types</li> </ul>"},{"location":"CHANGELOG/#120-2023-11-01","title":"[1.2.0] - 2023-11-01","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Initial query DSL support</li> <li>Basic filtering with objects</li> </ul>"},{"location":"CHANGELOG/#110-2023-09-15","title":"[1.1.0] - 2023-09-15","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li><code>sort()</code> method with direction support</li> <li>Aggregation methods</li> </ul>"},{"location":"CHANGELOG/#100-2023-08-01","title":"[1.0.0] - 2023-08-01","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic Collection class extending Array</li> <li>Core filtering and transformation methods</li> </ul>"},{"location":"CHANGELOG/#version-support","title":"Version Support","text":"Version Status Node.js TypeScript 2.1.x Active 14+ 4.x+ 2.0.x Maintenance 14+ 4.x+ 1.x End of Life 12+ 3.x+"},{"location":"CHANGELOG/#migration-guides","title":"Migration Guides","text":""},{"location":"CHANGELOG/#migrating-from-1x-to-2x","title":"Migrating from 1.x to 2.x","text":"<p>Breaking Changes:</p> <ol> <li> <p>Minimum Node.js version increased to 14.x <pre><code>// Ensure you're using Node.js 14 or higher\nnode --version  // Should be v14.0.0 or higher\n</code></pre></p> </li> <li> <p>ES2020 target <pre><code>// Update your tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\"\n  }\n}\n</code></pre></p> </li> <li> <p>Removed <code>pluck()</code> method <pre><code>// Before (1.x)\ncollection.pluck('name');\n\n// After (2.x)\ncollection.map(item =&gt; item.name);\n</code></pre></p> </li> <li> <p>New generic type signatures <pre><code>// Before (1.x)\nconst collection = new Collection(items);\n\n// After (2.x) - with type safety\ninterface User {\n  name: string;\n  age: number;\n}\nconst collection = new Collection&lt;User&gt;(items);\n</code></pre></p> </li> </ol>"},{"location":"CHANGELOG/#upgrading-to-21x","title":"Upgrading to 2.1.x","text":"<p>New Features:</p> <ol> <li> <p>Query operators <pre><code>// New MongoDB-style operators\ncollection.filter({\n  age: { $gte: 18 },\n  status: { $in: ['active', 'pending'] }\n});\n</code></pre></p> </li> <li> <p>Method overloads <pre><code>// every() now supports multiple signatures\ncollection.every('active');\ncollection.every('age', '&gt;=', 18);\ncollection.every({ verified: true });\n</code></pre></p> </li> </ol>"},{"location":"CHANGELOG/#future-roadmap","title":"Future Roadmap","text":""},{"location":"CHANGELOG/#planned-for-220","title":"Planned for 2.2.0","text":"<ul> <li> LazyCollection with generator support</li> <li> AsyncCollection for promises and streams</li> <li> Additional query operators: <code>$regex</code>, <code>$exists</code>, <code>$size</code></li> <li> Performance improvements for large datasets</li> </ul>"},{"location":"CHANGELOG/#planned-for-300","title":"Planned for 3.0.0","text":"<ul> <li> Remove lodash dependency</li> <li> Native ES modules only</li> <li> Improved tree-shaking</li> <li> YAML/CSV serialization support</li> </ul>"},{"location":"CHANGELOG/#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"CHANGELOG/#support","title":"Support","text":"<ul> <li>Documentation: https://arcaelas.github.io/collection</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide will help you install and set up <code>@arcaelas/collection</code> in your project.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Node.js: 14.x or higher</li> <li>TypeScript: 4.x or higher (optional, for TypeScript projects)</li> <li>Package Manager: npm, yarn, or pnpm</li> </ul>"},{"location":"installation/#package-manager-installation","title":"Package Manager Installation","text":""},{"location":"installation/#using-npm","title":"Using npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"installation/#using-yarn","title":"Using yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"installation/#using-pnpm","title":"Using pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"installation/#import-methods","title":"Import Methods","text":""},{"location":"installation/#es-module-recommended","title":"ES Module (Recommended)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"installation/#named-import","title":"Named Import","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"installation/#commonjs","title":"CommonJS","text":"<pre><code>const Collection = require(\"@arcaelas/collection\");\n\nconst collection = new Collection([1, 2, 3]);\n</code></pre>"},{"location":"installation/#typescript-configuration","title":"TypeScript Configuration","text":"<p>If you're using TypeScript, ensure your <code>tsconfig.json</code> includes proper configuration:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test file to verify the installation:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Total:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"Max:\", numbers.max(\"value\")); // Works with objects\nconsole.log(\"First:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Filtered:\", filtered); // [3, 4, 5]\n</code></pre> <p>Run the test:</p> <pre><code># If using TypeScript\nnpx ts-node test-collection.ts\n\n# If using JavaScript\nnode test-collection.js\n</code></pre>"},{"location":"installation/#bundle-size","title":"Bundle Size","text":"<p>The library is lightweight and tree-shakeable:</p> <ul> <li>Minified: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"installation/#browser-compatibility","title":"Browser Compatibility","text":"<p><code>@arcaelas/collection</code> works in all modern browsers that support ES2020:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>For older browsers, use a transpiler like Babel.</p>"},{"location":"installation/#cdn-usage","title":"CDN Usage","text":"<p>You can also use the library directly from a CDN:</p>"},{"location":"installation/#unpkg","title":"unpkg","text":"<pre><code>&lt;script type=\"module\"&gt;\n  import Collection from \"https://unpkg.com/@arcaelas/collection@latest/build/index.js\";\n\n  const collection = new Collection([1, 2, 3]);\n  console.log(collection.sum(n =&gt; n));\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#jsdelivr","title":"jsDelivr","text":"<pre><code>&lt;script type=\"module\"&gt;\n  import Collection from \"https://cdn.jsdelivr.net/npm/@arcaelas/collection@latest/build/index.js\";\n\n  const collection = new Collection([1, 2, 3]);\n  console.log(collection.first());\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute or work on the library itself:</p> <pre><code># Clone the repository\ngit clone https://github.com/arcaelas/collection.git\ncd collection\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run tests\nnpm test\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#module-not-found-error","title":"Module Not Found Error","text":"<p>If you encounter module resolution issues:</p> <pre><code>Error: Cannot find module '@arcaelas/collection'\n</code></pre> <p>Solutions:</p> <ol> <li> <p>Clear your package manager cache:    <pre><code>npm cache clean --force\n# or\nyarn cache clean\n</code></pre></p> </li> <li> <p>Delete <code>node_modules</code> and reinstall:    <pre><code>rm -rf node_modules package-lock.json\nnpm install\n</code></pre></p> </li> <li> <p>Check your <code>package.json</code> to ensure the package is listed in <code>dependencies</code>.</p> </li> </ol>"},{"location":"installation/#typescript-declaration-errors","title":"TypeScript Declaration Errors","text":"<p>If TypeScript can't find type declarations:</p> <pre><code>Could not find a declaration file for module '@arcaelas/collection'\n</code></pre> <p>Solutions:</p> <ol> <li> <p>The library includes TypeScript declarations. Ensure you're using TypeScript 4.x or higher.</p> </li> <li> <p>Check your <code>tsconfig.json</code> includes:    <pre><code>{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"installation/#importexport-syntax-errors","title":"Import/Export Syntax Errors","text":"<p>If you see syntax errors related to imports:</p> <p>Solutions:</p> <ol> <li> <p>Ensure your Node.js version supports ES modules (14.x+)</p> </li> <li> <p>Add <code>\"type\": \"module\"</code> to your <code>package.json</code> for ES modules:    <pre><code>{\n  \"type\": \"module\"\n}\n</code></pre></p> </li> <li> <p>Or use <code>.mjs</code> extension for module files</p> </li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have <code>@arcaelas/collection</code> installed, you can:</p> <ul> <li>Read the Getting Started guide</li> <li>Explore Core Concepts</li> <li>Check out Examples</li> <li>Browse the API Reference</li> </ul>"},{"location":"installation/#support","title":"Support","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Check the GitHub Issues</li> <li>Ask for help in Discussions</li> <li>Contact us at community@arcaelas.com</li> </ul>"},{"location":"advanced/extending-collection/","title":"Extending Collection","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"advanced/extending-collection/#creating-subclasses","title":"Creating Subclasses","text":""},{"location":"advanced/extending-collection/#adding-macros","title":"Adding Macros","text":""},{"location":"advanced/extending-collection/#custom-operators","title":"Custom Operators","text":""},{"location":"advanced/extending-collection/#plugin-architecture","title":"Plugin Architecture","text":"<pre><code>class UserCollection extends Collection&lt;User&gt; {\n  admins() {\n    return this.filter({ role: 'admin' });\n  }\n}\n</code></pre>"},{"location":"advanced/performance/","title":"Performance","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"advanced/performance/#query-compilation","title":"Query Compilation","text":""},{"location":"advanced/performance/#large-datasets","title":"Large Datasets","text":""},{"location":"advanced/performance/#memory-management","title":"Memory Management","text":""},{"location":"advanced/performance/#benchmarks","title":"Benchmarks","text":"<pre><code>// Optimize repeated queries\nconst activeQuery = { active: true };\nconst result = collection.filter(activeQuery);\n</code></pre>"},{"location":"advanced/typescript-usage/","title":"TypeScript Usage","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"advanced/typescript-usage/#generic-types","title":"Generic Types","text":""},{"location":"advanced/typescript-usage/#type-inference","title":"Type Inference","text":""},{"location":"advanced/typescript-usage/#custom-validators","title":"Custom Validators","text":""},{"location":"advanced/typescript-usage/#type-guards","title":"Type Guards","text":"<pre><code>interface User {\n  id: number;\n  name: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n</code></pre>"},{"location":"api/aggregation-methods/","title":"Aggregation Methods","text":""},{"location":"api/aggregation-methods/#sum","title":"sum()","text":""},{"location":"api/aggregation-methods/#max","title":"max()","text":""},{"location":"api/aggregation-methods/#min","title":"min()","text":""},{"location":"api/aggregation-methods/#countby","title":"countBy()","text":""},{"location":"api/aggregation-methods/#groupby","title":"groupBy()","text":"<p>Detailed API reference with type signatures.</p>"},{"location":"api/collection-class/","title":"Collection Class","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"api/collection-class/#constructor","title":"Constructor","text":"<pre><code>new Collection&lt;T, V&gt;(items?: T[], validator?: V)\n</code></pre>"},{"location":"api/collection-class/#type-parameters","title":"Type Parameters","text":"<ul> <li><code>T</code>: Type of elements in the collection</li> <li><code>V</code>: Shape for query validation</li> </ul>"},{"location":"api/collection-class/#static-methods","title":"Static Methods","text":""},{"location":"api/collection-class/#collectionmacro","title":"Collection.macro()","text":"<p>Add custom methods to all Collection instances.</p>"},{"location":"api/collection-class/#instance-methods","title":"Instance Methods","text":"<p>See individual method references for details.</p>"},{"location":"api/filtering-methods/","title":"Filtering Methods","text":""},{"location":"api/filtering-methods/#filter","title":"filter()","text":""},{"location":"api/filtering-methods/#not","title":"not()","text":""},{"location":"api/filtering-methods/#first","title":"first()","text":""},{"location":"api/filtering-methods/#last","title":"last()","text":""},{"location":"api/filtering-methods/#where","title":"where()","text":""},{"location":"api/filtering-methods/#wherenot","title":"whereNot()","text":""},{"location":"api/filtering-methods/#every","title":"every()","text":"<p>Each method includes signature, parameters, return type, and examples.</p>"},{"location":"api/macros/","title":"Macros","text":"<p>Extend Collection with custom methods using macros.</p> <pre><code>Collection.macro('pluck', function(key) {\n  return this.map(item =&gt; item[key]);\n});\n\ncollection.pluck('name');\n</code></pre>"},{"location":"api/transformation-methods/","title":"Transformation Methods","text":""},{"location":"api/transformation-methods/#map","title":"map()","text":""},{"location":"api/transformation-methods/#sort","title":"sort()","text":""},{"location":"api/transformation-methods/#unique","title":"unique()","text":""},{"location":"api/transformation-methods/#forget","title":"forget()","text":""},{"location":"api/transformation-methods/#collect","title":"collect()","text":""},{"location":"api/transformation-methods/#chunk","title":"chunk()","text":""},{"location":"api/transformation-methods/#paginate","title":"paginate()","text":"<p>Complete signatures and examples for each method.</p>"},{"location":"api/utility-methods/","title":"Utility Methods","text":""},{"location":"api/utility-methods/#update","title":"update()","text":""},{"location":"api/utility-methods/#delete","title":"delete()","text":""},{"location":"api/utility-methods/#each","title":"each()","text":""},{"location":"api/utility-methods/#random","title":"random()","text":""},{"location":"api/utility-methods/#shuffle","title":"shuffle()","text":""},{"location":"api/utility-methods/#dump","title":"dump()","text":""},{"location":"api/utility-methods/#dd","title":"dd()","text":""},{"location":"api/utility-methods/#stringify","title":"stringify()","text":"<p>Complete API documentation.</p>"},{"location":"examples/advanced-patterns/","title":"Advanced Patterns","text":"<p>Advanced patterns and techniques.</p>"},{"location":"examples/advanced-patterns/#complex-queries","title":"Complex Queries","text":""},{"location":"examples/advanced-patterns/#custom-macros","title":"Custom Macros","text":""},{"location":"examples/advanced-patterns/#performance-optimization","title":"Performance Optimization","text":""},{"location":"examples/advanced-patterns/#integration-patterns","title":"Integration Patterns","text":""},{"location":"examples/aggregation/","title":"Aggregation","text":"<p>Examples of aggregation operations.</p> <pre><code>const totalRevenue = orders.sum('total');\nconst avgOrderValue = orders.sum('total') / orders.length;\nconst byStatus = orders.groupBy('status');\n</code></pre>"},{"location":"examples/basic-usage/","title":"Basic Usage","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"examples/basic-usage/#creating-collections","title":"Creating Collections","text":""},{"location":"examples/basic-usage/#filtering-data","title":"Filtering Data","text":""},{"location":"examples/basic-usage/#transforming-elements","title":"Transforming Elements","text":""},{"location":"examples/basic-usage/#finding-items","title":"Finding Items","text":"<pre><code>const users = new Collection([...]);\nconst active = users.filter({ active: true });\n</code></pre>"},{"location":"examples/filtering-sorting/","title":"Filtering &amp; Sorting","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"guides/aggregation-methods/","title":"Aggregation Methods","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"guides/best-practices/","title":"Best Practices","text":"<p>Tips and best practices for using <code>@arcaelas/collection</code> effectively.</p>"},{"location":"guides/best-practices/#use-typescript","title":"Use TypeScript","text":""},{"location":"guides/best-practices/#chain-methods","title":"Chain Methods","text":""},{"location":"guides/best-practices/#leverage-query-operators","title":"Leverage Query Operators","text":""},{"location":"guides/best-practices/#prefer-immutable-operations","title":"Prefer Immutable Operations","text":""},{"location":"guides/best-practices/#performance-considerations","title":"Performance Considerations","text":""},{"location":"guides/core-concepts/","title":"Core Concepts","text":"<p>Learn the fundamental concepts behind <code>@arcaelas/collection</code>.</p>"},{"location":"guides/core-concepts/#collections-as-enhanced-arrays","title":"Collections as Enhanced Arrays","text":"<p>Collections extend native JavaScript arrays with powerful methods:</p> <pre><code>const collection = new Collection([1, 2, 3]);\n// Has all Array methods plus Collection methods\n</code></pre>"},{"location":"guides/core-concepts/#type-safety","title":"Type Safety","text":"<p>Use TypeScript generics for type-safe collections:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n</code></pre>"},{"location":"guides/core-concepts/#query-language","title":"Query Language","text":"<p>Collections support MongoDB-style queries:</p> <pre><code>collection.filter({\n  age: { $gte: 18 },\n  status: { $in: ['active', 'pending'] }\n});\n</code></pre>"},{"location":"guides/core-concepts/#immutability","title":"Immutability","text":"<p>Most methods return new collections:</p> <pre><code>const original = new Collection([1, 2, 3]);\nconst filtered = original.filter(n =&gt; n &gt; 1);\n// original unchanged\n</code></pre>"},{"location":"guides/core-concepts/#method-chaining","title":"Method Chaining","text":"<p>Chain methods for fluent syntax:</p> <pre><code>collection\n  .filter({ active: true })\n  .sort('age', 'desc')\n  .slice(0, 10);\n</code></pre> <p>Next: Query Operators</p>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>Welcome to the getting started guide for <code>@arcaelas/collection</code>! This guide will walk you through the basics and help you become productive quickly.</p>"},{"location":"guides/getting-started/#your-first-collection","title":"Your First Collection","text":"<p>Let's create your first collection:</p> <pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(numbers.length); // 5\nconsole.log(numbers.first()); // 1\nconsole.log(numbers.last()); // 5\n</code></pre>"},{"location":"guides/getting-started/#working-with-objects","title":"Working with Objects","text":"<p>Collections really shine when working with objects:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  age: number;\n  active: boolean;\n}\n\nconst users = new Collection&lt;User&gt;([\n  { id: 1, name: \"Alice\", age: 25, active: true },\n  { id: 2, name: \"Bob\", age: 30, active: false },\n  { id: 3, name: \"Charlie\", age: 35, active: true }\n]);\n</code></pre>"},{"location":"guides/getting-started/#basic-filtering","title":"Basic Filtering","text":"<p>Filter collections using callbacks:</p> <pre><code>// Get active users\nconst activeUsers = users.filter(user =&gt; user.active);\n\n// Get users over 25\nconst adults = users.filter(user =&gt; user.age &gt; 25);\n</code></pre> <p>Or use query objects:</p> <pre><code>// Same results with query syntax\nconst activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre>"},{"location":"guides/getting-started/#finding-elements","title":"Finding Elements","text":"<p>Find specific elements:</p> <pre><code>// Get first active user\nconst firstActive = users.first({ active: true });\n\n// Get last user over 30\nconst lastAdult = users.last(user =&gt; user.age &gt; 30);\n</code></pre>"},{"location":"guides/getting-started/#transforming-data","title":"Transforming Data","text":"<p>Transform collections with <code>map()</code>:</p> <pre><code>// Get array of names\nconst names = users.map(user =&gt; user.name);\n// [\"Alice\", \"Bob\", \"Charlie\"]\n\n// Create display labels\nconst labels = users.map(user =&gt; `${user.name} (${user.age})`);\n// [\"Alice (25)\", \"Bob (30)\", \"Charlie (35)\"]\n</code></pre>"},{"location":"guides/getting-started/#sorting","title":"Sorting","text":"<p>Sort collections easily:</p> <pre><code>// Sort by age ascending\nusers.sort(\"age\", \"asc\");\n\n// Sort by name descending\nusers.sort(\"name\", \"desc\");\n\n// Custom sorting\nusers.sort((a, b) =&gt; a.age - b.age);\n</code></pre>"},{"location":"guides/getting-started/#method-chaining","title":"Method Chaining","text":"<p>Combine multiple operations:</p> <pre><code>const result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .map(user =&gt; user.name);\n\nconsole.log(result); // [\"Charlie\", \"Alice\"]\n</code></pre>"},{"location":"guides/getting-started/#aggregation","title":"Aggregation","text":"<p>Calculate aggregate values:</p> <pre><code>// Total age of all users\nconst totalAge = users.sum(\"age\");\n\n// Maximum age\nconst maxAge = users.max(\"age\");\n\n// Minimum age\nconst minAge = users.min(\"age\");\n\n// Average age\nconst avgAge = users.sum(\"age\") / users.length;\n</code></pre>"},{"location":"guides/getting-started/#grouping-data","title":"Grouping Data","text":"<p>Group elements by a key:</p> <pre><code>const products = new Collection([\n  { name: \"Laptop\", category: \"electronics\", price: 1000 },\n  { name: \"Mouse\", category: \"electronics\", price: 20 },\n  { name: \"Desk\", category: \"furniture\", price: 300 }\n]);\n\nconst byCategory = products.groupBy(\"category\");\n// {\n//   electronics: [...],\n//   furniture: [...]\n// }\n</code></pre>"},{"location":"guides/getting-started/#pagination","title":"Pagination","text":"<p>Paginate large collections:</p> <pre><code>const page1 = users.paginate(1, 10);\n// {\n//   items: [...], // First 10 users\n//   prev: false,\n//   next: 2\n// }\n</code></pre>"},{"location":"guides/getting-started/#unique-values","title":"Unique Values","text":"<p>Get unique elements:</p> <pre><code>const items = new Collection([1, 2, 2, 3, 3, 3, 4]);\nconst unique = items.unique(x =&gt; x);\n// [1, 2, 3, 4]\n\n// With objects\nconst uniqueUsers = users.unique(\"email\");\n</code></pre>"},{"location":"guides/getting-started/#updating-elements","title":"Updating Elements","text":"<p>Update elements that match a condition:</p> <pre><code>// Deactivate all users over 30\nusers.update(\n  { age: { $gt: 30 } },\n  { active: false }\n);\n\n// Update with callback\nusers.update(\n  { active: false },\n  user =&gt; ({ ...user, deletedAt: new Date() })\n);\n</code></pre>"},{"location":"guides/getting-started/#removing-fields","title":"Removing Fields","text":"<p>Remove sensitive fields:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n  password: string;\n  token: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// Remove password and token\nusers.forget(\"password\", \"token\");\n</code></pre>"},{"location":"guides/getting-started/#debugging","title":"Debugging","text":"<p>Use debug methods:</p> <pre><code>// Print and continue\nusers\n  .filter({ active: true })\n  .dump()  // Prints to console\n  .sort(\"age\", \"desc\");\n\n// Print and exit (in Node.js)\nusers.dd();  // Dumps and exits\n</code></pre>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ol> <li>Learn about Core Concepts</li> <li>Explore Query Operators</li> <li>Check out Examples</li> <li>Read the API Reference</li> </ol>"},{"location":"guides/getting-started/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/getting-started/#filter-and-sort","title":"Filter and Sort","text":"<pre><code>const topUsers = users\n  .filter({ verified: true })\n  .sort(\"score\", \"desc\")\n  .slice(0, 10);\n</code></pre>"},{"location":"guides/getting-started/#transform-and-group","title":"Transform and Group","text":"<pre><code>const grouped = products\n  .map(p =&gt; ({ ...p, discounted: p.price * 0.9 }))\n  .groupBy(\"category\");\n</code></pre>"},{"location":"guides/getting-started/#clean-and-dedupe","title":"Clean and Dedupe","text":"<pre><code>const clean = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .filter({ verified: true });\n</code></pre>"},{"location":"guides/getting-started/#tips","title":"Tips","text":"<ol> <li>Use TypeScript for type safety and autocompletion</li> <li>Chain methods for readable, concise code</li> <li>Use query objects for complex filtering</li> <li>Leverage operators like <code>$gt</code>, <code>$in</code>, <code>$contains</code></li> <li>Prefer immutable operations - use <code>collect()</code> to clone</li> </ol>"},{"location":"guides/getting-started/#help-support","title":"Help &amp; Support","text":"<ul> <li>Documentation: Full API Reference</li> <li>Examples: More Examples</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"guides/query-operators/","title":"Query Operators","text":"<p>Master MongoDB-style query operators in <code>@arcaelas/collection</code>.</p>"},{"location":"guides/query-operators/#comparison-operators","title":"Comparison Operators","text":""},{"location":"guides/query-operators/#eq-equal","title":"$eq (Equal)","text":"<pre><code>collection.filter({ age: { $eq: 25 } });\n// or shorthand\ncollection.filter({ age: 25 });\n</code></pre>"},{"location":"guides/query-operators/#gt-greater-than","title":"$gt (Greater Than)","text":"<pre><code>collection.filter({ age: { $gt: 18 } });\n</code></pre>"},{"location":"guides/query-operators/#gte-greater-than-or-equal","title":"$gte (Greater Than or Equal)","text":"<pre><code>collection.filter({ age: { $gte: 18 } });\n</code></pre>"},{"location":"guides/query-operators/#lt-less-than","title":"$lt (Less Than)","text":"<pre><code>collection.filter({ age: { $lt: 65 } });\n</code></pre>"},{"location":"guides/query-operators/#lte-less-than-or-equal","title":"$lte (Less Than or Equal)","text":"<pre><code>collection.filter({ age: { $lte: 65 } });\n</code></pre>"},{"location":"guides/query-operators/#logical-operators","title":"Logical Operators","text":""},{"location":"guides/query-operators/#not-not","title":"$not (Not)","text":"<pre><code>collection.filter({ \n  $not: { age: { $lt: 18 } }\n});\n</code></pre>"},{"location":"guides/query-operators/#in-in-array","title":"$in (In Array)","text":"<pre><code>collection.filter({\n  status: { $in: ['active', 'pending', 'verified'] }\n});\n</code></pre>"},{"location":"guides/query-operators/#contains-contains","title":"$contains (Contains)","text":"<pre><code>collection.filter({\n  skills: { $contains: 'TypeScript' }\n});\n</code></pre>"},{"location":"guides/query-operators/#operator-aliases","title":"Operator Aliases","text":"<p>For convenience, use shorthand aliases:</p> <pre><code>// These are equivalent\ncollection.where('age', '&gt;=', 18);\ncollection.filter({ age: { $gte: 18 } });\n</code></pre> Alias Operator Meaning <code>=</code> <code>$eq</code> Equal <code>!=</code> <code>$not</code> Not equal <code>&gt;</code> <code>$gt</code> Greater than <code>&lt;</code> <code>$lt</code> Less than <code>&gt;=</code> <code>$gte</code> Greater or equal <code>&lt;=</code> <code>$lte</code> Less or equal <code>in</code> <code>$in</code> In array <code>includes</code> <code>$includes</code> Contains <p>Next: Aggregation Methods</p>"},{"location":"es/","title":"Bienvenido a @arcaelas/collection","text":"**Una potente biblioteca de colecciones TypeScript con DSL de consultas similar a MongoDB**    [![versi\u00f3n npm](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![Licencia](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![Estrellas GitHub](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"es/#descripcion-general","title":"Descripci\u00f3n General","text":"<p><code>@arcaelas/collection</code> es una biblioteca de utilidades completa que extiende los arrays nativos de JavaScript con potentes capacidades de filtrado, consulta y transformaci\u00f3n. Inspirada en las Colecciones de Laravel y el lenguaje de consultas de MongoDB, proporciona una API elegante y type-safe para trabajar con colecciones de datos.</p>"},{"location":"es/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>DSL de Consultas Similar a MongoDB - Sintaxis de consulta intuitiva con operadores como <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code>, y m\u00e1s</li> <li>TypeScript Type-Safe - Soporte completo de TypeScript con tipos gen\u00e9ricos para autocompletado y verificaci\u00f3n de tipos</li> <li>API Rica - M\u00e1s de 30 m\u00e9todos integrados para filtrar, transformar y agregar datos</li> <li>Encadenamiento de M\u00e9todos - Interfaz fluida para componer operaciones complejas</li> <li>Extensible - Agregue m\u00e9todos personalizados con macros</li> <li>Sin Dependencias - Ligero con dependencias externas m\u00ednimas</li> <li>Optimizado para Rendimiento - Compilaci\u00f3n eficiente de consultas y delegaci\u00f3n de arrays nativos</li> </ul>"},{"location":"es/#inicio-rapido","title":"Inicio R\u00e1pido","text":""},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install @arcaelas/collection\n# o\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"es/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filtrar con consultas similares a MongoDB\nconst activeUsers = users.filter({ active: true });\n\n// Filtrar con operadores de consulta\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Encadenar m\u00e9todos\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"es/#por-que-arcaelascollection","title":"\u00bfPor qu\u00e9 @arcaelas/collection?","text":""},{"location":"es/#problema","title":"Problema","text":"<p>Los arrays nativos de JavaScript tienen funcionalidad limitada para operaciones de datos complejas:</p> <pre><code>// Enfoque nativo - verboso y propenso a errores\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"es/#solucion","title":"Soluci\u00f3n","text":"<p>Collection proporciona una API elegante y encadenable:</p> <pre><code>// Enfoque con Collection - limpio y expresivo\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"es/#conceptos-basicos","title":"Conceptos B\u00e1sicos","text":""},{"location":"es/#operadores-de-consulta","title":"Operadores de Consulta","text":"<p>Use operadores estilo MongoDB para consultas potentes:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"es/#encadenamiento-de-metodos","title":"Encadenamiento de M\u00e9todos","text":"<p>Componga operaciones complejas con sintaxis fluida:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"es/#seguridad-de-tipos","title":"Seguridad de Tipos","text":"<p>Aproveche TypeScript para seguridad en tiempo de compilaci\u00f3n:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript conoce la forma\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"es/#casos-de-uso","title":"Casos de Uso","text":""},{"location":"es/#filtrado-de-datos","title":"Filtrado de Datos","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"es/#agregacion","title":"Agregaci\u00f3n","text":"<pre><code>const orders = new Collection(orderData);\n\nconst totalRevenue = orders.sum(\"total\");\nconst avgOrderValue = orders.sum(\"total\") / orders.length;\nconst ordersByStatus = orders.groupBy(\"status\");\n</code></pre>"},{"location":"es/#transformacion-de-datos","title":"Transformaci\u00f3n de Datos","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"es/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<ul> <li> <p> Primeros Pasos</p> <p>Aprenda los conceptos b\u00e1sicos y cree su primera colecci\u00f3n</p> </li> <li> <p> Conceptos B\u00e1sicos</p> <p>Comprenda los principios y patrones fundamentales</p> </li> <li> <p> Operadores de Consulta</p> <p>Domine la sintaxis de consulta similar a MongoDB</p> </li> <li> <p> Referencia de API</p> <p>Explore todos los m\u00e9todos y firmas disponibles</p> </li> <li> <p> Ejemplos</p> <p>Vea ejemplos pr\u00e1cticos y patrones comunes</p> </li> <li> <p> Avanzado</p> <p>Consejos de rendimiento y t\u00e9cnicas avanzadas</p> </li> </ul>"},{"location":"es/#comunidad-y-soporte","title":"Comunidad y Soporte","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Reportar errores o solicitar funciones</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"es/#licencia","title":"Licencia","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Construido con \u2764\ufe0f por el equipo de Arcaelas Insiders </p> <p>     \u00bfQuiere discutir alguno de nuestros proyectos de c\u00f3digo abierto? Env\u00edenos un mensaje en     Twitter o patroc\u00ednenos en     GitHub Sponsors.   </p>"},{"location":"es/CHANGELOG/","title":"Registro de Cambios","text":"<p>Todos los cambios notables en <code>@arcaelas/collection</code> se documentar\u00e1n en este archivo.</p>"},{"location":"es/CHANGELOG/#corregido","title":"Corregido","text":"<ul> <li>Inferencia de tipos TypeScript corregida para sobrecargas del m\u00e9todo <code>every()</code></li> <li>Tipo de retorno corregido para el m\u00e9todo <code>collect()</code> para mantener tipos gen\u00e9ricos</li> <li>Validaci\u00f3n de consultas corregida para objetos anidados</li> </ul>"},{"location":"es/CHANGELOG/#mejorado","title":"Mejorado","text":"<ul> <li>Rendimiento mejorado del m\u00e9todo <code>unique()</code> con grandes conjuntos de datos</li> <li>Compilaci\u00f3n de consultas optimizada para operaciones de filtro repetidas</li> <li>Mejores mensajes de error para uso de operadores inv\u00e1lidos</li> </ul>"},{"location":"es/CHANGELOG/#agregado","title":"Agregado","text":"<ul> <li>Nuevo m\u00e9todo <code>every()</code> con m\u00faltiples firmas de sobrecarga</li> <li>Soporte para notaci\u00f3n de puntos en m\u00e9todos <code>where()</code> y <code>whereNot()</code></li> <li>M\u00e9todo <code>update()</code> mejorado con soporte de callback</li> </ul>"},{"location":"es/CHANGELOG/#agregado_1","title":"Agregado","text":"<ul> <li>Operadores de consulta estilo MongoDB</li> <li>Alias de operadores de consulta</li> <li>M\u00e9todos <code>macro()</code> est\u00e1tico e de instancia</li> <li>M\u00e9todo <code>stringify()</code> para serializaci\u00f3n JSON</li> </ul>"},{"location":"es/CHANGELOG/#agregado_2","title":"Agregado","text":"<ul> <li>Reescritura completa en TypeScript</li> <li>Soporte completo de tipos gen\u00e9ricos</li> <li>Nuevos m\u00e9todos de agregaci\u00f3n y transformaci\u00f3n</li> </ul>"},{"location":"es/CHANGELOG/#soporte-de-versiones","title":"Soporte de Versiones","text":"Versi\u00f3n Estado Node.js TypeScript 2.1.x Activa 14+ 4.x+ 2.0.x Mantenimiento 14+ 4.x+ 1.x Fin de vida 12+ 3.x+"},{"location":"es/installation/","title":"Instalaci\u00f3n","text":"<p>Esta gu\u00eda le ayudar\u00e1 a instalar y configurar <code>@arcaelas/collection</code> en su proyecto.</p>"},{"location":"es/installation/#requisitos","title":"Requisitos","text":"<ul> <li>Node.js: 14.x o superior</li> <li>TypeScript: 4.x o superior (opcional, para proyectos TypeScript)</li> <li>Gestor de Paquetes: npm, yarn o pnpm</li> </ul>"},{"location":"es/installation/#instalacion-con-gestor-de-paquetes","title":"Instalaci\u00f3n con Gestor de Paquetes","text":""},{"location":"es/installation/#usando-npm","title":"Usando npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#usando-yarn","title":"Usando yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#usando-pnpm","title":"Usando pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#metodos-de-importacion","title":"M\u00e9todos de Importaci\u00f3n","text":""},{"location":"es/installation/#es-module-recomendado","title":"ES Module (Recomendado)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"es/installation/#importacion-nombrada","title":"Importaci\u00f3n Nombrada","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"es/installation/#configuracion-de-typescript","title":"Configuraci\u00f3n de TypeScript","text":"<p>Si est\u00e1 usando TypeScript, aseg\u00farese de que su <code>tsconfig.json</code> incluya la configuraci\u00f3n adecuada:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"es/installation/#verificar-instalacion","title":"Verificar Instalaci\u00f3n","text":"<p>Cree un archivo de prueba simple para verificar la instalaci\u00f3n:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Total:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"M\u00e1ximo:\", numbers.max(\"value\"));\nconsole.log(\"Primero:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Filtrado:\", filtered); // [3, 4, 5]\n</code></pre> <p>Ejecute la prueba:</p> <pre><code># Si usa TypeScript\nnpx ts-node test-collection.ts\n\n# Si usa JavaScript\nnode test-collection.js\n</code></pre>"},{"location":"es/installation/#tamano-del-bundle","title":"Tama\u00f1o del Bundle","text":"<p>La biblioteca es ligera y tree-shakeable:</p> <ul> <li>Minificado: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"es/installation/#compatibilidad-de-navegadores","title":"Compatibilidad de Navegadores","text":"<p><code>@arcaelas/collection</code> funciona en todos los navegadores modernos que soportan ES2020:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>Para navegadores m\u00e1s antiguos, use un transpilador como Babel.</p>"},{"location":"es/installation/#uso-con-cdn","title":"Uso con CDN","text":"<p>Tambi\u00e9n puede usar la biblioteca directamente desde un CDN:</p>"},{"location":"es/installation/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>Ahora que tiene <code>@arcaelas/collection</code> instalado, puede:</p> <ul> <li>Leer la gu\u00eda de Primeros Pasos</li> <li>Explorar Conceptos B\u00e1sicos</li> <li>Ver Ejemplos</li> <li>Navegar la Referencia de API</li> </ul>"},{"location":"es/advanced/extending-collection/","title":"Extendiendo Collection","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"es/advanced/performance/","title":"Rendimiento","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"es/advanced/typescript-usage/","title":"Uso con TypeScript","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"es/api/aggregation-methods/","title":"M\u00e9todos de Agregaci\u00f3n","text":""},{"location":"es/api/collection-class/","title":"Clase Collection","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"es/api/filtering-methods/","title":"M\u00e9todos de Filtrado","text":""},{"location":"es/api/transformation-methods/","title":"M\u00e9todos de Transformaci\u00f3n","text":""},{"location":"es/api/utility-methods/","title":"M\u00e9todos Utilitarios","text":""},{"location":"es/examples/advanced-patterns/","title":"Patrones Avanzados","text":"<p>Advanced patterns and techniques.</p>"},{"location":"es/examples/aggregation/","title":"Agregaci\u00f3n","text":"<p>Examples of aggregation operations.</p> <pre><code>const totalRevenue = orders.sum('total');\nconst avgOrderValue = orders.sum('total') / orders.length;\nconst byStatus = orders.groupBy('status');\n</code></pre>"},{"location":"es/examples/basic-usage/","title":"Uso B\u00e1sico","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"es/examples/filtering-sorting/","title":"Filtrado y Ordenamiento","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"es/guides/aggregation-methods/","title":"M\u00e9todos de Agregaci\u00f3n","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"es/guides/best-practices/","title":"Buenas Pr\u00e1cticas","text":"<p>Tips and best practices for using <code>@arcaelas/collection</code> effectively.</p>"},{"location":"es/guides/core-concepts/","title":"Conceptos B\u00e1sicos","text":"<p>Aprenda los conceptos fundamentales detr\u00e1s de <code>@arcaelas/collection</code>.</p>"},{"location":"es/guides/core-concepts/#colecciones-como-arrays-mejorados","title":"Colecciones como Arrays Mejorados","text":"<p>Las colecciones extienden los arrays nativos de JavaScript con m\u00e9todos potentes.</p>"},{"location":"es/guides/core-concepts/#seguridad-de-tipos","title":"Seguridad de Tipos","text":"<p>Use gen\u00e9ricos de TypeScript para colecciones type-safe.</p>"},{"location":"es/guides/core-concepts/#lenguaje-de-consultas","title":"Lenguaje de Consultas","text":"<p>Las colecciones soportan consultas estilo MongoDB.</p>"},{"location":"es/guides/core-concepts/#inmutabilidad","title":"Inmutabilidad","text":"<p>La mayor\u00eda de los m\u00e9todos devuelven nuevas colecciones.</p>"},{"location":"es/guides/core-concepts/#encadenamiento-de-metodos","title":"Encadenamiento de M\u00e9todos","text":"<p>Encadene m\u00e9todos para sintaxis fluida.</p> <p>Siguiente: Operadores de Consulta</p>"},{"location":"es/guides/getting-started/","title":"Primeros Pasos","text":"<p>Bienvenido a la gu\u00eda de primeros pasos para <code>@arcaelas/collection</code>!</p>"},{"location":"es/guides/getting-started/#tu-primera-coleccion","title":"Tu Primera Colecci\u00f3n","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"es/guides/getting-started/#filtrado-basico","title":"Filtrado B\u00e1sico","text":"<pre><code>const activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre> <p>Contin\u00faa leyendo en Conceptos B\u00e1sicos.</p>"},{"location":"es/guides/query-operators/","title":"Operadores de Consulta","text":"<p>Domine los operadores de consulta estilo MongoDB en <code>@arcaelas/collection</code>.</p>"},{"location":"es/guides/query-operators/#operadores-de-comparacion","title":"Operadores de Comparaci\u00f3n","text":""},{"location":"es/guides/query-operators/#eq-igual-gt-mayor-que-gte-lt-lte","title":"$eq (Igual), $gt (Mayor Que), $gte, $lt, $lte","text":""},{"location":"es/guides/query-operators/#operadores-logicos","title":"Operadores L\u00f3gicos","text":""},{"location":"es/guides/query-operators/#not-in-contains","title":"$not, $in, $contains","text":""},{"location":"es/guides/query-operators/#alias-de-operadores","title":"Alias de Operadores","text":"Alias Operador Significado <code>=</code> <code>$eq</code> Igual <code>!=</code> <code>$not</code> No igual <p>Siguiente: M\u00e9todos de Agregaci\u00f3n</p>"},{"location":"de/","title":"Willkommen bei @arcaelas/collection","text":"**Eine leistungsstarke TypeScript-Collection-Bibliothek mit MongoDB-\u00e4hnlicher Query-DSL**    [![npm Version](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![Lizenz](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![GitHub Sterne](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"de/#ubersicht","title":"\u00dcbersicht","text":"<p><code>@arcaelas/collection</code> ist eine umfassende Utility-Bibliothek, die native JavaScript-Arrays mit leistungsstarken Filter-, Abfrage- und Transformationsfunktionen erweitert. Inspiriert von Laravels Collections und MongoDBs Abfragesprache bietet sie eine elegante und typsichere API f\u00fcr die Arbeit mit Datensammlungen.</p>"},{"location":"de/#hauptmerkmale","title":"Hauptmerkmale","text":"<ul> <li>MongoDB-\u00e4hnliche Query-DSL - Intuitive Abfragesyntax mit Operatoren wie <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code> und mehr</li> <li>Typsicheres TypeScript - Vollst\u00e4ndige TypeScript-Unterst\u00fctzung mit generischen Typen f\u00fcr Autovervollst\u00e4ndigung und Typpr\u00fcfung</li> <li>Umfangreiche API - \u00dcber 30 integrierte Methoden zum Filtern, Transformieren und Aggregieren von Daten</li> <li>Methodenverkettung - Fluent Interface zum Komponieren komplexer Operationen</li> <li>Erweiterbar - F\u00fcgen Sie benutzerdefinierte Methoden mit Makros hinzu</li> <li>Keine Abh\u00e4ngigkeiten - Leichtgewichtig mit minimalen externen Abh\u00e4ngigkeiten</li> <li>Leistungsoptimiert - Effiziente Query-Kompilierung und native Array-Delegation</li> </ul>"},{"location":"de/#schnellstart","title":"Schnellstart","text":""},{"location":"de/#installation","title":"Installation","text":"<pre><code>npm install @arcaelas/collection\n# oder\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"de/#grundlegende-verwendung","title":"Grundlegende Verwendung","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filtern mit MongoDB-\u00e4hnlichen Abfragen\nconst activeUsers = users.filter({ active: true });\n\n// Filtern mit Abfrageoperatoren\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Methoden verketten\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"de/#warum-arcaelascollection","title":"Warum @arcaelas/collection?","text":""},{"location":"de/#problem","title":"Problem","text":"<p>Native JavaScript-Arrays haben begrenzte Funktionalit\u00e4t f\u00fcr komplexe Datenoperationen:</p> <pre><code>// Nativer Ansatz - ausf\u00fchrlich und fehleranf\u00e4llig\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"de/#losung","title":"L\u00f6sung","text":"<p>Collection bietet eine elegante, verkettbare API:</p> <pre><code>// Collection-Ansatz - sauber und ausdrucksstark\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"de/#grundkonzepte","title":"Grundkonzepte","text":""},{"location":"de/#abfrageoperatoren","title":"Abfrageoperatoren","text":"<p>Verwenden Sie MongoDB-Style-Operatoren f\u00fcr leistungsstarke Abfragen:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"de/#methodenverkettung","title":"Methodenverkettung","text":"<p>Komponieren Sie komplexe Operationen mit fluenter Syntax:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"de/#typsicherheit","title":"Typsicherheit","text":"<p>Nutzen Sie TypeScript f\u00fcr Compile-Time-Sicherheit:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript kennt die Form\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"de/#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":""},{"location":"de/#datenfilterung","title":"Datenfilterung","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"de/#datentransformation","title":"Datentransformation","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"de/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<ul> <li> <p> Erste Schritte</p> <p>Lernen Sie die Grundlagen und erstellen Sie Ihre erste Collection</p> </li> <li> <p> Grundkonzepte</p> <p>Verstehen Sie die grundlegenden Prinzipien und Muster</p> </li> <li> <p> Abfrageoperatoren</p> <p>Meistern Sie die MongoDB-\u00e4hnliche Abfragesyntax</p> </li> <li> <p> API-Referenz</p> <p>Erkunden Sie alle verf\u00fcgbaren Methoden und Signaturen</p> </li> <li> <p> Beispiele</p> <p>Sehen Sie praktische Beispiele und g\u00e4ngige Muster</p> </li> <li> <p> Erweitert</p> <p>Leistungstipps und fortgeschrittene Techniken</p> </li> </ul>"},{"location":"de/#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Fehler melden oder Funktionen anfordern</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"de/#lizenz","title":"Lizenz","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Mit \u2764\ufe0f vom Arcaelas Insiders Team gebaut </p> <p>     M\u00f6chten Sie eines unserer Open-Source-Projekte diskutieren? Senden Sie uns eine Nachricht auf     Twitter oder sponsern Sie uns bei     GitHub Sponsors.   </p>"},{"location":"de/CHANGELOG/","title":"\u00c4nderungsprotokoll","text":"<p>Alle wichtigen \u00c4nderungen an <code>@arcaelas/collection</code> werden in dieser Datei dokumentiert.</p>"},{"location":"de/CHANGELOG/#behoben","title":"Behoben","text":"<ul> <li>TypeScript-Typinferenz f\u00fcr <code>every()</code>-Methoden\u00fcberladungen behoben</li> <li>R\u00fcckgabetyp f\u00fcr <code>collect()</code>-Methode korrigiert</li> <li>Abfragevalidierung f\u00fcr verschachtelte Objekte korrigiert</li> </ul>"},{"location":"de/CHANGELOG/#verbessert","title":"Verbessert","text":"<ul> <li>Leistung der <code>unique()</code>-Methode mit gro\u00dfen Datens\u00e4tzen verbessert</li> <li>Abfragekompilierung f\u00fcr wiederholte Filteroperationen optimiert</li> <li>Bessere Fehlermeldungen f\u00fcr ung\u00fcltige Operatorverwendung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue <code>every()</code>-Methode mit mehreren \u00dcberladungssignaturen</li> <li>Unterst\u00fctzung f\u00fcr Punktnotation in <code>where()</code>- und <code>whereNot()</code>-Methoden</li> <li>Verbesserte <code>update()</code>-Methode mit Callback-Unterst\u00fctzung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt_1","title":"Hinzugef\u00fcgt","text":"<ul> <li>MongoDB-Stil-Abfrageoperatoren</li> <li>Abfrageoperator-Aliase</li> <li>Statische und Instanz-<code>macro()</code>-Methoden</li> <li><code>stringify()</code>-Methode f\u00fcr JSON-Serialisierung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt_2","title":"Hinzugef\u00fcgt","text":"<ul> <li>Vollst\u00e4ndige TypeScript-Umschreibung</li> <li>Vollst\u00e4ndige generische Typunterst\u00fctzung</li> <li>Neue Aggregations- und Transformationsmethoden</li> </ul>"},{"location":"de/CHANGELOG/#versionsunterstutzung","title":"Versionsunterst\u00fctzung","text":"Version Status Node.js TypeScript 2.1.x Aktiv 14+ 4.x+ 2.0.x Wartung 14+ 4.x+ 1.x Lebensende 12+ 3.x+"},{"location":"de/installation/","title":"Installation","text":"<p>Diese Anleitung hilft Ihnen bei der Installation und Einrichtung von <code>@arcaelas/collection</code> in Ihrem Projekt.</p>"},{"location":"de/installation/#anforderungen","title":"Anforderungen","text":"<ul> <li>Node.js: 14.x oder h\u00f6her</li> <li>TypeScript: 4.x oder h\u00f6her (optional, f\u00fcr TypeScript-Projekte)</li> <li>Paketmanager: npm, yarn oder pnpm</li> </ul>"},{"location":"de/installation/#installation-mit-paketmanager","title":"Installation mit Paketmanager","text":""},{"location":"de/installation/#mit-npm","title":"Mit npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#mit-yarn","title":"Mit yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#mit-pnpm","title":"Mit pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#importmethoden","title":"Importmethoden","text":""},{"location":"de/installation/#es-modul-empfohlen","title":"ES-Modul (Empfohlen)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"de/installation/#benannter-import","title":"Benannter Import","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"de/installation/#typescript-konfiguration","title":"TypeScript-Konfiguration","text":"<p>Wenn Sie TypeScript verwenden, stellen Sie sicher, dass Ihre <code>tsconfig.json</code> die richtige Konfiguration enth\u00e4lt:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"de/installation/#installation-uberprufen","title":"Installation \u00dcberpr\u00fcfen","text":"<p>Erstellen Sie eine einfache Testdatei, um die Installation zu \u00fcberpr\u00fcfen:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Gesamt:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"Maximum:\", numbers.max(\"value\"));\nconsole.log(\"Erstes:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Gefiltert:\", filtered); // [3, 4, 5]\n</code></pre> <p>Test ausf\u00fchren:</p> <pre><code># Wenn Sie TypeScript verwenden\nnpx ts-node test-collection.ts\n\n# Wenn Sie JavaScript verwenden\nnode test-collection.js\n</code></pre>"},{"location":"de/installation/#bundle-groe","title":"Bundle-Gr\u00f6\u00dfe","text":"<p>Die Bibliothek ist leichtgewichtig und tree-shakeable:</p> <ul> <li>Minifiziert: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"de/installation/#browser-kompatibilitat","title":"Browser-Kompatibilit\u00e4t","text":"<p><code>@arcaelas/collection</code> funktioniert in allen modernen Browsern, die ES2020 unterst\u00fctzen:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>F\u00fcr \u00e4ltere Browser verwenden Sie einen Transpiler wie Babel.</p>"},{"location":"de/installation/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<p>Jetzt, da Sie <code>@arcaelas/collection</code> installiert haben, k\u00f6nnen Sie:</p> <ul> <li>Die Anleitung Erste Schritte lesen</li> <li>Grundkonzepte erkunden</li> <li>Beispiele ansehen</li> <li>Die API-Referenz durchsuchen</li> </ul>"},{"location":"de/advanced/extending-collection/","title":"Collection erweitern","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"de/advanced/performance/","title":"Leistung","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"de/advanced/typescript-usage/","title":"TypeScript-Verwendung","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"de/api/aggregation-methods/","title":"Aggregationsmethoden","text":""},{"location":"de/api/collection-class/","title":"Collection-Klasse","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"de/api/filtering-methods/","title":"Filtermethoden","text":""},{"location":"de/api/macros/","title":"Makros","text":"<p>Extend Collection with custom methods using macros.</p> <pre><code>Collection.macro('pluck', function(key) {\n  return this.map(item =&gt; item[key]);\n});\n\ncollection.pluck('name');\n</code></pre>"},{"location":"de/api/transformation-methods/","title":"Transformationsmethoden","text":""},{"location":"de/api/utility-methods/","title":"Hilfsmethoden","text":""},{"location":"de/examples/advanced-patterns/","title":"Erweiterte Muster","text":"<p>Advanced patterns and techniques.</p>"},{"location":"de/examples/basic-usage/","title":"Grundlegende Verwendung","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"de/examples/filtering-sorting/","title":"Filtern und Sortieren","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"de/guides/aggregation-methods/","title":"Aggregationsmethoden","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"de/guides/core-concepts/","title":"Grundkonzepte","text":"<p>Lernen Sie die grundlegenden Konzepte hinter <code>@arcaelas/collection</code>.</p>"},{"location":"de/guides/core-concepts/#collections-als-erweiterte-arrays","title":"Collections als Erweiterte Arrays","text":"<p>Collections erweitern native JavaScript-Arrays mit leistungsstarken Methoden.</p>"},{"location":"de/guides/core-concepts/#typsicherheit","title":"Typsicherheit","text":"<p>Verwenden Sie TypeScript-Generics f\u00fcr typsichere Collections.</p>"},{"location":"de/guides/core-concepts/#abfragesprache","title":"Abfragesprache","text":"<p>Collections unterst\u00fctzen MongoDB-Style-Abfragen.</p>"},{"location":"de/guides/core-concepts/#unveranderlichkeit","title":"Unver\u00e4nderlichkeit","text":"<p>Die meisten Methoden geben neue Collections zur\u00fcck.</p>"},{"location":"de/guides/core-concepts/#methodenverkettung","title":"Methodenverkettung","text":"<p>Verketten Sie Methoden f\u00fcr fluente Syntax.</p> <p>Weiter: Abfrageoperatoren</p>"},{"location":"de/guides/getting-started/","title":"Erste Schritte","text":"<p>Willkommen zum Leitfaden f\u00fcr die ersten Schritte mit <code>@arcaelas/collection</code>!</p>"},{"location":"de/guides/getting-started/#ihre-erste-collection","title":"Ihre Erste Collection","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"de/guides/getting-started/#grundlegende-filterung","title":"Grundlegende Filterung","text":"<pre><code>const activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre> <p>Lesen Sie weiter in Grundkonzepte.</p>"},{"location":"de/guides/query-operators/","title":"Abfrageoperatoren","text":"<p>Meistern Sie MongoDB-Style-Abfrageoperatoren in <code>@arcaelas/collection</code>.</p>"},{"location":"de/guides/query-operators/#vergleichsoperatoren","title":"Vergleichsoperatoren","text":""},{"location":"de/guides/query-operators/#eq-gleich-gt-groer-als-gte-lt-lte","title":"$eq (Gleich), $gt (Gr\u00f6\u00dfer Als), $gte, $lt, $lte","text":""},{"location":"de/guides/query-operators/#logische-operatoren","title":"Logische Operatoren","text":""},{"location":"de/guides/query-operators/#not-in-contains","title":"$not, $in, $contains","text":""},{"location":"de/guides/query-operators/#operator-aliase","title":"Operator-Aliase","text":"Alias Operator Bedeutung <code>=</code> <code>$eq</code> Gleich <code>!=</code> <code>$not</code> Nicht gleich <p>Weiter: Aggregationsmethoden</p>"}]}