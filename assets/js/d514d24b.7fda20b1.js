"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6581],{6444:e=>{e.exports=JSON.parse('{"permalink":"/blog/patrones-avanzados-collection","editUrl":"https://github.com/arcaelas/collection/blog/2024-06-25-patrones-avanzados-collection.md","source":"@site/blog/2024-06-25-patrones-avanzados-collection.md","title":"Patrones avanzados de uso en Arcaelas Collection","description":"Arcaelas Collection no es solo una librer\xeda para manipular datos, sino una herramienta que permite implementar patrones de dise\xf1o avanzados con una sintaxis limpia y expresiva.","date":"2024-06-25T00:00:00.000Z","tags":[{"inline":false,"label":"Colecci\xf3n","permalink":"/blog/tags/coleccion","description":"Funcionalidades del n\xfacleo de la librer\xeda Arcaelas Collection"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"},{"inline":false,"label":"Patrones","permalink":"/blog/tags/patrones","description":"Patrones de dise\xf1o y arquitectura con Arcaelas Collection"},{"inline":false,"label":"Rendimiento","permalink":"/blog/tags/rendimiento","description":"Optimizaci\xf3n y an\xe1lisis de rendimiento con Arcaelas Collection"}],"readingTime":4.79,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"patrones-avanzados-collection","title":"Patrones avanzados de uso en Arcaelas Collection","authors":["miguel"],"tags":["colecci\xf3n","typescript","patrones","rendimiento"]},"unlisted":false,"prevItem":{"title":"Comparativa entre Arcaelas Collection y otras librer\xedas de manipulaci\xf3n de datos","permalink":"/blog/comparativa-collection-otras-librerias"},"nextItem":{"title":"Novedades y hoja de ruta de Arcaelas Collection","permalink":"/blog/novedades-roadmap"}}')},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var a=o(6540);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},9039:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var a=o(6444),t=o(4848),r=o(8453);const i={slug:"patrones-avanzados-collection",title:"Patrones avanzados de uso en Arcaelas Collection",authors:["miguel"],tags:["colecci\xf3n","typescript","patrones","rendimiento"]},s="Patrones avanzados de uso en Arcaelas Collection",c={authorsImageUrls:[void 0]},l=[{value:"Patr\xf3n Mediador con Collection",id:"patr\xf3n-mediador-con-collection",level:2},{value:"Patr\xf3n Observador con encadenamiento",id:"patr\xf3n-observador-con-encadenamiento",level:2},{value:"Patr\xf3n Estrategia para ordenaci\xf3n personalizada",id:"patr\xf3n-estrategia-para-ordenaci\xf3n-personalizada",level:2},{value:"Implementando un Repositorio con Collection",id:"implementando-un-repositorio-con-collection",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Arcaelas Collection no es solo una librer\xeda para manipular datos, sino una herramienta que permite implementar patrones de dise\xf1o avanzados con una sintaxis limpia y expresiva."}),"\n",(0,t.jsx)(n.h2,{id:"patr\xf3n-mediador-con-collection",children:"Patr\xf3n Mediador con Collection"}),"\n",(0,t.jsx)(n.p,{children:"El patr\xf3n Mediador es ideal cuando necesitas centralizar la comunicaci\xf3n entre varios componentes. Utilizando Collection como mediador, puedes simplificar esta implementaci\xf3n:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\n// Definici\xf3n de tipos para nuestro sistema de mensajer\xeda\ntype Mensaje = {\n  id: string;\n  origen: string;\n  destino: string;\n  contenido: string;\n  timestamp: number;\n  le\xeddo: boolean;\n};\n\n// Mediador basado en Collection\nclass MediadorMensajes {\n  private mensajes = new Collection<Mensaje>([]);\n  \n  enviarMensaje(origen: string, destino: string, contenido: string): Mensaje {\n    const mensaje: Mensaje = {\n      id: `msg_${Date.now()}`,\n      origen,\n      destino,\n      contenido,\n      timestamp: Date.now(),\n      le\xeddo: false\n    };\n    \n    this.mensajes.push(mensaje);\n    return mensaje;\n  }\n  \n  obtenerMensajesParaUsuario(usuario: string): Collection<Mensaje> {\n    return this.mensajes.where(m => m.destino === usuario);\n  }\n  \n  marcarComoLe\xeddo(id: string): boolean {\n    const mensaje = this.mensajes.find(m => m.id === id);\n    if (mensaje) {\n      mensaje.le\xeddo = true;\n      return true;\n    }\n    return false;\n  }\n  \n  // M\xe9todo para an\xe1lisis de comunicaci\xf3n\n  obtenerEstad\xedsticasConversaci\xf3n(usuario1: string, usuario2: string) {\n    const conversacion = this.mensajes.where(m => \n      (m.origen === usuario1 && m.destino === usuario2) || \n      (m.origen === usuario2 && m.destino === usuario1)\n    ).sortBy('timestamp');\n    \n    return {\n      totalMensajes: conversacion.length,\n      mensajesNoLe\xeddos: conversacion.where({ le\xeddo: false }).length,\n      primerMensaje: conversacion.first(),\n      \xfaltimoMensaje: conversacion.last(),\n      tiempoPromedioRespuesta: this.calcularTiempoPromedioRespuesta(conversacion)\n    };\n  }\n  \n  private calcularTiempoPromedioRespuesta(conversacion: Collection<Mensaje>): number {\n    if (conversacion.length < 2) return 0;\n    \n    let tiempoTotal = 0;\n    let contadorRespuestas = 0;\n    \n    conversacion.reduce((anterior, actual) => {\n      if (anterior && anterior.origen !== actual.origen) {\n        tiempoTotal += actual.timestamp - anterior.timestamp;\n        contadorRespuestas++;\n      }\n      return actual;\n    });\n    \n    return contadorRespuestas ? tiempoTotal / contadorRespuestas : 0;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"patr\xf3n-observador-con-encadenamiento",children:"Patr\xf3n Observador con encadenamiento"}),"\n",(0,t.jsx)(n.p,{children:"Collection permite implementar f\xe1cilmente un sistema de observadores con encadenamiento de m\xe9todos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\ntype Observer<T> = (data: T) => void;\n\nclass ObservableCollection<T> {\n  private collection: Collection<T>;\n  private observers = new Collection<Observer<Collection<T>>>([]);\n  \n  constructor(items: T[] = []) {\n    this.collection = new Collection<T>(items);\n  }\n  \n  // M\xe9todos para suscribir/desuscribir observadores\n  subscribe(observer: Observer<Collection<T>>): ObservableCollection<T> {\n    this.observers.push(observer);\n    return this;\n  }\n  \n  unsubscribe(observer: Observer<Collection<T>>): ObservableCollection<T> {\n    this.observers = this.observers.filter(o => o !== observer);\n    return this;\n  }\n  \n  // Notificar cambios\n  private notify(): ObservableCollection<T> {\n    this.observers.forEach(observer => observer(this.collection));\n    return this;\n  }\n  \n  // Operaciones que modifican la colecci\xf3n\n  add(item: T): ObservableCollection<T> {\n    this.collection.push(item);\n    return this.notify();\n  }\n  \n  remove(predicate: (item: T) => boolean): ObservableCollection<T> {\n    this.collection = this.collection.reject(predicate);\n    return this.notify();\n  }\n  \n  update(predicate: (item: T) => boolean, updater: (item: T) => T): ObservableCollection<T> {\n    this.collection = this.collection.map(item => {\n      if (predicate(item)) {\n        return updater(item);\n      }\n      return item;\n    });\n    return this.notify();\n  }\n  \n  // Acceso a la colecci\xf3n interna para operaciones de consulta\n  get(): Collection<T> {\n    return this.collection;\n  }\n}\n\n// Ejemplo de uso\ntype Tarea = {\n  id: string;\n  t\xedtulo: string;\n  completada: boolean;\n};\n\nconst gestor = new ObservableCollection<Tarea>([\n  { id: '1', t\xedtulo: 'Aprender Collection', completada: false }\n]);\n\n// Registrar observadores\ngestor.subscribe(colecci\xf3n => {\n  console.log('Tareas actualizadas:', colecci\xf3n.toArray());\n  console.log('Tareas pendientes:', colecci\xf3n.where({ completada: false }).length);\n});\n\n// Realizar operaciones\ngestor\n  .add({ id: '2', t\xedtulo: 'Implementar Observer', completada: false })\n  .update(t => t.id === '1', t => ({ ...t, completada: true }));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"patr\xf3n-estrategia-para-ordenaci\xf3n-personalizada",children:"Patr\xf3n Estrategia para ordenaci\xf3n personalizada"}),"\n",(0,t.jsx)(n.p,{children:"Collection permite implementar f\xe1cilmente el patr\xf3n Estrategia para ordenaciones complejas:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\n// Definici\xf3n de tipos para productos\ntype Producto = {\n  id: string;\n  nombre: string;\n  precio: number;\n  valoraci\xf3n: number;\n  ventas: number;\n  fecha: Date;\n};\n\n// Interfaz para estrategias de ordenaci\xf3n\ninterface EstrategiaOrdenaci\xf3n {\n  ordenar(productos: Collection<Producto>): Collection<Producto>;\n  nombre: string;\n}\n\n// Implementaci\xf3n de diferentes estrategias\nclass OrdenarPorPrecioAscendente implements EstrategiaOrdenaci\xf3n {\n  nombre = 'Precio: menor a mayor';\n  ordenar(productos: Collection<Producto>): Collection<Producto> {\n    return productos.sortBy('precio');\n  }\n}\n\nclass OrdenarPorPrecioDescendente implements EstrategiaOrdenaci\xf3n {\n  nombre = 'Precio: mayor a menor';\n  ordenar(productos: Collection<Producto>): Collection<Producto> {\n    return productos.sortByDesc('precio');\n  }\n}\n\nclass OrdenarPorRelevancia implements EstrategiaOrdenaci\xf3n {\n  nombre = 'Relevancia';\n  ordenar(productos: Collection<Producto>): Collection<Producto> {\n    // Algoritmo personalizado que combina valoraci\xf3n y ventas\n    return productos.sort((a, b) => {\n      const scoreA = a.valoraci\xf3n * 0.7 + (Math.log(a.ventas) * 0.3);\n      const scoreB = b.valoraci\xf3n * 0.7 + (Math.log(b.ventas) * 0.3);\n      return scoreB - scoreA; // Orden descendente\n    });\n  }\n}\n\nclass OrdenarPorNovedad implements EstrategiaOrdenaci\xf3n {\n  nombre = 'M\xe1s recientes primero';\n  ordenar(productos: Collection<Producto>): Collection<Producto> {\n    return productos.sortByDesc('fecha');\n  }\n}\n\n// Uso del contexto con estrategias intercambiables\nclass Cat\xe1logoProductos {\n  private productos: Collection<Producto>;\n  private estrategiaActual: EstrategiaOrdenaci\xf3n;\n  private estrategiasDisponibles: Collection<EstrategiaOrdenaci\xf3n>;\n  \n  constructor(productos: Producto[]) {\n    this.productos = new Collection(productos);\n    \n    // Inicializar estrategias disponibles\n    this.estrategiasDisponibles = new Collection([\n      new OrdenarPorRelevancia(),\n      new OrdenarPorPrecioAscendente(),\n      new OrdenarPorPrecioDescendente(),\n      new OrdenarPorNovedad()\n    ]);\n    \n    // Estrategia por defecto\n    this.estrategiaActual = this.estrategiasDisponibles.first();\n  }\n  \n  cambiarEstrategia(nombreEstrategia: string): boolean {\n    const estrategia = this.estrategiasDisponibles.find(e => e.nombre === nombreEstrategia);\n    if (estrategia) {\n      this.estrategiaActual = estrategia;\n      return true;\n    }\n    return false;\n  }\n  \n  obtenerEstrategiasDisponibles(): string[] {\n    return this.estrategiasDisponibles.map(e => e.nombre).toArray();\n  }\n  \n  obtenerProductosOrdenados(): Collection<Producto> {\n    return this.estrategiaActual.ordenar(this.productos);\n  }\n  \n  // M\xe9todo para filtrar y luego ordenar\n  obtenerProductosFiltradosYOrdenados(filtro: (p: Producto) => boolean): Collection<Producto> {\n    return this.estrategiaActual.ordenar(this.productos.where(filtro));\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementando-un-repositorio-con-collection",children:"Implementando un Repositorio con Collection"}),"\n",(0,t.jsx)(n.p,{children:"Collection facilita la implementaci\xf3n del patr\xf3n Repositorio para acceso a datos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\n// Definir entidad\ninterface Entidad {\n  id: string;\n}\n\n// Repositorio gen\xe9rico\nabstract class Repositorio<T extends Entidad> {\n  protected colecci\xf3n: Collection<T>;\n  \n  constructor(datos: T[] = []) {\n    this.colecci\xf3n = new Collection<T>(datos);\n  }\n  \n  // M\xe9todos CRUD b\xe1sicos\n  obtenerTodos(): Collection<T> {\n    return this.colecci\xf3n;\n  }\n  \n  obtenerPorId(id: string): T | undefined {\n    return this.colecci\xf3n.find(entidad => entidad.id === id);\n  }\n  \n  crear(entidad: T): T {\n    if (this.obtenerPorId(entidad.id)) {\n      throw new Error(`Entidad con ID ${entidad.id} ya existe`);\n    }\n    this.colecci\xf3n.push(entidad);\n    return entidad;\n  }\n  \n  actualizar(entidad: T): boolean {\n    const \xedndice = this.colecci\xf3n.findIndex(e => e.id === entidad.id);\n    if (\xedndice === -1) return false;\n    \n    // Actualizar la entidad en la colecci\xf3n\n    this.colecci\xf3n[\xedndice] = entidad;\n    return true;\n  }\n  \n  eliminar(id: string): boolean {\n    const longitudAnterior = this.colecci\xf3n.length;\n    this.colecci\xf3n = this.colecci\xf3n.reject(e => e.id === id);\n    return longitudAnterior > this.colecci\xf3n.length;\n  }\n  \n  // M\xe9todo para realizar consultas personalizadas\n  consultar(predicado: (entidad: T) => boolean): Collection<T> {\n    return this.colecci\xf3n.where(predicado);\n  }\n}\n\n// Ejemplo de implementaci\xf3n concreta\ninterface Usuario extends Entidad {\n  nombre: string;\n  email: string;\n  rol: string;\n}\n\nclass RepositorioUsuarios extends Repositorio<Usuario> {\n  // M\xe9todos espec\xedficos para usuarios\n  obtenerPorEmail(email: string): Usuario | undefined {\n    return this.colecci\xf3n.find(u => u.email === email);\n  }\n  \n  obtenerPorRol(rol: string): Collection<Usuario> {\n    return this.colecci\xf3n.where({ rol });\n  }\n  \n  cambiarRol(id: string, nuevoRol: string): boolean {\n    const usuario = this.obtenerPorId(id);\n    if (!usuario) return false;\n    \n    usuario.rol = nuevoRol;\n    return this.actualizar(usuario);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,t.jsx)(n.p,{children:"Arcaelas Collection facilita la implementaci\xf3n de patrones de dise\xf1o avanzados gracias a su API fluida y expresiva. Al combinar estos patrones con las capacidades de filtrado, mapeo y agregaci\xf3n de Collection, puedes desarrollar aplicaciones m\xe1s mantenibles y escalables."}),"\n",(0,t.jsx)(n.p,{children:"Estos patrones son especialmente \xfatiles cuando trabajas con aplicaciones de cierta complejidad, donde la manipulaci\xf3n de datos necesita ser organizada siguiendo principios de dise\xf1o s\xf3lidos."}),"\n",(0,t.jsx)(n.p,{children:"\xbfHas implementado otros patrones con Arcaelas Collection? \xa1Comparte tu experiencia en los comentarios!"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);