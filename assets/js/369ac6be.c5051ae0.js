"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5722],{5758:e=>{e.exports=JSON.parse('{"permalink":"/blog/caso-practico-analisis-datos","editUrl":"https://github.com/arcaelas/collection/blog/2024-06-27-caso-practico-analisis-datos.md","source":"@site/blog/2024-06-27-caso-practico-analisis-datos.md","title":"Caso pr\xe1ctico: An\xe1lisis de datos con Arcaelas Collection","description":"En este art\xedculo exploraremos un caso de uso real de Arcaelas Collection aplicado al an\xe1lisis de datos en una aplicaci\xf3n de comercio electr\xf3nico, mostrando c\xf3mo la API fluida y el tipado fuerte pueden transformar el c\xf3digo en soluciones m\xe1s elegantes y mantenibles.","date":"2024-06-27T00:00:00.000Z","tags":[{"inline":false,"label":"Colecci\xf3n","permalink":"/blog/tags/coleccion","description":"Funcionalidades del n\xfacleo de la librer\xeda Arcaelas Collection"},{"inline":false,"label":"Casos de Uso","permalink":"/blog/tags/casos-uso","description":"Ejemplos pr\xe1cticos de implementaci\xf3n de Arcaelas Collection"},{"inline":false,"label":"Rendimiento","permalink":"/blog/tags/rendimiento","description":"Optimizaci\xf3n y an\xe1lisis de rendimiento con Arcaelas Collection"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"}],"readingTime":6.14,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"caso-practico-analisis-datos","title":"Caso pr\xe1ctico: An\xe1lisis de datos con Arcaelas Collection","authors":["miguel"],"tags":["colecci\xf3n","casos-uso","rendimiento","typescript"]},"unlisted":false,"nextItem":{"title":"Comparativa entre Arcaelas Collection y otras librer\xedas de manipulaci\xf3n de datos","permalink":"/blog/comparativa-collection-otras-librerias"}}')},6585:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var a=o(5758),t=o(4848),s=o(8453);const r={slug:"caso-practico-analisis-datos",title:"Caso pr\xe1ctico: An\xe1lisis de datos con Arcaelas Collection",authors:["miguel"],tags:["colecci\xf3n","casos-uso","rendimiento","typescript"]},i="Caso pr\xe1ctico: An\xe1lisis de datos con Arcaelas Collection",c={authorsImageUrls:[void 0]},l=[{value:"El desaf\xedo: An\xe1lisis de ventas en un e-commerce",id:"el-desaf\xedo-an\xe1lisis-de-ventas-en-un-e-commerce",level:2},{value:"Modelado de datos",id:"modelado-de-datos",level:2},{value:"Implementaci\xf3n tradicional vs. Collection",id:"implementaci\xf3n-tradicional-vs-collection",level:2},{value:"An\xe1lisis de ventas por per\xedodo y categor\xeda",id:"an\xe1lisis-de-ventas-por-per\xedodo-y-categor\xeda",level:3},{value:"Productos m\xe1s vendidos y rentables",id:"productos-m\xe1s-vendidos-y-rentables",level:3},{value:"Segmentaci\xf3n de clientes",id:"segmentaci\xf3n-de-clientes",level:3},{value:"Generaci\xf3n de informes con datos agregados",id:"generaci\xf3n-de-informes-con-datos-agregados",level:2},{value:"Beneficios observados",id:"beneficios-observados",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"En este art\xedculo exploraremos un caso de uso real de Arcaelas Collection aplicado al an\xe1lisis de datos en una aplicaci\xf3n de comercio electr\xf3nico, mostrando c\xf3mo la API fluida y el tipado fuerte pueden transformar el c\xf3digo en soluciones m\xe1s elegantes y mantenibles."}),"\n",(0,t.jsx)(n.h2,{id:"el-desaf\xedo-an\xe1lisis-de-ventas-en-un-e-commerce",children:"El desaf\xedo: An\xe1lisis de ventas en un e-commerce"}),"\n",(0,t.jsx)(n.p,{children:"Imaginemos que estamos desarrollando el panel de an\xe1lisis para una plataforma de comercio electr\xf3nico y necesitamos implementar funcionalidades para:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Analizar tendencias de ventas por per\xedodo y categor\xeda"}),"\n",(0,t.jsx)(n.li,{children:"Identificar productos m\xe1s vendidos y rentables"}),"\n",(0,t.jsx)(n.li,{children:"Segmentar clientes y analizar comportamientos de compra"}),"\n",(0,t.jsx)(n.li,{children:"Generar informes agregados con m\xe9tricas clave"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Estas operaciones implican manipular grandes vol\xfamenes de datos con estructuras complejas, filtrarlos, agruparlos y transformarlos."}),"\n",(0,t.jsx)(n.h2,{id:"modelado-de-datos",children:"Modelado de datos"}),"\n",(0,t.jsx)(n.p,{children:"Primero, definamos los tipos de datos con los que trabajaremos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Tipos para nuestro an\xe1lisis\ninterface Producto {\n  id: string;\n  nombre: string;\n  precio: number;\n  categor\xeda: string;\n  costo: number;\n  stock: number;\n  proveedor: string;\n}\n\ninterface Cliente {\n  id: string;\n  nombre: string;\n  email: string;\n  fechaRegistro: Date;\n  ubicaci\xf3n: string;\n  segmento: 'nuevo' | 'ocasional' | 'frecuente' | 'vip';\n}\n\ninterface Venta {\n  id: string;\n  fecha: Date;\n  clienteId: string;\n  productos: Array<{\n    productoId: string;\n    cantidad: number;\n    precioUnitario: number;\n    descuento: number;\n  }>;\n  total: number;\n  m\xe9todo_pago: string;\n  estado: 'completada' | 'cancelada' | 'reembolsada';\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementaci\xf3n-tradicional-vs-collection",children:"Implementaci\xf3n tradicional vs. Collection"}),"\n",(0,t.jsx)(n.h3,{id:"an\xe1lisis-de-ventas-por-per\xedodo-y-categor\xeda",children:"An\xe1lisis de ventas por per\xedodo y categor\xeda"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementaci\xf3n tradicional:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function analizarVentasPorPeriodo(\n  ventas: Venta[], \n  productos: Producto[],\n  inicio: Date, \n  fin: Date, \n  categor\xeda?: string\n) {\n  // Filtrar ventas por per\xedodo\n  const ventasFiltradas = ventas.filter(v => \n    v.fecha >= inicio && \n    v.fecha <= fin && \n    v.estado === 'completada'\n  );\n  \n  // Preparar resultado\n  const resultado: Record<string, number> = {};\n  \n  // Procesar cada venta\n  ventasFiltradas.forEach(venta => {\n    venta.productos.forEach(item => {\n      const producto = productos.find(p => p.id === item.productoId);\n      if (producto && (!categor\xeda || producto.categor\xeda === categor\xeda)) {\n        const mes = `${venta.fecha.getMonth() + 1}-${venta.fecha.getFullYear()}`;\n        if (!resultado[mes]) resultado[mes] = 0;\n        resultado[mes] += item.cantidad * item.precioUnitario;\n      }\n    });\n  });\n  \n  return Object.entries(resultado)\n    .map(([periodo, total]) => ({ periodo, total }))\n    .sort((a, b) => a.periodo.localeCompare(b.periodo));\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Con Arcaelas Collection:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\nfunction analizarVentasPorPeriodo(\n  ventas: Venta[], \n  productos: Producto[],\n  inicio: Date, \n  fin: Date, \n  categor\xeda?: string\n) {\n  const productosCollection = new Collection(productos);\n  \n  return new Collection(ventas)\n    // Filtrar por per\xedodo y estado\n    .where(v => v.fecha >= inicio && v.fecha <= fin && v.estado === 'completada')\n    // Expandir cada producto de cada venta\n    .flatMap(venta => \n      venta.productos.map(item => ({\n        fecha: venta.fecha,\n        productoId: item.productoId,\n        importe: item.cantidad * item.precioUnitario\n      }))\n    )\n    // Filtrar por categor\xeda si se especifica\n    .filter(item => {\n      if (!categor\xeda) return true;\n      const producto = productosCollection.find(p => p.id === item.productoId);\n      return producto?.categor\xeda === categor\xeda;\n    })\n    // Agregar per\xedodo (mes-a\xf1o)\n    .map(item => ({\n      ...item,\n      periodo: `${item.fecha.getMonth() + 1}-${item.fecha.getFullYear()}`\n    }))\n    // Agrupar por per\xedodo y sumar importes\n    .groupBy('periodo')\n    .map(grupo => ({\n      periodo: grupo.key,\n      total: grupo.items.sum('importe')\n    }))\n    // Ordenar por per\xedodo\n    .sortBy('periodo');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"productos-m\xe1s-vendidos-y-rentables",children:"Productos m\xe1s vendidos y rentables"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementaci\xf3n tradicional:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function obtenerProductosMasRentables(ventas: Venta[], productos: Producto[], l\xedmite = 10) {\n  // Contabilizar ventas por producto\n  const ventasPorProducto: Record<string, { unidades: number, ingresos: number }> = {};\n  \n  ventas.forEach(venta => {\n    if (venta.estado !== 'completada') return;\n    \n    venta.productos.forEach(item => {\n      if (!ventasPorProducto[item.productoId]) {\n        ventasPorProducto[item.productoId] = { unidades: 0, ingresos: 0 };\n      }\n      ventasPorProducto[item.productoId].unidades += item.cantidad;\n      ventasPorProducto[item.productoId].ingresos += item.cantidad * item.precioUnitario;\n    });\n  });\n  \n  // Calcular rentabilidad\n  const resultados = productos.map(producto => {\n    const ventas = ventasPorProducto[producto.id] || { unidades: 0, ingresos: 0 };\n    const costoTotal = ventas.unidades * producto.costo;\n    const rentabilidad = ventas.ingresos - costoTotal;\n    const margen = ventas.ingresos > 0 ? (rentabilidad / ventas.ingresos) * 100 : 0;\n    \n    return {\n      id: producto.id,\n      nombre: producto.nombre,\n      categor\xeda: producto.categor\xeda,\n      unidadesVendidas: ventas.unidades,\n      ingresos: ventas.ingresos,\n      rentabilidad,\n      margen\n    };\n  });\n  \n  // Ordenar y limitar resultados\n  return resultados\n    .sort((a, b) => b.rentabilidad - a.rentabilidad)\n    .slice(0, l\xedmite);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Con Arcaelas Collection:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function obtenerProductosMasRentables(ventas: Venta[], productos: Producto[], l\xedmite = 10) {\n  const ventasCollection = new Collection(ventas).where({ estado: 'completada' });\n  \n  // Agregar ventas por producto\n  const ventasPorProducto = ventasCollection\n    .flatMap(v => v.productos)\n    .groupBy('productoId')\n    .map(grupo => ({\n      productoId: grupo.key,\n      unidades: grupo.items.sum('cantidad'),\n      ingresos: grupo.items.sum(item => item.cantidad * item.precioUnitario)\n    }))\n    .keyBy('productoId');\n  \n  // Calcular rentabilidad para cada producto\n  return new Collection(productos)\n    .map(producto => {\n      const ventas = ventasPorProducto.get(producto.id) || { unidades: 0, ingresos: 0 };\n      const costoTotal = ventas.unidades * producto.costo;\n      const rentabilidad = ventas.ingresos - costoTotal;\n      \n      return {\n        id: producto.id,\n        nombre: producto.nombre,\n        categor\xeda: producto.categor\xeda,\n        unidadesVendidas: ventas.unidades,\n        ingresos: ventas.ingresos,\n        rentabilidad,\n        margen: ventas.ingresos > 0 ? (rentabilidad / ventas.ingresos) * 100 : 0\n      };\n    })\n    .sortByDesc('rentabilidad')\n    .take(l\xedmite);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"segmentaci\xf3n-de-clientes",children:"Segmentaci\xf3n de clientes"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementaci\xf3n tradicional:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function segmentarClientes(clientes: Cliente[], ventas: Venta[]) {\n  const resultados: Record<string, number> = {\n    nuevo: 0,\n    ocasional: 0,\n    frecuente: 0,\n    vip: 0\n  };\n  \n  // Contar clientes por segmento\n  clientes.forEach(cliente => {\n    resultados[cliente.segmento]++;\n  });\n  \n  // Calcular valor medio por segmento\n  const ventasPorCliente: Record<string, number[]> = {\n    nuevo: [],\n    ocasional: [],\n    frecuente: [],\n    vip: []\n  };\n  \n  // Agrupar ventas por cliente\n  const ventasAgrupadas: Record<string, Venta[]> = {};\n  ventas.forEach(venta => {\n    if (venta.estado !== 'completada') return;\n    if (!ventasAgrupadas[venta.clienteId]) {\n      ventasAgrupadas[venta.clienteId] = [];\n    }\n    ventasAgrupadas[venta.clienteId].push(venta);\n  });\n  \n  // Calcular valor medio de compra por segmento\n  clientes.forEach(cliente => {\n    const clienteVentas = ventasAgrupadas[cliente.id] || [];\n    const totalCompras = clienteVentas.reduce((suma, v) => suma + v.total, 0);\n    if (clienteVentas.length > 0) {\n      ventasPorCliente[cliente.segmento].push(totalCompras);\n    }\n  });\n  \n  // Calcular promedios\n  const promedios: Record<string, number> = {};\n  for (const segmento in ventasPorCliente) {\n    const valores = ventasPorCliente[segmento];\n    promedios[segmento] = valores.length > 0 \n      ? valores.reduce((sum, val) => sum + val, 0) / valores.length \n      : 0;\n  }\n  \n  return {\n    distribuci\xf3n: resultados,\n    valorMedio: promedios\n  };\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Con Arcaelas Collection:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function segmentarClientes(clientes: Cliente[], ventas: Venta[]) {\n  const clientesCollection = new Collection(clientes);\n  const ventasCollection = new Collection(ventas).where({ estado: 'completada' });\n  \n  // Distribuci\xf3n por segmento\n  const distribuci\xf3n = clientesCollection\n    .countBy('segmento');\n  \n  // Valor medio por segmento\n  const valorMedio = clientesCollection\n    .map(cliente => ({\n      cliente,\n      ventas: ventasCollection\n        .where({ clienteId: cliente.id })\n        .sum('total')\n    }))\n    .where(item => item.ventas > 0)\n    .groupBy(item => item.cliente.segmento)\n    .map(grupo => ({\n      segmento: grupo.key,\n      valorMedio: grupo.items.average('ventas')\n    }))\n    .keyBy('segmento')\n    .map(item => item.valorMedio)\n    .toObject();\n  \n  return {\n    distribuci\xf3n,\n    valorMedio\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generaci\xf3n-de-informes-con-datos-agregados",children:"Generaci\xf3n de informes con datos agregados"}),"\n",(0,t.jsx)(n.p,{children:"Para finalizar, veamos c\xf3mo crear un informe completo de rendimiento del negocio:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Collection } from '@arcaelas/collection';\n\nfunction generarInformeRendimiento(ventas: Venta[], productos: Producto[], clientes: Cliente[], periodo: { inicio: Date, fin: Date }) {\n  const ventasCollection = new Collection(ventas)\n    .where(v => v.fecha >= periodo.inicio && v.fecha <= periodo.fin);\n  \n  const ventasCompletadas = ventasCollection.where({ estado: 'completada' });\n  const ventasCanceladas = ventasCollection.where({ estado: 'cancelada' });\n  \n  // M\xe9tricas generales\n  const ingresoTotal = ventasCompletadas.sum('total');\n  const numeroVentas = ventasCompletadas.length;\n  const ticketMedio = numeroVentas > 0 ? ingresoTotal / numeroVentas : 0;\n  const tasaCancelaci\xf3n = ventasCollection.length > 0 \n    ? (ventasCanceladas.length / ventasCollection.length) * 100 \n    : 0;\n  \n  // Ventas por d\xeda\n  const ventasPorD\xeda = ventasCompletadas\n    .groupBy(v => v.fecha.toISOString().substring(0, 10))\n    .map(grupo => ({\n      fecha: grupo.key,\n      ventas: grupo.items.length,\n      ingresos: grupo.items.sum('total')\n    }))\n    .sortBy('fecha');\n  \n  // Top categor\xedas\n  const productosCollection = new Collection(productos);\n  const topCategor\xedas = ventasCompletadas\n    .flatMap(v => v.productos.map(p => ({\n      productoId: p.productoId,\n      importe: p.cantidad * p.precioUnitario\n    })))\n    .map(item => {\n      const producto = productosCollection.find(p => p.id === item.productoId);\n      return {\n        categor\xeda: producto?.categor\xeda || 'Desconocida',\n        importe: item.importe\n      };\n    })\n    .groupBy('categor\xeda')\n    .map(grupo => ({\n      categor\xeda: grupo.key,\n      importe: grupo.items.sum('importe')\n    }))\n    .sortByDesc('importe')\n    .take(5);\n  \n  // Tasa de conversi\xf3n por segmento\n  const clientesCollection = new Collection(clientes);\n  const conversionPorSegmento = clientesCollection\n    .groupBy('segmento')\n    .map(grupo => {\n      const clientesIds = grupo.items.map(c => c.id);\n      const compras = ventasCompletadas.where(v => clientesIds.includes(v.clienteId));\n      const clientesCompraron = new Collection(compras.map(c => c.clienteId)).unique().length;\n      \n      return {\n        segmento: grupo.key,\n        total: grupo.items.length,\n        compraron: clientesCompraron,\n        tasa: (clientesCompraron / grupo.items.length) * 100\n      };\n    })\n    .sortByDesc('tasa');\n  \n  return {\n    per\xedodo: {\n      inicio: periodo.inicio,\n      fin: periodo.fin\n    },\n    general: {\n      ingresoTotal,\n      numeroVentas,\n      ticketMedio,\n      tasaCancelaci\xf3n\n    },\n    tendencias: {\n      ventasPorD\xeda,\n      topCategor\xedas,\n      conversionPorSegmento\n    }\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"beneficios-observados",children:"Beneficios observados"}),"\n",(0,t.jsx)(n.p,{children:"Al comparar ambos enfoques, podemos observar varias ventajas clave de utilizar Arcaelas Collection:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"C\xf3digo m\xe1s expresivo"}),": Las operaciones encadenadas comunican claramente el flujo de transformaci\xf3n de datos."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Menos c\xf3digo boilerplate"}),": No hay necesidad de crear colecciones temporales ni gestionar manualmente estructuras intermedias."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Mejor mantenibilidad"}),": La estructura declarativa es m\xe1s f\xe1cil de comprender y modificar."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Tipado fuerte"}),": TypeScript proporciona autocompletado y detecci\xf3n temprana de errores en toda la cadena."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rendimiento optimizado"}),": Las operaciones est\xe1n optimizadas para conjuntos de datos grandes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,t.jsx)(n.p,{children:"Este caso pr\xe1ctico demuestra c\xf3mo Arcaelas Collection puede transformar c\xf3digo complejo de an\xe1lisis de datos en c\xf3digo m\xe1s limpio, expresivo y mantenible. Al utilizar la API fluida y las capacidades de agregaci\xf3n, podemos:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reducir dr\xe1sticamente la cantidad de c\xf3digo necesario"}),"\n",(0,t.jsx)(n.li,{children:"Mejorar la legibilidad y mantenibilidad"}),"\n",(0,t.jsx)(n.li,{children:"Mantener el tipado fuerte en todas las operaciones"}),"\n",(0,t.jsx)(n.li,{children:"Obtener mejor rendimiento en conjuntos grandes de datos"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Para equipos que trabajan con an\xe1lisis de datos en TypeScript, Arcaelas Collection ofrece una alternativa potente a los m\xe9todos tradicionales, reduciendo la complejidad y el riesgo de errores."}),"\n",(0,t.jsx)(n.p,{children:"\xbfHas implementado an\xe1lisis de datos con otras librer\xedas? \xbfC\xf3mo se compara tu experiencia con la API de Arcaelas Collection? \xa1Comparte tus pensamientos en los comentarios!"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var a=o(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);