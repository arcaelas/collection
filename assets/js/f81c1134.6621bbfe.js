"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"novedades-roadmap","metadata":{"permalink":"/blog/novedades-roadmap","editUrl":"https://github.com/arcaelas/collection/blog/2024-05-15-novedades-roadmap.md","source":"@site/blog/2024-05-15-novedades-roadmap.md","title":"Novedades y hoja de ruta de Arcaelas Collection","description":"Con cada nueva versi\xf3n, Arcaelas Collection contin\xfaa evolucionando para ofrecer herramientas m\xe1s potentes y expresivas para la manipulaci\xf3n de datos. En este art\xedculo, exploramos las mejoras recientes y lo que nos depara el futuro.","date":"2024-05-15T00:00:00.000Z","tags":[{"inline":false,"label":"Colecci\xf3n","permalink":"/blog/tags/coleccion","description":"Funcionalidades del n\xfacleo de la librer\xeda Arcaelas Collection"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"},{"inline":false,"label":"Casos de Uso","permalink":"/blog/tags/casos-uso","description":"Ejemplos pr\xe1cticos de implementaci\xf3n de Arcaelas Collection"}],"readingTime":3.5,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"novedades-roadmap","title":"Novedades y hoja de ruta de Arcaelas Collection","authors":["miguel"],"tags":["coleccion","typescript","casos-uso"]},"unlisted":false,"nextItem":{"title":"Casos de uso avanzados con Arcaelas Collection","permalink":"/blog/casos-uso-avanzados"}},"content":"Con cada nueva versi\xf3n, Arcaelas Collection contin\xfaa evolucionando para ofrecer herramientas m\xe1s potentes y expresivas para la manipulaci\xf3n de datos. En este art\xedculo, exploramos las mejoras recientes y lo que nos depara el futuro.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Novedades en la versi\xf3n actual\\n\\nLa \xfaltima versi\xf3n de Arcaelas Collection incluye varias mejoras significativas:\\n\\n### 1. Rendimiento optimizado\\n\\nHemos mejorado significativamente el rendimiento de las operaciones sobre grandes colecciones de datos:\\n\\n- **Algoritmos optimizados**: Implementaci\xf3n de algoritmos m\xe1s eficientes para operaciones como `where()`, `filter()` y `sortBy()`.\\n- **Evaluaci\xf3n perezosa**: Las operaciones se ejecutan solo cuando es necesario, reduciendo el uso de memoria y CPU.\\n- **Memorizaci\xf3n interna**: Cach\xe9 autom\xe1tico de resultados para consultas repetidas con los mismos par\xe1metros.\\n\\n```typescript\\n// Las operaciones encadenadas ahora son hasta 2x m\xe1s r\xe1pidas\\nconst resultado = usuarios\\n  .where({ activo: true })\\n  .sortBy(\'ultimoAcceso\', \'desc\')\\n  .take(100);\\n```\\n\\n### 2. Nuevos operadores de consulta\\n\\nSe han agregado nuevos operadores para consultas m\xe1s expresivas:\\n\\n```typescript\\nimport { Collection, Operator } from \'@arcaelas/collection\';\\n\\nconst usuarios = new Collection([/* ... */]);\\n\\n// Nuevo operador LIKE para b\xfasqueda con patrones\\nconst resultados = usuarios.where({\\n  email: { [Operator.LIKE]: \'%@gmail.com\' }\\n});\\n\\n// Nuevo operador DATE_BETWEEN para rangos de fechas\\nconst actividadReciente = registros.where({\\n  fecha: { [Operator.DATE_BETWEEN]: [\'2024-01-01\', \'2024-05-01\'] }\\n});\\n```\\n\\n### 3. Integraci\xf3n con TypeScript mejorada\\n\\nMejoramos significativamente el soporte para tipos gen\xe9ricos y la inferencia de tipos:\\n\\n```typescript\\n// Mejor inferencia de tipos en los resultados de las operaciones\\nconst usuarios: Collection<Usuario> = new Collection<Usuario>([/* ... */]);\\n\\n// TypeScript ahora infiere correctamente que esto es Collection<string>\\nconst correos = usuarios.pluck(\'email\');\\n\\n// Y esto es Collection<{nombre: string, email: string}>\\nconst datos = usuarios.pluck([\'nombre\', \'email\']);\\n```\\n\\n## Patrones avanzados de uso\\n\\n### Patr\xf3n observador con colecciones reactivas\\n\\n```typescript\\nimport { Collection } from \'@arcaelas/collection\';\\n\\nclass UsuariosStore {\\n  private usuarios = new Collection([/* datos iniciales */]);\\n  private observadores: Function[] = [];\\n  \\n  // Suscribirse a cambios\\n  subscribe(callback: Function) {\\n    this.observadores.push(callback);\\n    return () => {\\n      this.observadores = this.observadores.filter(cb => cb !== callback);\\n    };\\n  }\\n  \\n  // Notificar cambios\\n  private notificar() {\\n    this.observadores.forEach(callback => callback(this.usuarios));\\n  }\\n  \\n  // M\xe9todos para modificar datos\\n  agregarUsuario(usuario) {\\n    this.usuarios.push(usuario);\\n    this.notificar();\\n  }\\n  \\n  actualizarUsuario(id, datos) {\\n    this.usuarios = this.usuarios.map(u => \\n      u.id === id ? { ...u, ...datos } : u\\n    );\\n    this.notificar();\\n  }\\n  \\n  eliminarUsuario(id) {\\n    this.usuarios = this.usuarios.filter(u => u.id !== id);\\n    this.notificar();\\n  }\\n  \\n  // M\xe9todos para consultar datos\\n  getUsuarios(filtro = {}) {\\n    return this.usuarios.where(filtro);\\n  }\\n}\\n```\\n\\n### Composici\xf3n de consultas din\xe1micas\\n\\n```typescript\\nfunction construirConsulta(opciones) {\\n  // Comenzar con la colecci\xf3n completa\\n  let consulta = productos;\\n  \\n  // Aplicar filtros condicionales\\n  if (opciones.categoria) {\\n    consulta = consulta.where({ categoria: opciones.categoria });\\n  }\\n  \\n  if (opciones.precioMin || opciones.precioMax) {\\n    consulta = consulta.where(item => {\\n      const cumpleMin = opciones.precioMin ? item.precio >= opciones.precioMin : true;\\n      const cumpleMax = opciones.precioMax ? item.precio <= opciones.precioMax : true;\\n      return cumpleMin && cumpleMax;\\n    });\\n  }\\n  \\n  if (opciones.busqueda) {\\n    const termino = opciones.busqueda.toLowerCase();\\n    consulta = consulta.where(item => \\n      item.nombre.toLowerCase().includes(termino) || \\n      item.descripcion.toLowerCase().includes(termino)\\n    );\\n  }\\n  \\n  // Aplicar ordenamiento\\n  if (opciones.ordenarPor) {\\n    consulta = consulta.sortBy(opciones.ordenarPor, opciones.ordenDireccion || \'asc\');\\n  }\\n  \\n  // Aplicar paginaci\xf3n\\n  const pagina = opciones.pagina || 1;\\n  const porPagina = opciones.porPagina || 10;\\n  consulta = consulta.skip((pagina - 1) * porPagina).take(porPagina);\\n  \\n  return consulta;\\n}\\n```\\n\\n## Hoja de ruta: Lo que viene en futuras versiones\\n\\nEstamos trabajando en varias caracter\xedsticas emocionantes para futuras versiones:\\n\\n### 1. Soporte para operaciones as\xedncronas\\n\\nPr\xf3ximamente se incluir\xe1 soporte nativo para manejar promesas y operaciones as\xedncronas:\\n\\n```typescript\\n// Futuro API para operaciones as\xedncronas\\nconst resultados = await usuariosCollection\\n  .whereAsync(async usuario => {\\n    const permisos = await verificarPermisos(usuario.id);\\n    return permisos.includes(\'admin\');\\n  })\\n  .mapAsync(async usuario => {\\n    const estadisticas = await obtenerEstadisticas(usuario.id);\\n    return { ...usuario, estadisticas };\\n  });\\n```\\n\\n### 2. Integraci\xf3n con frameworks reactivos\\n\\nTrabajamos en adaptadores espec\xedficos para React, Vue y Angular:\\n\\n```typescript\\n// React Hook (pr\xf3ximamente)\\nfunction useCollection(initialData) {\\n  const [collection, setCollection] = useState(new Collection(initialData));\\n  \\n  // M\xe9todos que mantienen la reactividad\\n  const updateCollection = useCallback((updater) => {\\n    setCollection(prev => updater(prev));\\n  }, []);\\n  \\n  return [collection, updateCollection];\\n}\\n```\\n\\n### 3. Persistencia y sincronizaci\xf3n\\n\\nSe est\xe1 desarrollando un sistema para persistencia y sincronizaci\xf3n con almacenamiento local o remoto:\\n\\n```typescript\\n// Caracter\xedstica en desarrollo\\nconst usuariosPersistentes = new PersistentCollection(\'usuarios\', {\\n  storage: localStorage, // O IndexedDB, o una API remota\\n  syncInterval: 60000 // Sincronizar cada minuto\\n});\\n\\n// Los cambios se sincronizan autom\xe1ticamente\\nusuariosPersistentes.push(nuevoUsuario);\\n```\\n\\n## C\xf3mo contribuir\\n\\nArcaelas Collection es un proyecto de c\xf3digo abierto y damos la bienvenida a contribuciones. Si tienes ideas para mejorar la librer\xeda o has encontrado errores:\\n\\n1. Visita nuestro [repositorio en GitHub](https://github.com/arcaelas/collection)\\n2. Revisa los [issues abiertos](https://github.com/arcaelas/collection/issues)\\n3. Sigue nuestra gu\xeda de contribuci\xf3n para enviar pull requests\\n\\n## Conclusi\xf3n\\n\\nArcaelas Collection contin\xfaa evolucionando para ofrecer una experiencia m\xe1s potente, expresiva y eficiente para la manipulaci\xf3n de colecciones de datos. Con cada actualizaci\xf3n, nos acercamos m\xe1s a nuestra visi\xf3n de proporcionar la mejor librer\xeda de manipulaci\xf3n de colecciones para JavaScript y TypeScript.\\n\\n\xa1Mantente atento a nuestras pr\xf3ximas actualizaciones y no dudes en compartir tus casos de uso y sugerencias para mejorar la librer\xeda!"},{"id":"casos-uso-avanzados","metadata":{"permalink":"/blog/casos-uso-avanzados","editUrl":"https://github.com/arcaelas/collection/blog/2024-01-10-casos-uso-avanzados.md","source":"@site/blog/2024-01-10-casos-uso-avanzados.md","title":"Casos de uso avanzados con Arcaelas Collection","description":"Arcaelas Collection brilla especialmente cuando se enfrenta a escenarios complejos de manipulaci\xf3n de datos. En este art\xedculo, exploraremos algunos casos de uso avanzados que demuestran la potencia y flexibilidad de la librer\xeda.","date":"2024-01-10T00:00:00.000Z","tags":[{"inline":false,"label":"Colecci\xf3n","permalink":"/blog/tags/coleccion","description":"Funcionalidades del n\xfacleo de la librer\xeda Arcaelas Collection"},{"inline":false,"label":"Casos de Uso","permalink":"/blog/tags/casos-uso","description":"Ejemplos pr\xe1cticos de implementaci\xf3n de Arcaelas Collection"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"}],"readingTime":3.63,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"casos-uso-avanzados","title":"Casos de uso avanzados con Arcaelas Collection","authors":["miguel"],"tags":["coleccion","casos-uso","typescript"]},"unlisted":false,"prevItem":{"title":"Novedades y hoja de ruta de Arcaelas Collection","permalink":"/blog/novedades-roadmap"},"nextItem":{"title":"Transformaci\xf3n y mapeo de datos con Arcaelas Collection","permalink":"/blog/transformacion-mapeo-datos"}},"content":"Arcaelas Collection brilla especialmente cuando se enfrenta a escenarios complejos de manipulaci\xf3n de datos. En este art\xedculo, exploraremos algunos casos de uso avanzados que demuestran la potencia y flexibilidad de la librer\xeda.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Caso 1: An\xe1lisis de datos con operaciones encadenadas\\n\\nUn escenario com\xfan en aplicaciones modernas es el an\xe1lisis de datos con m\xfaltiples operaciones encadenadas:\\n\\n```typescript\\nimport { Collection } from \'@arcaelas/collection\';\\n\\n// Conjunto de datos de ventas mensuales\\nconst ventas = new Collection([\\n  { fecha: \'2023-01-15\', producto: \'Laptop\', cantidad: 5, precio_unitario: 1200, cliente_id: 101 },\\n  { fecha: \'2023-01-20\', producto: \'Monitor\', cantidad: 10, precio_unitario: 300, cliente_id: 102 },\\n  { fecha: \'2023-01-25\', producto: \'Teclado\', cantidad: 20, precio_unitario: 50, cliente_id: 103 },\\n  { fecha: \'2023-02-05\', producto: \'Laptop\', cantidad: 3, precio_unitario: 1200, cliente_id: 104 },\\n  { fecha: \'2023-02-15\', producto: \'Mouse\', cantidad: 30, precio_unitario: 25, cliente_id: 101 },\\n  { fecha: \'2023-02-28\', producto: \'Monitor\', cantidad: 8, precio_unitario: 300, cliente_id: 105 }\\n]);\\n\\n// An\xe1lisis: Total de ventas por producto, ordenado de mayor a menor\\nconst analisis_ventas = ventas\\n  .map(item => ({\\n    ...item, \\n    total: item.cantidad * item.precio_unitario\\n  }))\\n  .groupBy(\'producto\')\\n  .map((grupo, producto) => ({\\n    producto,\\n    unidades_vendidas: grupo.sum(\'cantidad\'),\\n    total_ventas: grupo.sum(\'total\'),\\n    ticket_promedio: grupo.average(\'total\')\\n  }))\\n  .sortBy(\'total_ventas\', \'desc\');\\n\\nconsole.log(analisis_ventas.toArray());\\n// [\\n//   { producto: \'Laptop\', unidades_vendidas: 8, total_ventas: 9600, ticket_promedio: 4800 },\\n//   { producto: \'Monitor\', unidades_vendidas: 18, total_ventas: 5400, ticket_promedio: 2700 },\\n//   ...\\n// ]\\n```\\n\\n## Caso 2: Gesti\xf3n de relaciones entre entidades\\n\\nArcaelas Collection facilita el trabajo con datos relacionados, simulando operaciones similares a las de bases de datos relacionales:\\n\\n```typescript\\n// Colecciones de datos relacionados\\nconst usuarios = new Collection([\\n  { id: 1, nombre: \'Ana Mart\xednez\', email: \'ana@ejemplo.com\' },\\n  { id: 2, nombre: \'Carlos Rodr\xedguez\', email: \'carlos@ejemplo.com\' },\\n  { id: 3, nombre: \'Elena L\xf3pez\', email: \'elena@ejemplo.com\' }\\n]);\\n\\nconst pedidos = new Collection([\\n  { id: 101, usuario_id: 1, fecha: \'2023-11-10\', total: 1250 },\\n  { id: 102, usuario_id: 2, fecha: \'2023-11-12\', total: 340 },\\n  { id: 103, usuario_id: 1, fecha: \'2023-11-15\', total: 890 },\\n  { id: 104, usuario_id: 3, fecha: \'2023-11-18\', total: 1600 }\\n]);\\n\\n// Unir datos (similar a JOIN en SQL)\\nconst pedidos_con_usuario = pedidos.map(pedido => {\\n  const usuario = usuarios.first(u => u.id === pedido.usuario_id);\\n  return {\\n    ...pedido,\\n    usuario: usuario ? { nombre: usuario.nombre, email: usuario.email } : null\\n  };\\n});\\n\\n// Estad\xedsticas por usuario\\nconst estadisticas_usuario = usuarios.map(usuario => {\\n  const pedidos_usuario = pedidos.where({ usuario_id: usuario.id });\\n  \\n  return {\\n    id: usuario.id,\\n    nombre: usuario.nombre,\\n    cantidad_pedidos: pedidos_usuario.length,\\n    total_gastado: pedidos_usuario.sum(\'total\'),\\n    pedido_promedio: pedidos_usuario.average(\'total\')\\n  };\\n});\\n```\\n\\n## Caso 3: Implementaci\xf3n de cach\xe9 y memoizaci\xf3n\\n\\nArcaelas Collection tambi\xe9n puede utilizarse para implementar estrategias de cach\xe9 eficientes:\\n\\n```typescript\\n// Cach\xe9 de resultados de consultas API\\nclass APICache {\\n  private cache = new Collection();\\n  \\n  async fetchWithCache(endpoint, params = {}) {\\n    const cacheKey = JSON.stringify({ endpoint, params });\\n    \\n    // Buscar en cach\xe9 primero\\n    const cached = this.cache.first(item => item.key === cacheKey);\\n    \\n    if (cached && Date.now() - cached.timestamp < 300000) { // Cach\xe9 v\xe1lida por 5 minutos\\n      console.log(\'Usando resultado en cach\xe9\');\\n      return cached.data;\\n    }\\n    \\n    // Si no est\xe1 en cach\xe9 o expir\xf3, hacer la petici\xf3n\\n    console.log(\'Obteniendo datos frescos\');\\n    try {\\n      const response = await fetch(`https://api.ejemplo.com/${endpoint}`, { \\n        method: \'POST\',\\n        body: JSON.stringify(params)\\n      });\\n      const data = await response.json();\\n      \\n      // Guardar en cach\xe9\\n      this.cache = this.cache\\n        .filter(item => item.key !== cacheKey) // Eliminar entrada anterior si existe\\n        .push({\\n          key: cacheKey,\\n          data,\\n          timestamp: Date.now()\\n        });\\n      \\n      // Limpiar cach\xe9 antiguo (mantener solo los \xfaltimos 50 items)\\n      if (this.cache.length > 50) {\\n        this.cache = this.cache\\n          .sortBy(\'timestamp\', \'desc\')\\n          .take(50);\\n      }\\n      \\n      return data;\\n    } catch (error) {\\n      console.error(\'Error al obtener datos:\', error);\\n      throw error;\\n    }\\n  }\\n}\\n```\\n\\n## Caso 4: Procesamiento de datos en tiempo real\\n\\nPara aplicaciones que manejan flujos de datos en tiempo real, Arcaelas Collection ofrece una forma elegante de procesar y analizar estos datos:\\n\\n```typescript\\n// Simulaci\xf3n de procesamiento de eventos en tiempo real\\nclass EventProcessor {\\n  private events = new Collection();\\n  private alertThreshold = 5;\\n  \\n  // M\xe9todo llamado cada vez que llega un nuevo evento\\n  processEvent(event) {\\n    // A\xf1adir timestamp al evento si no lo tiene\\n    const eventWithTimestamp = {\\n      ...event,\\n      processed_at: Date.now()\\n    };\\n    \\n    // A\xf1adir a la colecci\xf3n de eventos\\n    this.events.push(eventWithTimestamp);\\n    \\n    // Mantener solo los \xfaltimos 1000 eventos\\n    if (this.events.length > 1000) {\\n      this.events = this.events.sortBy(\'processed_at\', \'desc\').take(1000);\\n    }\\n    \\n    // Detectar patrones en los \xfaltimos 5 minutos\\n    const recientEvents = this.events.where(e => \\n      e.processed_at > Date.now() - 300000\\n    );\\n    \\n    // Analizar eventos por tipo\\n    const eventsByType = recientEvents.groupBy(\'type\');\\n    \\n    // Detectar anomal\xedas (muchos eventos de error en poco tiempo)\\n    if (eventsByType.error && eventsByType.error.length >= this.alertThreshold) {\\n      this.triggerAlert({\\n        type: \'error_spike\',\\n        count: eventsByType.error.length,\\n        message: `Se detectaron ${eventsByType.error.length} errores en los \xfaltimos 5 minutos`\\n      });\\n    }\\n    \\n    return eventWithTimestamp;\\n  }\\n  \\n  triggerAlert(alert) {\\n    console.log(\'\ud83d\udea8 ALERTA:\', alert.message);\\n    // Aqu\xed ir\xedan las acciones para notificar la alerta\\n  }\\n}\\n```\\n\\n## Conclusi\xf3n\\n\\nLos casos de uso presentados demuestran la versatilidad y potencia de Arcaelas Collection para escenarios complejos de manejo de datos. La combinaci\xf3n de operaciones encadenables, m\xe9todos expresivos y alto rendimiento hace que sea una herramienta valiosa para el desarrollo de aplicaciones modernas que requieren manipulaci\xf3n intensiva de datos.\\n\\nEn futuros art\xedculos exploraremos m\xe1s patrones avanzados y t\xe9cnicas de optimizaci\xf3n con Arcaelas Collection."},{"id":"transformacion-mapeo-datos","metadata":{"permalink":"/blog/transformacion-mapeo-datos","editUrl":"https://github.com/arcaelas/collection/blog/2023-10-20-transformacion-mapeo-datos.md","source":"@site/blog/2023-10-20-transformacion-mapeo-datos.md","title":"Transformaci\xf3n y mapeo de datos con Arcaelas Collection","description":"Despu\xe9s de filtrar y buscar elementos en una colecci\xf3n, el siguiente paso com\xfan es transformar o mapear esos datos para adaptarlos a las necesidades espec\xedficas de tu aplicaci\xf3n. Arcaelas Collection ofrece m\xe9todos potentes que simplifican estas operaciones.","date":"2023-10-20T00:00:00.000Z","tags":[{"inline":true,"label":"colecci\xf3n","permalink":"/blog/tags/coleccion"},{"inline":true,"label":"transformaci\xf3n","permalink":"/blog/tags/transformacion"},{"inline":true,"label":"mapeo","permalink":"/blog/tags/mapeo"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"}],"readingTime":2.21,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"transformacion-mapeo-datos","title":"Transformaci\xf3n y mapeo de datos con Arcaelas Collection","authors":["miguel"],"tags":["colecci\xf3n","transformaci\xf3n","mapeo","typescript"]},"unlisted":false,"prevItem":{"title":"Casos de uso avanzados con Arcaelas Collection","permalink":"/blog/casos-uso-avanzados"},"nextItem":{"title":"Filtrado y b\xfasqueda avanzada con Arcaelas Collection","permalink":"/blog/filtrado-busqueda-avanzada"}},"content":"Despu\xe9s de filtrar y buscar elementos en una colecci\xf3n, el siguiente paso com\xfan es transformar o mapear esos datos para adaptarlos a las necesidades espec\xedficas de tu aplicaci\xf3n. Arcaelas Collection ofrece m\xe9todos potentes que simplifican estas operaciones.\\n\\n\x3c!-- truncate --\x3e\\n\\n## M\xe9todos de transformaci\xf3n\\n\\nArcaelas Collection proporciona varios m\xe9todos para transformar datos de manera eficiente:\\n\\n### El m\xe9todo `map()`\\n\\nSimilar al m\xe9todo nativo de JavaScript pero con mejoras, permite transformar cada elemento de la colecci\xf3n:\\n\\n```typescript\\nimport { Collection } from \'@arcaelas/collection\';\\n\\nconst productos = new Collection([\\n  { id: 1, nombre: \'Laptop\', precio: 1200 },\\n  { id: 2, nombre: \'Tel\xe9fono\', precio: 800 },\\n  { id: 3, nombre: \'Mesa\', precio: 350 }\\n]);\\n\\n// Aplicar descuento del 10%\\nconst con_descuento = productos.map(item => ({\\n  ...item,\\n  precio_original: item.precio,\\n  precio: Math.round(item.precio * 0.9),\\n  descuento: \'10%\'\\n}));\\n\\nconsole.log(con_descuento[0]);\\n// { id: 1, nombre: \'Laptop\', precio_original: 1200, precio: 1080, descuento: \'10%\' }\\n```\\n\\n### El m\xe9todo `pluck()`\\n\\nExtrae valores espec\xedficos de cada elemento para crear un nuevo array:\\n\\n```typescript\\n// Obtener solo los nombres de los productos\\nconst nombres = productos.pluck(\'nombre\');\\n// [\'Laptop\', \'Tel\xe9fono\', \'Mesa\']\\n\\n// Obtener m\xfaltiples propiedades como objetos\\nconst resumidos = productos.pluck([\'id\', \'nombre\']);\\n// [{ id: 1, nombre: \'Laptop\' }, ...]\\n```\\n\\n### Agrupaci\xf3n con `groupBy()`\\n\\nOrganiza elementos en grupos basados en una propiedad o funci\xf3n:\\n\\n```typescript\\nconst usuarios = new Collection([\\n  { id: 1, nombre: \'Ana\', rol: \'admin\' },\\n  { id: 2, nombre: \'Carlos\', rol: \'usuario\' },\\n  { id: 3, nombre: \'Elena\', rol: \'admin\' },\\n  { id: 4, nombre: \'David\', rol: \'usuario\' }\\n]);\\n\\nconst por_rol = usuarios.groupBy(\'rol\');\\n// {\\n//   admin: [{ id: 1, ... }, { id: 3, ... }],\\n//   usuario: [{ id: 2, ... }, { id: 4, ... }]\\n// }\\n```\\n\\n## Transformaciones encadenadas\\n\\nUna de las ventajas m\xe1s importantes de Arcaelas Collection es la capacidad de encadenar transformaciones para crear flujos de procesamiento de datos complejos y expresivos:\\n\\n```typescript\\nconst resultado = productos\\n  .where(item => item.precio > 500) // Filtrar productos caros\\n  .map(item => ({                    // Aplicar descuento\\n    ...item,\\n    precio: Math.round(item.precio * 0.9),\\n  }))\\n  .sortBy(\'precio\')                  // Ordenar por precio\\n  .pluck([\'nombre\', \'precio\']);      // Extraer solo nombre y precio\\n```\\n\\n## Transformaciones avanzadas\\n\\n### Aplanar colecciones anidadas con `flatten()`\\n\\nSi tienes colecciones dentro de colecciones, puedes aplanarlas f\xe1cilmente:\\n\\n```typescript\\nconst departamentos = new Collection([\\n  { nombre: \'Ventas\', empleados: [{ id: 1, nombre: \'Ana\' }, { id: 2, nombre: \'Carlos\' }] },\\n  { nombre: \'IT\', empleados: [{ id: 3, nombre: \'Elena\' }, { id: 4, nombre: \'David\' }] }\\n]);\\n\\n// Extraer todos los empleados en una \xfanica colecci\xf3n plana\\nconst todos_empleados = departamentos\\n  .pluck(\'empleados\')\\n  .flatten();\\n```\\n\\n### Transformaci\xf3n condicional con `when()`\\n\\nAplica transformaciones solo si se cumple una condici\xf3n:\\n\\n```typescript\\nconst resultado = productos\\n  .when(\\n    condicion_externa, // Si esta condici\xf3n es true\\n    coleccion => coleccion.where({ disponible: true }), // Aplica este filtro\\n    coleccion => coleccion // Si no, devuelve la colecci\xf3n sin cambios\\n  );\\n```\\n\\n## Conclusi\xf3n\\n\\nLos m\xe9todos de transformaci\xf3n y mapeo de Arcaelas Collection permiten manipular datos de manera eficiente y expresiva, simplificando enormemente tareas comunes de procesamiento de datos. La capacidad de encadenar operaciones proporciona un flujo de trabajo fluido y mantenible.\\n\\nEn nuestro pr\xf3ximo art\xedculo, exploraremos t\xe9cnicas avanzadas para trabajar con relaciones y datos complejos usando Arcaelas Collection."},{"id":"filtrado-busqueda-avanzada","metadata":{"permalink":"/blog/filtrado-busqueda-avanzada","editUrl":"https://github.com/arcaelas/collection/blog/2023-08-15-filtrado-busqueda-avanzada.md","source":"@site/blog/2023-08-15-filtrado-busqueda-avanzada.md","title":"Filtrado y b\xfasqueda avanzada con Arcaelas Collection","description":"Una de las operaciones m\xe1s comunes al trabajar con colecciones de datos es filtrar y buscar elementos seg\xfan criterios espec\xedficos. Arcaelas Collection proporciona un potente sistema de filtrado que simplifica enormemente estas tareas.","date":"2023-08-15T00:00:00.000Z","tags":[{"inline":true,"label":"colecci\xf3n","permalink":"/blog/tags/coleccion"},{"inline":true,"label":"filtrado","permalink":"/blog/tags/filtrado"},{"inline":true,"label":"b\xfasqueda","permalink":"/blog/tags/busqueda"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"}],"readingTime":1.92,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"filtrado-busqueda-avanzada","title":"Filtrado y b\xfasqueda avanzada con Arcaelas Collection","authors":["miguel"],"tags":["colecci\xf3n","filtrado","b\xfasqueda","typescript"]},"unlisted":false,"prevItem":{"title":"Transformaci\xf3n y mapeo de datos con Arcaelas Collection","permalink":"/blog/transformacion-mapeo-datos"},"nextItem":{"title":"Introducci\xf3n a Arcaelas Collection","permalink":"/blog/introduccion-arcaelas-collection"}},"content":"Una de las operaciones m\xe1s comunes al trabajar con colecciones de datos es filtrar y buscar elementos seg\xfan criterios espec\xedficos. Arcaelas Collection proporciona un potente sistema de filtrado que simplifica enormemente estas tareas.\\n\\n\x3c!-- truncate --\x3e\\n\\n## M\xe9todos de filtrado en Arcaelas Collection\\n\\nLa librer\xeda ofrece varios m\xe9todos para filtrar y buscar elementos, cada uno con diferentes capacidades y casos de uso:\\n\\n### El m\xe9todo `where()`\\n\\nEste m\xe9todo es la base del sistema de filtrado y permite realizar consultas complejas con una sintaxis clara y expresiva:\\n\\n```typescript\\nimport { Collection } from \'@arcaelas/collection\';\\n\\nconst productos = new Collection([\\n  { id: 1, nombre: \'Laptop\', precio: 1200, disponible: true, categor\xeda: \'Electr\xf3nica\' },\\n  { id: 2, nombre: \'Tel\xe9fono\', precio: 800, disponible: true, categor\xeda: \'Electr\xf3nica\' },\\n  { id: 3, nombre: \'Mesa\', precio: 350, disponible: false, categor\xeda: \'Muebles\' },\\n  { id: 4, nombre: \'Silla\', precio: 150, disponible: true, categor\xeda: \'Muebles\' }\\n]);\\n\\n// Filtrar productos disponibles\\nconst disponibles = productos.where({ disponible: true });\\n\\n// Filtrar por precio mayor a 500\\nconst premium = productos.where(item => item.precio > 500);\\n\\n// Combinaci\xf3n de filtros\\nconst electr\xf3nicos_disponibles = productos\\n  .where({ categor\xeda: \'Electr\xf3nica\' })\\n  .where({ disponible: true });\\n```\\n\\n### Operadores de comparaci\xf3n\\n\\nArcaelas Collection soporta operadores avanzados para consultas m\xe1s expresivas:\\n\\n```typescript\\nimport { Collection, Operator } from \'@arcaelas/collection\';\\n\\n// Productos con precio entre 300 y 1000\\nconst rango_medio = productos.where({\\n  precio: { [Operator.BETWEEN]: [300, 1000] }\\n});\\n\\n// Productos que contienen \'o\' en el nombre\\nconst con_o = productos.where({\\n  nombre: { [Operator.CONTAINS]: \'o\' }\\n});\\n\\n// Productos con id en una lista espec\xedfica\\nconst lista_ids = productos.where({\\n  id: { [Operator.IN]: [1, 3] }\\n});\\n```\\n\\n### M\xe9todos de b\xfasqueda\\n\\nPara encontrar elementos espec\xedficos, Arcaelas Collection ofrece varios m\xe9todos \xfatiles:\\n\\n```typescript\\n// Encontrar el primer producto disponible\\nconst primer_disponible = productos.first(item => item.disponible);\\n\\n// Encontrar por ID\\nconst producto_id_2 = productos.find(item => item.id === 2);\\n\\n// Comprobar si existe alg\xfan producto de muebles\\nconst hay_muebles = productos.some(item => item.categor\xeda === \'Muebles\');\\n\\n// Comprobar si todos los productos cuestan m\xe1s de 100\\nconst todos_caros = productos.every(item => item.precio > 100);\\n```\\n\\n## Encadenamiento de operaciones\\n\\nUna de las grandes ventajas de Arcaelas Collection es la capacidad de encadenar operaciones para crear flujos de procesamiento de datos complejos:\\n\\n```typescript\\n// Filtrar, ordenar y limitar\\nconst top_electronica = productos\\n  .where({ categor\xeda: \'Electr\xf3nica\' })\\n  .where({ disponible: true })\\n  .sortBy(\'precio\', \'desc\')\\n  .take(2);\\n```\\n\\n## Rendimiento optimizado\\n\\nEl sistema de filtrado de Arcaelas Collection est\xe1 optimizado para manejar grandes colecciones de datos, implementando estrategias internas para minimizar el recorrido de elementos y maximizar la eficiencia de las consultas.\\n\\nEn nuestro pr\xf3ximo art\xedculo, exploraremos las capacidades de transformaci\xf3n y mapeo de datos que ofrece Arcaelas Collection para procesar y modificar colecciones."},{"id":"introduccion-arcaelas-collection","metadata":{"permalink":"/blog/introduccion-arcaelas-collection","editUrl":"https://github.com/arcaelas/collection/blog/2023-06-25-introduccion-arcaelas-collection.md","source":"@site/blog/2023-06-25-introduccion-arcaelas-collection.md","title":"Introducci\xf3n a Arcaelas Collection","description":"Arcaelas Collection es una librer\xeda TypeScript moderna para manipulaci\xf3n de colecciones de datos con una API fluida y expresiva, dise\xf1ada para ofrecer un manejo eficiente de datos en aplicaciones JavaScript/TypeScript.","date":"2023-06-25T00:00:00.000Z","tags":[{"inline":true,"label":"colecci\xf3n","permalink":"/blog/tags/coleccion"},{"inline":true,"label":"introducci\xf3n","permalink":"/blog/tags/introduccion"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"Art\xedculos sobre el uso de TypeScript con Arcaelas Collection"}],"readingTime":1.4,"hasTruncateMarker":true,"authors":[{"name":"Miguel Alejandro","title":"Desarrollador de Arcaelas Collection","url":"https://github.com/arcaelas","page":{"permalink":"/blog/authors/miguel"},"socials":{"github":"https://github.com/arcaelas"},"imageURL":"https://github.com/arcaelas.png","key":"miguel"}],"frontMatter":{"slug":"introduccion-arcaelas-collection","title":"Introducci\xf3n a Arcaelas Collection","authors":["miguel"],"tags":["colecci\xf3n","introducci\xf3n","typescript"]},"unlisted":false,"prevItem":{"title":"Filtrado y b\xfasqueda avanzada con Arcaelas Collection","permalink":"/blog/filtrado-busqueda-avanzada"}},"content":"Arcaelas Collection es una librer\xeda TypeScript moderna para manipulaci\xf3n de colecciones de datos con una API fluida y expresiva, dise\xf1ada para ofrecer un manejo eficiente de datos en aplicaciones JavaScript/TypeScript.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \xbfPor qu\xe9 Arcaelas Collection?\\n\\nTrabajar con colecciones de datos es una tarea com\xfan en el desarrollo de aplicaciones. Ya sea que est\xe9s filtrando registros de usuarios, transformando resultados de una API o manipulando estructuras de datos complejas, necesitas herramientas que simplifiquen estas operaciones.\\n\\nAunque JavaScript ofrece m\xe9todos nativos como `map`, `filter` y `reduce`, Arcaelas Collection proporciona una experiencia m\xe1s rica y fluida con operaciones encadenables, consultas avanzadas y tipado fuerte.\\n\\n## Caracter\xedsticas principales\\n\\n1. **API fluida y expresiva**: Encadena m\xfaltiples operaciones para transformaciones complejas.\\n2. **Tipado fuerte**: Desarrollada completamente en TypeScript para ofrecer autocompletado y detecci\xf3n temprana de errores.\\n3. **Rendimiento optimizado**: Dise\xf1ada para manejar grandes conjuntos de datos con eficiencia.\\n4. **Consultas avanzadas**: Filtra y busca datos con condiciones complejas usando un sistema de consultas intuitivo.\\n\\n## Instalaci\xf3n\\n\\n```bash\\nnpm install @arcaelas/collection\\n# o usando yarn\\nyarn add @arcaelas/collection\\n```\\n\\n## Ejemplo b\xe1sico\\n\\n```typescript\\nimport { Collection } from \'@arcaelas/collection\';\\n\\n// Crear una colecci\xf3n de usuarios\\nconst usuarios = new Collection([\\n  { id: 1, nombre: \'Ana\', edad: 28, activo: true },\\n  { id: 2, nombre: \'Carlos\', edad: 35, activo: false },\\n  { id: 3, nombre: \'Elena\', edad: 23, activo: true },\\n  { id: 4, nombre: \'David\', edad: 42, activo: true }\\n]);\\n\\n// Filtrar usuarios activos y menores de 30 a\xf1os\\nconst jovenes_activos = usuarios\\n  .where({ activo: true })\\n  .where(usuario => usuario.edad < 30)\\n  .sortBy(\'edad\');\\n\\nconsole.log(jovenes_activos);\\n// Output: [{ id: 3, nombre: \'Elena\'... }, { id: 1, nombre: \'Ana\'... }]\\n```\\n\\nEn pr\xf3ximos art\xedculos exploraremos m\xe1s a fondo las capacidades de Arcaelas Collection y c\xf3mo puede ayudarte a escribir c\xf3digo m\xe1s limpio y mantenible para el manejo de datos."}]}}')}}]);