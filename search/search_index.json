{"config":{"lang":["en","es","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to @arcaelas/collection","text":"**A powerful TypeScript collection library with MongoDB-like query DSL**    [![npm version](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![License](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![GitHub stars](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"#overview","title":"Overview","text":"<p><code>@arcaelas/collection</code> is a comprehensive utility library that extends native JavaScript arrays with powerful filtering, querying, and transformation capabilities. Inspired by Laravel's Collections and MongoDB's query language, it provides an elegant and type-safe API for working with data collections.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>MongoDB-like Query DSL - Intuitive query syntax with operators like <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code>, and more</li> <li>Type-Safe TypeScript - Full TypeScript support with generic types for autocompletion and type checking</li> <li>Rich API - Over 30 built-in methods for filtering, transforming, and aggregating data</li> <li>Method Chaining - Fluent interface for composing complex operations</li> <li>Extensible - Add custom methods with macros</li> <li>Zero Dependencies - Lightweight with minimal external dependencies</li> <li>Performance Optimized - Efficient query compilation and native array delegation</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>npm install @arcaelas/collection\n# or\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filter with MongoDB-like queries\nconst activeUsers = users.filter({ active: true });\n\n// Filter with query operators\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Chain methods\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"#why-arcaelascollection","title":"Why @arcaelas/collection?","text":""},{"location":"#problem","title":"Problem","text":"<p>Native JavaScript arrays have limited functionality for complex data operations:</p> <pre><code>// Native approach - verbose and error-prone\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"#solution","title":"Solution","text":"<p>Collection provides an elegant, chainable API:</p> <pre><code>// Collection approach - clean and expressive\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#query-operators","title":"Query Operators","text":"<p>Use MongoDB-style operators for powerful queries:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"#method-chaining","title":"Method Chaining","text":"<p>Compose complex operations with fluent syntax:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"#type-safety","title":"Type Safety","text":"<p>Leverage TypeScript for compile-time safety:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript knows the shape\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#data-filtering","title":"Data Filtering","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"#aggregation","title":"Aggregation","text":"<pre><code>const orders = new Collection(orderData);\n\nconst totalRevenue = orders.sum(\"total\");\nconst avgOrderValue = orders.sum(\"total\") / orders.length;\nconst ordersByStatus = orders.groupBy(\"status\");\n</code></pre>"},{"location":"#data-transformation","title":"Data Transformation","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li> <p> Getting Started</p> <p>Learn the basics and create your first collection</p> </li> <li> <p> Core Concepts</p> <p>Understand the fundamental principles and patterns</p> </li> <li> <p> Query Operators</p> <p>Master the MongoDB-like query syntax</p> </li> <li> <p> API Reference</p> <p>Explore all available methods and signatures</p> </li> <li> <p> Examples</p> <p>See practical examples and common patterns</p> </li> <li> <p> Advanced</p> <p>Performance tips and advanced techniques</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Report bugs or request features</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Built with \u2764\ufe0f by the Arcaelas Insiders team </p> <p>     Want to discuss any of our open source projects? Send us a message on     Twitter or sponsor us at     GitHub Sponsors.   </p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to <code>@arcaelas/collection</code> will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#212-2025-01-15","title":"[2.1.2] - 2025-01-15","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fixed TypeScript type inference for <code>every()</code> method overloads</li> <li>Corrected return type for <code>collect()</code> method to maintain generic types</li> <li>Fixed query validation for nested objects</li> </ul>"},{"location":"CHANGELOG/#improved","title":"Improved","text":"<ul> <li>Enhanced performance for <code>unique()</code> method with large datasets</li> <li>Optimized query compilation for repeated filter operations</li> <li>Better error messages for invalid operator usage</li> </ul>"},{"location":"CHANGELOG/#211-2024-12-20","title":"[2.1.1] - 2024-12-20","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>New <code>every()</code> method with multiple overload signatures</li> <li>Support for dot-notation in <code>where()</code> and <code>whereNot()</code> methods</li> <li>Enhanced <code>update()</code> method with callback support</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed <code>sort()</code> method handling of undefined values</li> <li>Corrected <code>paginate()</code> method edge cases</li> </ul>"},{"location":"CHANGELOG/#210-2024-11-10","title":"[2.1.0] - 2024-11-10","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>MongoDB-style query operators: <code>$eq</code>, <code>$not</code>, <code>$gt</code>, <code>$lt</code>, <code>$gte</code>, <code>$lte</code>, <code>$in</code>, <code>$includes</code></li> <li>Query operator aliases for convenience: <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>in</code>, <code>includes</code></li> <li>New <code>macro()</code> static and instance methods for extensibility</li> <li><code>stringify()</code> method for JSON serialization</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Improved TypeScript generic types for better type inference</li> <li>Refactored query engine for better performance</li> </ul>"},{"location":"CHANGELOG/#deprecated","title":"Deprecated","text":"<ul> <li>None</li> </ul>"},{"location":"CHANGELOG/#201-2024-10-01","title":"[2.0.1] - 2024-10-01","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed npm package build configuration</li> <li>Corrected TypeScript declaration exports</li> </ul>"},{"location":"CHANGELOG/#200-2024-09-15","title":"[2.0.0] - 2024-09-15","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Complete TypeScript rewrite</li> <li>Full generic type support: <code>Collection&lt;T, V&gt;</code></li> <li>New methods: <code>chunk()</code>, <code>countBy()</code>, <code>groupBy()</code>, <code>unique()</code></li> <li>Debug methods: <code>dd()</code> and <code>dump()</code></li> <li>Aggregation methods: <code>max()</code>, <code>min()</code>, <code>sum()</code></li> <li>Random methods: <code>random()</code> and <code>shuffle()</code></li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Breaking: Minimum Node.js version is now 14.x</li> <li>Breaking: ES2020 target for better performance</li> <li>Improved <code>filter()</code> to support both callbacks and query objects</li> <li>Enhanced <code>update()</code> with merge functionality</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Breaking: Removed deprecated <code>pluck()</code> method (use <code>map()</code> instead)</li> <li>Breaking: Removed legacy callback format</li> </ul>"},{"location":"CHANGELOG/#150-2024-06-01","title":"[1.5.0] - 2024-06-01","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li><code>where()</code> and <code>whereNot()</code> convenience methods</li> <li><code>not()</code> method for inverse filtering</li> <li><code>forget()</code> method to remove fields</li> <li><code>first()</code> and <code>last()</code> methods with query support</li> </ul>"},{"location":"CHANGELOG/#improved_1","title":"Improved","text":"<ul> <li>Better documentation with more examples</li> <li>Performance optimizations for large collections</li> </ul>"},{"location":"CHANGELOG/#140-2024-03-15","title":"[1.4.0] - 2024-03-15","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li><code>update()</code> method for bulk updates</li> <li><code>delete()</code> method for removing elements</li> <li><code>collect()</code> method to create new instances</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed collection mutation issues</li> <li>Corrected prototype chain for extended collections</li> </ul>"},{"location":"CHANGELOG/#130-2024-01-10","title":"[1.3.0] - 2024-01-10","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li><code>paginate()</code> method for pagination support</li> <li><code>each()</code> method with break support</li> </ul>"},{"location":"CHANGELOG/#improved_2","title":"Improved","text":"<ul> <li>Enhanced error handling</li> <li>Better TypeScript types</li> </ul>"},{"location":"CHANGELOG/#120-2023-11-01","title":"[1.2.0] - 2023-11-01","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Initial query DSL support</li> <li>Basic filtering with objects</li> </ul>"},{"location":"CHANGELOG/#110-2023-09-15","title":"[1.1.0] - 2023-09-15","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li><code>sort()</code> method with direction support</li> <li>Aggregation methods</li> </ul>"},{"location":"CHANGELOG/#100-2023-08-01","title":"[1.0.0] - 2023-08-01","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic Collection class extending Array</li> <li>Core filtering and transformation methods</li> </ul>"},{"location":"CHANGELOG/#version-support","title":"Version Support","text":"Version Status Node.js TypeScript 2.1.x Active 14+ 4.x+ 2.0.x Maintenance 14+ 4.x+ 1.x End of Life 12+ 3.x+"},{"location":"CHANGELOG/#migration-guides","title":"Migration Guides","text":""},{"location":"CHANGELOG/#migrating-from-1x-to-2x","title":"Migrating from 1.x to 2.x","text":"<p>Breaking Changes:</p> <ol> <li> <p>Minimum Node.js version increased to 14.x <pre><code>// Ensure you're using Node.js 14 or higher\nnode --version  // Should be v14.0.0 or higher\n</code></pre></p> </li> <li> <p>ES2020 target <pre><code>// Update your tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\"\n  }\n}\n</code></pre></p> </li> <li> <p>Removed <code>pluck()</code> method <pre><code>// Before (1.x)\ncollection.pluck('name');\n\n// After (2.x)\ncollection.map(item =&gt; item.name);\n</code></pre></p> </li> <li> <p>New generic type signatures <pre><code>// Before (1.x)\nconst collection = new Collection(items);\n\n// After (2.x) - with type safety\ninterface User {\n  name: string;\n  age: number;\n}\nconst collection = new Collection&lt;User&gt;(items);\n</code></pre></p> </li> </ol>"},{"location":"CHANGELOG/#upgrading-to-21x","title":"Upgrading to 2.1.x","text":"<p>New Features:</p> <ol> <li> <p>Query operators <pre><code>// New MongoDB-style operators\ncollection.filter({\n  age: { $gte: 18 },\n  status: { $in: ['active', 'pending'] }\n});\n</code></pre></p> </li> <li> <p>Method overloads <pre><code>// every() now supports multiple signatures\ncollection.every('active');\ncollection.every('age', '&gt;=', 18);\ncollection.every({ verified: true });\n</code></pre></p> </li> </ol>"},{"location":"CHANGELOG/#future-roadmap","title":"Future Roadmap","text":""},{"location":"CHANGELOG/#planned-for-220","title":"Planned for 2.2.0","text":"<ul> <li> LazyCollection with generator support</li> <li> AsyncCollection for promises and streams</li> <li> Additional query operators: <code>$regex</code>, <code>$exists</code>, <code>$size</code></li> <li> Performance improvements for large datasets</li> </ul>"},{"location":"CHANGELOG/#planned-for-300","title":"Planned for 3.0.0","text":"<ul> <li> Remove lodash dependency</li> <li> Native ES modules only</li> <li> Improved tree-shaking</li> <li> YAML/CSV serialization support</li> </ul>"},{"location":"CHANGELOG/#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"CHANGELOG/#support","title":"Support","text":"<ul> <li>Documentation: https://arcaelas.github.io/collection</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide will help you install and set up <code>@arcaelas/collection</code> in your project.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Node.js: 14.x or higher</li> <li>TypeScript: 4.x or higher (optional, for TypeScript projects)</li> <li>Package Manager: npm, yarn, or pnpm</li> </ul>"},{"location":"installation/#package-manager-installation","title":"Package Manager Installation","text":""},{"location":"installation/#using-npm","title":"Using npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"installation/#using-yarn","title":"Using yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"installation/#using-pnpm","title":"Using pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"installation/#import-methods","title":"Import Methods","text":""},{"location":"installation/#es-module-recommended","title":"ES Module (Recommended)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"installation/#named-import","title":"Named Import","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"installation/#commonjs","title":"CommonJS","text":"<pre><code>const Collection = require(\"@arcaelas/collection\");\n\nconst collection = new Collection([1, 2, 3]);\n</code></pre>"},{"location":"installation/#typescript-configuration","title":"TypeScript Configuration","text":"<p>If you're using TypeScript, ensure your <code>tsconfig.json</code> includes proper configuration:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test file to verify the installation:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Total:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"Max:\", numbers.max(\"value\")); // Works with objects\nconsole.log(\"First:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Filtered:\", filtered); // [3, 4, 5]\n</code></pre> <p>Run the test:</p> <pre><code># If using TypeScript\nnpx ts-node test-collection.ts\n\n# If using JavaScript\nnode test-collection.js\n</code></pre>"},{"location":"installation/#bundle-size","title":"Bundle Size","text":"<p>The library is lightweight and tree-shakeable:</p> <ul> <li>Minified: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"installation/#browser-compatibility","title":"Browser Compatibility","text":"<p><code>@arcaelas/collection</code> works in all modern browsers that support ES2020:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>For older browsers, use a transpiler like Babel.</p>"},{"location":"installation/#cdn-usage","title":"CDN Usage","text":"<p>You can also use the library directly from a CDN:</p>"},{"location":"installation/#unpkg","title":"unpkg","text":"<pre><code>&lt;script type=\"module\"&gt;\n  import Collection from \"https://unpkg.com/@arcaelas/collection@latest/build/index.js\";\n\n  const collection = new Collection([1, 2, 3]);\n  console.log(collection.sum(n =&gt; n));\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#jsdelivr","title":"jsDelivr","text":"<pre><code>&lt;script type=\"module\"&gt;\n  import Collection from \"https://cdn.jsdelivr.net/npm/@arcaelas/collection@latest/build/index.js\";\n\n  const collection = new Collection([1, 2, 3]);\n  console.log(collection.first());\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute or work on the library itself:</p> <pre><code># Clone the repository\ngit clone https://github.com/arcaelas/collection.git\ncd collection\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run tests\nnpm test\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#module-not-found-error","title":"Module Not Found Error","text":"<p>If you encounter module resolution issues:</p> <pre><code>Error: Cannot find module '@arcaelas/collection'\n</code></pre> <p>Solutions:</p> <ol> <li> <p>Clear your package manager cache:    <pre><code>npm cache clean --force\n# or\nyarn cache clean\n</code></pre></p> </li> <li> <p>Delete <code>node_modules</code> and reinstall:    <pre><code>rm -rf node_modules package-lock.json\nnpm install\n</code></pre></p> </li> <li> <p>Check your <code>package.json</code> to ensure the package is listed in <code>dependencies</code>.</p> </li> </ol>"},{"location":"installation/#typescript-declaration-errors","title":"TypeScript Declaration Errors","text":"<p>If TypeScript can't find type declarations:</p> <pre><code>Could not find a declaration file for module '@arcaelas/collection'\n</code></pre> <p>Solutions:</p> <ol> <li> <p>The library includes TypeScript declarations. Ensure you're using TypeScript 4.x or higher.</p> </li> <li> <p>Check your <code>tsconfig.json</code> includes:    <pre><code>{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"installation/#importexport-syntax-errors","title":"Import/Export Syntax Errors","text":"<p>If you see syntax errors related to imports:</p> <p>Solutions:</p> <ol> <li> <p>Ensure your Node.js version supports ES modules (14.x+)</p> </li> <li> <p>Add <code>\"type\": \"module\"</code> to your <code>package.json</code> for ES modules:    <pre><code>{\n  \"type\": \"module\"\n}\n</code></pre></p> </li> <li> <p>Or use <code>.mjs</code> extension for module files</p> </li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have <code>@arcaelas/collection</code> installed, you can:</p> <ul> <li>Read the Getting Started guide</li> <li>Explore Core Concepts</li> <li>Check out Examples</li> <li>Browse the API Reference</li> </ul>"},{"location":"installation/#support","title":"Support","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Check the GitHub Issues</li> <li>Ask for help in Discussions</li> <li>Contact us at community@arcaelas.com</li> </ul>"},{"location":"advanced/extending-collection/","title":"Extending Collection","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"advanced/extending-collection/#creating-subclasses","title":"Creating Subclasses","text":""},{"location":"advanced/extending-collection/#adding-macros","title":"Adding Macros","text":""},{"location":"advanced/extending-collection/#custom-operators","title":"Custom Operators","text":""},{"location":"advanced/extending-collection/#plugin-architecture","title":"Plugin Architecture","text":"<pre><code>class UserCollection extends Collection&lt;User&gt; {\n  admins() {\n    return this.filter({ role: 'admin' });\n  }\n}\n</code></pre>"},{"location":"advanced/performance/","title":"Performance","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"advanced/performance/#query-compilation","title":"Query Compilation","text":""},{"location":"advanced/performance/#large-datasets","title":"Large Datasets","text":""},{"location":"advanced/performance/#memory-management","title":"Memory Management","text":""},{"location":"advanced/performance/#benchmarks","title":"Benchmarks","text":"<pre><code>// Optimize repeated queries\nconst activeQuery = { active: true };\nconst result = collection.filter(activeQuery);\n</code></pre>"},{"location":"advanced/typescript-usage/","title":"TypeScript Usage","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"advanced/typescript-usage/#generic-types","title":"Generic Types","text":""},{"location":"advanced/typescript-usage/#type-inference","title":"Type Inference","text":""},{"location":"advanced/typescript-usage/#custom-validators","title":"Custom Validators","text":""},{"location":"advanced/typescript-usage/#type-guards","title":"Type Guards","text":"<pre><code>interface User {\n  id: number;\n  name: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n</code></pre>"},{"location":"api/aggregation-methods/","title":"Aggregation Methods","text":""},{"location":"api/aggregation-methods/#sum","title":"sum()","text":""},{"location":"api/aggregation-methods/#max","title":"max()","text":""},{"location":"api/aggregation-methods/#min","title":"min()","text":""},{"location":"api/aggregation-methods/#countby","title":"countBy()","text":""},{"location":"api/aggregation-methods/#groupby","title":"groupBy()","text":"<p>Detailed API reference with type signatures.</p>"},{"location":"api/async-collection-class/","title":"AsyncCollection Class","text":"<p>Complete API reference for the AsyncCollection class - a deferred query builder for creating abstractions over any data source.</p>"},{"location":"api/async-collection-class/#import","title":"Import","text":"<pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n</code></pre>"},{"location":"api/async-collection-class/#constructor","title":"Constructor","text":""},{"location":"api/async-collection-class/#new-asynccollectiont-vexecutor-validators","title":"<code>new AsyncCollection&lt;T, V&gt;(executor, validators?)</code>","text":"<p>Creates a new AsyncCollection instance with a custom executor function.</p> <p>Type Parameters:</p> <ul> <li><code>T</code> - Type of elements in the collection</li> <li><code>V</code> - Type of custom validators (optional)</li> </ul> <p>Parameters:</p> Parameter Type Required Description <code>executor</code> <code>Executor&lt;T, V&gt;</code> Yes Function that processes operations and returns results <code>validators</code> <code>V</code> No Custom validators for extending query operators <p>Example:</p> <pre><code>const users = new AsyncCollection&lt;User&gt;(\n  async ({ operations, validators, metadata }) =&gt; {\n    console.log(`Processing ${metadata.operation_count} operations`);\n    return await processOperations(operations);\n  }\n);\n</code></pre>"},{"location":"api/async-collection-class/#type-definitions","title":"Type Definitions","text":""},{"location":"api/async-collection-class/#executort-v","title":"<code>Executor&lt;T, V&gt;</code>","text":"<p>Function type for the executor that processes the context.</p> <pre><code>type Executor&lt;T = any, V = any&gt; = (\n  context: ExecutorContext&lt;T, V&gt;\n) =&gt; T | T[] | Promise&lt;T | T[]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>context</code> - ExecutorContext containing operations, validators, and metadata</li> </ul> <p>Returns:</p> <ul> <li>Single item <code>T</code>, array of items <code>T[]</code>, or Promise of either</li> </ul>"},{"location":"api/async-collection-class/#executorcontextt-v","title":"<code>ExecutorContext&lt;T, V&gt;</code>","text":"<p>Context object passed to the executor function.</p> <pre><code>interface ExecutorContext&lt;T = any, V = any&gt; {\n  operations: [string, ...any[]][];\n  validators?: V;\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre> <p>Properties:</p> Property Type Description <code>operations</code> <code>[string, ...any[]][]</code> Array of registered operations in format <code>[method_name, ...args]</code> <code>validators</code> <code>V</code> Custom validators provided in constructor <code>metadata.created_at</code> <code>Date</code> Timestamp when context was created <code>metadata.operation_count</code> <code>Number</code> Total number of registered operations <code>metadata.chain_depth</code> <code>Number</code> Depth of method chain (same as operation_count)"},{"location":"api/async-collection-class/#thenable-implementation","title":"Thenable Implementation","text":"<p>AsyncCollection implements the Thenable interface, making it awaitable.</p>"},{"location":"api/async-collection-class/#thenonfulfilled-onrejected","title":"<code>then(onfulfilled?, onrejected?)</code>","text":"<p>Implements Promise.then() for async execution.</p> <p>Parameters:</p> Parameter Type Description <code>onfulfilled</code> <code>(value: any) =&gt; TResult1</code> Optional callback when resolved <code>onrejected</code> <code>(reason: any) =&gt; TResult2</code> Optional callback when rejected <p>Returns: <code>Promise&lt;TResult1 | TResult2&gt;</code></p> <p>Example:</p> <pre><code>users\n  .where('active', true)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n\n// Or with await\nconst results = await users.where('active', true);\n</code></pre>"},{"location":"api/async-collection-class/#catchonrejected","title":"<code>catch(onrejected?)</code>","text":"<p>Implements Promise.catch() for error handling.</p> <p>Parameters:</p> Parameter Type Description <code>onrejected</code> <code>(reason: any) =&gt; TResult</code> Optional error handler <p>Returns: <code>Promise&lt;TResult&gt;</code></p> <p>Example:</p> <pre><code>users\n  .where('age', '&gt;=', 18)\n  .catch(error =&gt; {\n    console.error('Query failed:', error);\n    return [];\n  });\n</code></pre>"},{"location":"api/async-collection-class/#finallyonfinally","title":"<code>finally(onfinally?)</code>","text":"<p>Implements Promise.finally() for cleanup.</p> <p>Parameters:</p> Parameter Type Description <code>onfinally</code> <code>() =&gt; void</code> Optional cleanup callback <p>Returns: <code>Promise&lt;any&gt;</code></p> <p>Example:</p> <pre><code>users\n  .where('active', true)\n  .finally(() =&gt; {\n    console.log('Query completed');\n  });\n</code></pre>"},{"location":"api/async-collection-class/#filtering-methods","title":"Filtering Methods","text":""},{"location":"api/async-collection-class/#wherekey-value","title":"<code>where(key, value)</code>","text":""},{"location":"api/async-collection-class/#wherekey-operator-value","title":"<code>where(key, operator, value)</code>","text":"<p>Filters collection using where operator with comparisons.</p> <p>Parameters:</p> Parameter Type Description <code>key</code> <code>string</code> Field key to compare (supports dot notation) <code>operator</code> <code>string</code> Optional comparison operator: <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>in</code>, <code>includes</code> <code>value</code> <code>any</code> Value to compare against <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.where('age', '&gt;=', 18)\nusers.where('status', 'active')  // operator '=' by default\nusers.where('user.profile.verified', true)\n</code></pre>"},{"location":"api/async-collection-class/#wherenotkey-value","title":"<code>whereNot(key, value)</code>","text":""},{"location":"api/async-collection-class/#wherenotkey-operator-value","title":"<code>whereNot(key, operator, value)</code>","text":"<p>Inverse filter - excludes matching items.</p> <p>Parameters: Same as <code>where()</code></p> <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.whereNot('deleted', true)\nusers.whereNot('age', '&lt;', 18)\n</code></pre>"},{"location":"api/async-collection-class/#filterhandler","title":"<code>filter(handler)</code>","text":"<p>Filters elements using a function or Query object.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object</code> Filter function or query object <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.filter(user =&gt; user.age &gt;= 18)\nusers.filter({ age: { $gte: 18 }, status: 'active' })\n</code></pre>"},{"location":"api/async-collection-class/#nothandler","title":"<code>not(handler)</code>","text":"<p>Inverse filter - excludes matching items.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object</code> Filter function or query object <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.not(user =&gt; user.deleted)\nusers.not({ deleted: true })\n</code></pre>"},{"location":"api/async-collection-class/#finding-methods","title":"Finding Methods","text":""},{"location":"api/async-collection-class/#firsthandler","title":"<code>first(handler?)</code>","text":"<p>Gets the first element matching the criteria.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object</code> Optional filter function or query object <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.where('age', '&gt;=', 18).first()\nusers.first(user =&gt; user.active)\nusers.first({ status: 'active' })\n</code></pre>"},{"location":"api/async-collection-class/#lasthandler","title":"<code>last(handler?)</code>","text":"<p>Gets the last element matching the criteria.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object</code> Optional filter function or query object <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.where('age', '&gt;=', 18).last()\nusers.last(user =&gt; user.active)\n</code></pre>"},{"location":"api/async-collection-class/#findhandler","title":"<code>find(handler)</code>","text":"<p>Finds first element matching criteria (alias for <code>first()</code>).</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object</code> Filter function or query object <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.find(user =&gt; user.email === 'test@example.com')\nusers.find({ email: 'test@example.com' })\n</code></pre>"},{"location":"api/async-collection-class/#everyhandler-value","title":"<code>every(handler, value?)</code>","text":"<p>Verifies all elements meet the criteria.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>Function \\| Object \\| string</code> Validation function, query object, or key string <code>value</code> <code>any</code> Optional value to compare (when handler is string) <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.every(user =&gt; user.age &gt;= 18)\nusers.every({ active: true })\nusers.every('status', 'active')\n</code></pre>"},{"location":"api/async-collection-class/#transformation-methods","title":"Transformation Methods","text":""},{"location":"api/async-collection-class/#maphandler","title":"<code>map(handler)</code>","text":"<p>Transforms each element using a mapping function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>(item: T, index: number, arr: T[]) =&gt; any</code> Transformation function <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.map(user =&gt; ({ ...user, displayName: `${user.name} (${user.age})` }))\nusers.map(user =&gt; user.email)\n</code></pre>"},{"location":"api/async-collection-class/#eachfn","title":"<code>each(fn)</code>","text":"<p>Iterates over each element executing a callback.</p> <p>Parameters:</p> Parameter Type Description <code>fn</code> <code>(item: T, index: number, arr: T[]) =&gt; any</code> Callback for each element (return <code>false</code> to stop) <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.each((user, index) =&gt; {\n  console.log(user);\n  if (index &gt;= 10) return false; // Stop after 10\n})\n</code></pre>"},{"location":"api/async-collection-class/#forgetkeys","title":"<code>forget(...keys)</code>","text":"<p>Removes specific fields from each element.</p> <p>Parameters:</p> Parameter Type Description <code>keys</code> <code>string[]</code> Field keys to remove <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.forget('password', 'token')\nusers.forget('secret', 'internal_id')\n</code></pre>"},{"location":"api/async-collection-class/#sorting-methods","title":"Sorting Methods","text":""},{"location":"api/async-collection-class/#sorthandler-direction","title":"<code>sort(handler?, direction?)</code>","text":"<p>Sorts elements by key or comparator function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>string \\| ((a: T, b: T) =&gt; number)</code> Field key or comparator function <code>direction</code> <code>'asc' \\| 'desc'</code> Sort direction (when handler is string) <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.sort('price', 'desc')\nusers.sort((a, b) =&gt; a.price - b.price)\n</code></pre>"},{"location":"api/async-collection-class/#reverse","title":"<code>reverse()</code>","text":"<p>Reverses the order of elements.</p> <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.reverse()\n</code></pre>"},{"location":"api/async-collection-class/#shuffle","title":"<code>shuffle()</code>","text":"<p>Randomly shuffles elements.</p> <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.shuffle()\n</code></pre>"},{"location":"api/async-collection-class/#randomlength","title":"<code>random(length?)</code>","text":"<p>Gets random elements from the collection.</p> <p>Parameters:</p> Parameter Type Default Description <code>length</code> <code>number</code> <code>Infinity</code> Number of random elements to get <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.random(5)  // Get 5 random users\nusers.random()   // Get all in random order\n</code></pre>"},{"location":"api/async-collection-class/#slicing-chunking-methods","title":"Slicing &amp; Chunking Methods","text":""},{"location":"api/async-collection-class/#slicestart-end","title":"<code>slice(start, end?)</code>","text":"<p>Gets a slice of the collection.</p> <p>Parameters:</p> Parameter Type Description <code>start</code> <code>number</code> Start index <code>end</code> <code>number</code> Optional end index <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.slice(0, 10)   // First 10\nusers.slice(10, 20)  // Items 10-20\nusers.slice(5)       // From index 5 to end\n</code></pre>"},{"location":"api/async-collection-class/#chunksize","title":"<code>chunk(size)</code>","text":"<p>Divides collection into chunks of specified size.</p> <p>Parameters:</p> Parameter Type Description <code>size</code> <code>number</code> Size of each chunk <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.chunk(10)  // Divide into groups of 10\n</code></pre>"},{"location":"api/async-collection-class/#paginatepage-perpage","title":"<code>paginate(page?, perPage?)</code>","text":"<p>Paginates results.</p> <p>Parameters:</p> Parameter Type Default Description <code>page</code> <code>number</code> <code>1</code> Page number (1-indexed) <code>perPage</code> <code>number</code> <code>20</code> Items per page <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.paginate(1, 20)  // First page, 20 items\nusers.paginate(2, 50)  // Second page, 50 items\n</code></pre>"},{"location":"api/async-collection-class/#aggregation-methods","title":"Aggregation Methods","text":""},{"location":"api/async-collection-class/#sumhandler","title":"<code>sum(handler)</code>","text":"<p>Sums values of a key or function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; number)</code> Field key or function returning numeric value <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.sum('price')\nusers.sum(user =&gt; user.price * user.quantity)\n</code></pre>"},{"location":"api/async-collection-class/#maxkey","title":"<code>max(key)</code>","text":"<p>Gets maximum value of a key.</p> <p>Parameters:</p> Parameter Type Description <code>key</code> <code>string</code> Field key <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.max('age')\nusers.max('score')\n</code></pre>"},{"location":"api/async-collection-class/#minkey","title":"<code>min(key)</code>","text":"<p>Gets minimum value of a key.</p> <p>Parameters:</p> Parameter Type Description <code>key</code> <code>string</code> Field key <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.min('age')\nusers.min('price')\n</code></pre>"},{"location":"api/async-collection-class/#groupbyhandler","title":"<code>groupBy(handler)</code>","text":"<p>Groups elements by key or function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; string \\| number)</code> Field key or grouping function <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.groupBy('category')\nusers.groupBy(user =&gt; user.date.getFullYear())\n</code></pre>"},{"location":"api/async-collection-class/#countbyhandler","title":"<code>countBy(handler)</code>","text":"<p>Counts elements grouped by key or function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; string \\| number)</code> Field key or grouping function <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.countBy('status')  // { active: 10, inactive: 5 }\nusers.countBy(user =&gt; user.age &gt;= 18 ? 'adult' : 'minor')\n</code></pre>"},{"location":"api/async-collection-class/#utility-methods","title":"Utility Methods","text":""},{"location":"api/async-collection-class/#uniquehandler","title":"<code>unique(handler)</code>","text":"<p>Gets only unique elements by key or function.</p> <p>Parameters:</p> Parameter Type Description <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; any)</code> Field key or function returning unique identifier <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.unique('email')\nusers.unique(user =&gt; user.user_id)\n</code></pre>"},{"location":"api/async-collection-class/#updatewhere-set","title":"<code>update(where, set?)</code>","text":"<p>Updates elements matching criteria.</p> <p>Parameters:</p> Parameter Type Description <code>where</code> <code>Object \\| Function</code> Query object or filter function (optional) <code>set</code> <code>Object \\| Function</code> Fields to update or update function <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.update({ active: false }, { deletedAt: new Date() })\nusers.update({ deletedAt: new Date() })  // Update all\n</code></pre>"},{"location":"api/async-collection-class/#deletewhere","title":"<code>delete(where)</code>","text":"<p>Deletes elements matching criteria.</p> <p>Parameters:</p> Parameter Type Description <code>where</code> <code>Object \\| Function</code> Query object or filter function <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.delete({ deleted: true })\nusers.delete(user =&gt; user.inactive)\n</code></pre>"},{"location":"api/async-collection-class/#collectitems","title":"<code>collect(items?)</code>","text":"<p>Clones current context with optional items.</p> <p>Parameters:</p> Parameter Type Description <code>items</code> <code>T[]</code> Optional items for new collection <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.collect([...newData])\nusers.collect()  // Clone without items\n</code></pre>"},{"location":"api/async-collection-class/#debugging-methods","title":"Debugging Methods","text":""},{"location":"api/async-collection-class/#dump","title":"<code>dump()</code>","text":"<p>Prints collection to console for debugging.</p> <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users\n  .filter({ active: true })\n  .dump()  // Prints to console\n  .sort('age', 'desc');\n</code></pre>"},{"location":"api/async-collection-class/#dd","title":"<code>dd()</code>","text":"<p>Dumps collection and exits process (Node.js only).</p> <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.dd();  // Dumps and exits\n</code></pre>"},{"location":"api/async-collection-class/#stringifyreplacer-space","title":"<code>stringify(replacer?, space?)</code>","text":"<p>Converts collection to JSON string.</p> <p>Parameters:</p> Parameter Type Description <code>replacer</code> <code>(key: string, value: any) =&gt; any</code> Optional JSON replacer function <code>space</code> <code>string \\| number</code> Optional spacing for formatting <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.stringify(null, 2)  // Pretty printed JSON\nusers.stringify()         // Compact JSON\n</code></pre>"},{"location":"api/async-collection-class/#extension-methods","title":"Extension Methods","text":""},{"location":"api/async-collection-class/#macrokey-handler","title":"<code>macro(key, handler)</code>","text":"<p>Registers a custom macro (method extension).</p> <p>Parameters:</p> Parameter Type Description <code>key</code> <code>string</code> Name of custom method <code>handler</code> <code>Function</code> Custom method implementation <p>Returns: <code>this</code> (chainable)</p> <p>Example:</p> <pre><code>users.macro('activeOnly', function() {\n  return this.where('status', 'active');\n})\n\n// Usage\nawait users.activeOnly();\n</code></pre>"},{"location":"api/async-collection-class/#usage-examples","title":"Usage Examples","text":""},{"location":"api/async-collection-class/#with-prisma","title":"With Prisma","text":"<pre><code>const users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const where: any = {};\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, op, val] = args.length === 3 ? args : [args[0], '=', args[1]];\n      where[key] = op === '&gt;=' ? { gte: val } : val;\n    }\n  });\n  return await prisma.user.findMany({ where });\n});\n\nawait users.where('age', '&gt;=', 18);\n</code></pre>"},{"location":"api/async-collection-class/#with-typeorm","title":"With TypeORM","text":"<pre><code>const users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      qb.andWhere(`user.${args[0]} = :${args[0]}`, { [args[0]]: args[1] });\n    }\n  });\n  return await qb.getMany();\n});\n\nawait users.where('status', 'active');\n</code></pre>"},{"location":"api/async-collection-class/#with-rest-api","title":"With REST API","text":"<pre><code>const api = new AsyncCollection(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      params.append(args[0], args[1]);\n    }\n  });\n  const response = await fetch(`/api/users?${params}`);\n  return await response.json();\n});\n\nawait api.where('status', 'active');\n</code></pre>"},{"location":"api/async-collection-class/#see-also","title":"See Also","text":"<ul> <li>AsyncCollection Guide - Introduction and concepts</li> <li>Usage Examples - Real-world examples</li> <li>TypeScript Usage - Type safety patterns</li> </ul>"},{"location":"api/collection-class/","title":"Collection Class","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"api/collection-class/#constructor","title":"Constructor","text":"<pre><code>new Collection&lt;T, V&gt;(items?: T[], validator?: V)\n</code></pre>"},{"location":"api/collection-class/#type-parameters","title":"Type Parameters","text":"<ul> <li><code>T</code>: Type of elements in the collection</li> <li><code>V</code>: Shape for query validation</li> </ul>"},{"location":"api/collection-class/#static-methods","title":"Static Methods","text":""},{"location":"api/collection-class/#collectionmacro","title":"Collection.macro()","text":"<p>Add custom methods to all Collection instances.</p>"},{"location":"api/collection-class/#instance-methods","title":"Instance Methods","text":"<p>See individual method references for details.</p>"},{"location":"api/filtering-methods/","title":"Filtering Methods","text":""},{"location":"api/filtering-methods/#filter","title":"filter()","text":""},{"location":"api/filtering-methods/#not","title":"not()","text":""},{"location":"api/filtering-methods/#first","title":"first()","text":""},{"location":"api/filtering-methods/#last","title":"last()","text":""},{"location":"api/filtering-methods/#where","title":"where()","text":""},{"location":"api/filtering-methods/#wherenot","title":"whereNot()","text":""},{"location":"api/filtering-methods/#every","title":"every()","text":"<p>Each method includes signature, parameters, return type, and examples.</p>"},{"location":"api/macros/","title":"Macros","text":"<p>Extend Collection with custom methods using macros.</p> <pre><code>Collection.macro('pluck', function(key) {\n  return this.map(item =&gt; item[key]);\n});\n\ncollection.pluck('name');\n</code></pre>"},{"location":"api/transformation-methods/","title":"Transformation Methods","text":""},{"location":"api/transformation-methods/#map","title":"map()","text":""},{"location":"api/transformation-methods/#sort","title":"sort()","text":""},{"location":"api/transformation-methods/#unique","title":"unique()","text":""},{"location":"api/transformation-methods/#forget","title":"forget()","text":""},{"location":"api/transformation-methods/#collect","title":"collect()","text":""},{"location":"api/transformation-methods/#chunk","title":"chunk()","text":""},{"location":"api/transformation-methods/#paginate","title":"paginate()","text":"<p>Complete signatures and examples for each method.</p>"},{"location":"api/utility-methods/","title":"Utility Methods","text":""},{"location":"api/utility-methods/#update","title":"update()","text":""},{"location":"api/utility-methods/#delete","title":"delete()","text":""},{"location":"api/utility-methods/#each","title":"each()","text":""},{"location":"api/utility-methods/#random","title":"random()","text":""},{"location":"api/utility-methods/#shuffle","title":"shuffle()","text":""},{"location":"api/utility-methods/#dump","title":"dump()","text":""},{"location":"api/utility-methods/#dd","title":"dd()","text":""},{"location":"api/utility-methods/#stringify","title":"stringify()","text":"<p>Complete API documentation.</p>"},{"location":"examples/advanced-patterns/","title":"Advanced Patterns","text":"<p>Advanced patterns and techniques.</p>"},{"location":"examples/advanced-patterns/#complex-queries","title":"Complex Queries","text":""},{"location":"examples/advanced-patterns/#custom-macros","title":"Custom Macros","text":""},{"location":"examples/advanced-patterns/#performance-optimization","title":"Performance Optimization","text":""},{"location":"examples/advanced-patterns/#integration-patterns","title":"Integration Patterns","text":""},{"location":"examples/aggregation/","title":"Aggregation","text":"<p>Examples of aggregation operations.</p> <pre><code>const totalRevenue = orders.sum('total');\nconst avgOrderValue = orders.sum('total') / orders.length;\nconst byStatus = orders.groupBy('status');\n</code></pre>"},{"location":"examples/async-collection-usage/","title":"AsyncCollection Usage Examples","text":"<p>Real-world examples of using AsyncCollection with different data sources and patterns.</p>"},{"location":"examples/async-collection-usage/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic In-Memory Example</li> <li>Prisma ORM Integration</li> <li>TypeORM Integration</li> <li>Sequelize Integration</li> <li>Mongoose Integration</li> <li>REST API Wrapper</li> <li>GraphQL Query Builder</li> <li>Redis Cache Layer</li> <li>Custom Validators</li> <li>Complex Query Chains</li> <li>Error Handling Patterns</li> <li>Performance Optimization</li> </ul>"},{"location":"examples/async-collection-usage/#basic-in-memory-example","title":"Basic In-Memory Example","text":"<p>Simple executor for filtering in-memory data:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n  status: 'active' | 'inactive';\n}\n\nconst data: User[] = [\n  { id: 1, name: \"Alice\", email: \"alice@example.com\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", email: \"bob@example.com\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", email: \"charlie@example.com\", age: 35, status: \"active\" }\n];\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        const itemValue = item[key as keyof User];\n\n        switch (operator) {\n          case '=': return itemValue === value;\n          case '!=': return itemValue !== value;\n          case '&gt;': return itemValue &gt; value;\n          case '&lt;': return itemValue &lt; value;\n          case '&gt;=': return itemValue &gt;= value;\n          case '&lt;=': return itemValue &lt;= value;\n          default: return true;\n        }\n      });\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      results.sort((a, b) =&gt; {\n        const aVal = a[key as keyof User];\n        const bVal = b[key as keyof User];\n        const comparison = aVal &gt; bVal ? 1 : aVal &lt; bVal ? -1 : 0;\n        return direction === 'desc' ? -comparison : comparison;\n      });\n    }\n\n    if (method === 'first') {\n      results = results.length &gt; 0 ? [results[0]] : [];\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      results = results.slice(start, end);\n    }\n  });\n\n  return results;\n});\n\n// Usage\nconst activeUsers = await users.where('status', 'active');\n// [{ id: 1, ... }, { id: 3, ... }]\n\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\n// { id: 1, name: \"Alice\", ... }\n\nconst sorted = await users.sort('age', 'desc');\n// [{ id: 3, ... }, { id: 2, ... }, { id: 1, ... }]\n</code></pre>"},{"location":"examples/async-collection-usage/#prisma-orm-integration","title":"Prisma ORM Integration","text":"<p>Complete Prisma integration with advanced query building:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient, User, Prisma } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations, metadata }) =&gt; {\n  let where: Prisma.UserWhereInput = {};\n  let orderBy: Prisma.UserOrderByWithRelationInput | undefined;\n  let take: number | undefined;\n  let skip: number | undefined;\n  let select: Prisma.UserSelect | undefined;\n\n  console.log(`Building Prisma query with ${metadata.operation_count} operations`);\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildWhereCondition(key, operator, value);\n      where = { ...where, ...condition };\n    }\n\n    if (method === 'whereNot') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildWhereCondition(key, operator, value);\n      where = { ...where, NOT: condition };\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = { [key]: direction };\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      skip = start;\n      take = end ? end - start : undefined;\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      skip = (page - 1) * perPage;\n      take = perPage;\n    }\n\n    if (method === 'forget') {\n      // Build select excluding specified fields\n      select = buildSelectExcluding(args);\n    }\n  });\n\n  // Check for terminal operations\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await prisma.user.findFirst({\n      where,\n      orderBy,\n      select,\n    });\n    return result ? [result] : [];\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    const results = await prisma.user.findMany({\n      where,\n      orderBy: orderBy ? { [Object.keys(orderBy)[0]]: 'desc' } : undefined,\n      select,\n      take: 1,\n    });\n    return results;\n  }\n\n  return await prisma.user.findMany({\n    where,\n    orderBy,\n    select,\n    take,\n    skip,\n  });\n});\n\nfunction buildWhereCondition(\n  key: string,\n  operator: string,\n  value: any\n): Prisma.UserWhereInput {\n  switch (operator) {\n    case '=':\n      return { [key]: value };\n    case '!=':\n      return { [key]: { not: value } };\n    case '&gt;':\n      return { [key]: { gt: value } };\n    case '&lt;':\n      return { [key]: { lt: value } };\n    case '&gt;=':\n      return { [key]: { gte: value } };\n    case '&lt;=':\n      return { [key]: { lte: value } };\n    case 'in':\n      return { [key]: { in: value } };\n    case 'includes':\n      return { [key]: { contains: value } };\n    default:\n      return { [key]: value };\n  }\n}\n\nfunction buildSelectExcluding(excludeKeys: string[]): Prisma.UserSelect {\n  // Get all User fields and exclude specified ones\n  const allFields = ['id', 'name', 'email', 'password', 'createdAt', 'updatedAt'];\n  const select: any = {};\n\n  allFields.forEach(field =&gt; {\n    if (!excludeKeys.includes(field)) {\n      select[field] = true;\n    }\n  });\n\n  return select;\n}\n\n// Usage examples\nconst activeVerified = await users\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .sort('createdAt', 'desc')\n  .slice(0, 10);\n\nconst firstUser = await users\n  .where('email', 'includes', '@example.com')\n  .first();\n\nconst page2 = await users\n  .where('status', 'active')\n  .paginate(2, 50);\n\nconst withoutPassword = await users\n  .forget('password', 'token')\n  .where('active', true);\n</code></pre>"},{"location":"examples/async-collection-usage/#typeorm-integration","title":"TypeORM Integration","text":"<p>Building TypeORM QueryBuilder from operations:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository, SelectQueryBuilder } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n  let paramIndex = 0;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `param${paramIndex++}`;\n      const column = `user.${key}`;\n\n      switch (operator) {\n        case '=':\n          qb.andWhere(`${column} = :${paramKey}`, { [paramKey]: value });\n          break;\n        case '!=':\n          qb.andWhere(`${column} != :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&gt;':\n          qb.andWhere(`${column} &gt; :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&lt;':\n          qb.andWhere(`${column} &lt; :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&gt;=':\n          qb.andWhere(`${column} &gt;= :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&lt;=':\n          qb.andWhere(`${column} &lt;= :${paramKey}`, { [paramKey]: value });\n          break;\n        case 'in':\n          qb.andWhere(`${column} IN (:...${paramKey})`, { [paramKey]: value });\n          break;\n        case 'includes':\n          qb.andWhere(`${column} LIKE :${paramKey}`, { [paramKey]: `%${value}%` });\n          break;\n      }\n    }\n\n    if (method === 'whereNot') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `param${paramIndex++}`;\n      const column = `user.${key}`;\n\n      qb.andWhere(`${column} != :${paramKey}`, { [paramKey]: value });\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      qb.orderBy(`user.${key}`, direction.toUpperCase() as 'ASC' | 'DESC');\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      qb.skip(start);\n      if (end !== undefined) qb.take(end - start);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      qb.skip((page - 1) * perPage);\n      qb.take(perPage);\n    }\n\n    if (method === 'forget') {\n      // Select all except specified fields\n      const allColumns = qb.connection.getMetadata(User).columns.map(c =&gt; c.propertyName);\n      const selectFields = allColumns.filter(col =&gt; !args.includes(col));\n      qb.select(selectFields.map(f =&gt; `user.${f}`));\n    }\n  });\n\n  // Handle terminal operations\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await qb.getOne();\n    return result ? [result] : [];\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    // Reverse order and get first\n    const orderBy = qb.expressionMap.orderBys[0];\n    if (orderBy) {\n      const [column, order] = Object.entries(orderBy)[0];\n      qb.orderBy(column, order === 'ASC' ? 'DESC' : 'ASC');\n    }\n    const result = await qb.getOne();\n    return result ? [result] : [];\n  }\n\n  return await qb.getMany();\n});\n\n// Usage\nconst results = await users\n  .where('age', '&gt;=', 21)\n  .where('country', 'USA')\n  .whereNot('deleted', true)\n  .sort('createdAt', 'desc')\n  .slice(0, 20);\n\nconst firstActive = await users\n  .where('status', 'active')\n  .first();\n</code></pre>"},{"location":"examples/async-collection-usage/#sequelize-integration","title":"Sequelize Integration","text":"<p>Working with Sequelize ORM:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { Op, Model } from \"sequelize\";\nimport { User } from \"./models/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const where: any = {};\n  let order: any[] = [];\n  let limit: number | undefined;\n  let offset: number | undefined;\n  let attributes: { exclude?: string[] } | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildSequelizeCondition(operator, value);\n\n      if (where[key]) {\n        where[key] = { [Op.and]: [where[key], condition] };\n      } else {\n        where[key] = condition;\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      order.push([key, direction.toUpperCase()]);\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      offset = start;\n      limit = end ? end - start : undefined;\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      offset = (page - 1) * perPage;\n      limit = perPage;\n    }\n\n    if (method === 'forget') {\n      attributes = { exclude: args };\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await User.findOne({ where, order, attributes });\n    return result ? [result] : [];\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    const result = await User.findOne({\n      where,\n      order: order.map(([col, dir]) =&gt; [col, dir === 'ASC' ? 'DESC' : 'ASC']),\n      attributes,\n    });\n    return result ? [result] : [];\n  }\n\n  return await User.findAll({\n    where,\n    order,\n    limit,\n    offset,\n    attributes,\n  });\n});\n\nfunction buildSequelizeCondition(operator: string, value: any) {\n  switch (operator) {\n    case '=': return value;\n    case '!=': return { [Op.ne]: value };\n    case '&gt;': return { [Op.gt]: value };\n    case '&lt;': return { [Op.lt]: value };\n    case '&gt;=': return { [Op.gte]: value };\n    case '&lt;=': return { [Op.lte]: value };\n    case 'in': return { [Op.in]: value };\n    case 'includes': return { [Op.like]: `%${value}%` };\n    default: return value;\n  }\n}\n\n// Usage\nconst results = await users\n  .where('status', 'active')\n  .where('age', '&gt;=', 18)\n  .sort('name', 'asc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"examples/async-collection-usage/#mongoose-integration","title":"Mongoose Integration","text":"<p>MongoDB queries with Mongoose:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport mongoose, { Model, Query } from \"mongoose\";\nimport { IUser, UserModel } from \"./models/User\";\n\nconst users = new AsyncCollection&lt;IUser&gt;(async ({ operations }) =&gt; {\n  let query = UserModel.find();\n  let sortObj: any = {};\n  let selectObj: any = {};\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildMongoCondition(key, operator, value);\n      query = query.where(condition);\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      sortObj[key] = direction === 'desc' ? -1 : 1;\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      query = query.skip(start);\n      if (end) query = query.limit(end - start);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      query = query.skip((page - 1) * perPage).limit(perPage);\n    }\n\n    if (method === 'forget') {\n      args.forEach(key =&gt; {\n        selectObj[key] = 0;\n      });\n    }\n  });\n\n  if (Object.keys(sortObj).length &gt; 0) {\n    query = query.sort(sortObj);\n  }\n\n  if (Object.keys(selectObj).length &gt; 0) {\n    query = query.select(selectObj);\n  }\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await query.findOne();\n    return result ? [result] : [];\n  }\n\n  return await query.exec();\n});\n\nfunction buildMongoCondition(key: string, operator: string, value: any) {\n  const conditions: any = {};\n\n  switch (operator) {\n    case '=':\n      conditions[key] = value;\n      break;\n    case '!=':\n      conditions[key] = { $ne: value };\n      break;\n    case '&gt;':\n      conditions[key] = { $gt: value };\n      break;\n    case '&lt;':\n      conditions[key] = { $lt: value };\n      break;\n    case '&gt;=':\n      conditions[key] = { $gte: value };\n      break;\n    case '&lt;=':\n      conditions[key] = { $lte: value };\n      break;\n    case 'in':\n      conditions[key] = { $in: value };\n      break;\n    case 'includes':\n      conditions[key] = { $regex: value, $options: 'i' };\n      break;\n    default:\n      conditions[key] = value;\n  }\n\n  return conditions;\n}\n\n// Usage\nconst activeUsers = await users\n  .where('status', 'active')\n  .where('age', '&gt;=', 18)\n  .sort('createdAt', 'desc')\n  .forget('password', '__v');\n</code></pre>"},{"location":"examples/async-collection-usage/#rest-api-wrapper","title":"REST API Wrapper","text":"<p>Creating an API client with AsyncCollection:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface ApiUser {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst apiUsers = new AsyncCollection&lt;ApiUser&gt;(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n  let endpoint = '/api/users';\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '=') {\n        params.append(key, String(value));\n      } else if (operator === 'includes') {\n        params.append(`${key}_like`, String(value));\n      } else if (operator === '&gt;=') {\n        params.append(`${key}_gte`, String(value));\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      params.append('_sort', key);\n      params.append('_order', direction);\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      params.append('_start', String(start));\n      if (end) params.append('_end', String(end));\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      params.append('_page', String(page));\n      params.append('_limit', String(perPage));\n    }\n  });\n\n  const url = `${endpoint}?${params.toString()}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`API request failed: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return Array.isArray(data) ? [data[0]] : [data];\n  }\n\n  return Array.isArray(data) ? data : [data];\n});\n\n// Usage\nconst users = await apiUsers\n  .where('status', 'active')\n  .where('name', 'includes', 'John')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n\nconst firstUser = await apiUsers\n  .where('email', 'john@example.com')\n  .first();\n</code></pre>"},{"location":"examples/async-collection-usage/#graphql-query-builder","title":"GraphQL Query Builder","text":"<p>Building GraphQL queries dynamically:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { GraphQLClient } from \"graphql-request\";\n\nconst client = new GraphQLClient('https://api.example.com/graphql');\n\ninterface GQLUser {\n  id: string;\n  name: string;\n  email: string;\n}\n\nconst gqlUsers = new AsyncCollection&lt;GQLUser&gt;(async ({ operations }) =&gt; {\n  const filters: string[] = [];\n  let orderBy: string | undefined;\n  let limit: number | undefined;\n  let offset: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const gqlOperator = mapToGQLOperator(operator);\n      filters.push(`${key}: { ${gqlOperator}: \"${value}\" }`);\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = `${key}: ${direction.toUpperCase()}`;\n    }\n\n    if (method === 'slice') {\n      const [start, end] = args;\n      offset = start;\n      limit = end ? end - start : undefined;\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      offset = (page - 1) * perPage;\n      limit = perPage;\n    }\n  });\n\n  const whereClause = filters.length &gt; 0 ? `where: { ${filters.join(', ')} }` : '';\n  const orderClause = orderBy ? `orderBy: { ${orderBy} }` : '';\n  const limitClause = limit ? `take: ${limit}` : '';\n  const offsetClause = offset ? `skip: ${offset}` : '';\n\n  const args = [whereClause, orderClause, limitClause, offsetClause]\n    .filter(Boolean)\n    .join(', ');\n\n  const query = `\n    query {\n      users${args ? `(${args})` : ''} {\n        id\n        name\n        email\n        createdAt\n      }\n    }\n  `;\n\n  const response = await client.request&lt;{ users: GQLUser[] }&gt;(query);\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return response.users.length &gt; 0 ? [response.users[0]] : [];\n  }\n\n  return response.users;\n});\n\nfunction mapToGQLOperator(operator: string): string {\n  const mapping: Record&lt;string, string&gt; = {\n    '=': 'equals',\n    '!=': 'not',\n    '&gt;': 'gt',\n    '&lt;': 'lt',\n    '&gt;=': 'gte',\n    '&lt;=': 'lte',\n    'in': 'in',\n    'includes': 'contains',\n  };\n  return mapping[operator] || 'equals';\n}\n\n// Usage\nconst users = await gqlUsers\n  .where('status', 'active')\n  .where('age', '&gt;=', 18)\n  .sort('name', 'asc')\n  .paginate(1, 10);\n</code></pre>"},{"location":"examples/async-collection-usage/#redis-cache-layer","title":"Redis Cache Layer","text":"<p>Using AsyncCollection with Redis caching:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport Redis from \"ioredis\";\n\nconst redis = new Redis();\n\ninterface CachedUser {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst cachedUsers = new AsyncCollection&lt;CachedUser&gt;(async ({ operations }) =&gt; {\n  // Build cache key from operations\n  const cacheKey = `users:${JSON.stringify(operations)}`;\n\n  // Check cache\n  const cached = await redis.get(cacheKey);\n  if (cached) {\n    console.log('Cache hit');\n    return JSON.parse(cached);\n  }\n\n  console.log('Cache miss - fetching from database');\n\n  // Fetch from database (example with fetch)\n  const params = new URLSearchParams();\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, value] = args.length === 2 ? args : [args[0], args[2]];\n      params.append(key, value);\n    }\n  });\n\n  const response = await fetch(`/api/users?${params}`);\n  const data = await response.json();\n\n  // Cache for 5 minutes\n  await redis.setex(cacheKey, 300, JSON.stringify(data));\n\n  return data;\n});\n\n// Usage\nconst users = await cachedUsers.where('status', 'active');\n// Second call will use cache\nconst cachedResult = await cachedUsers.where('status', 'active');\n</code></pre>"},{"location":"examples/async-collection-usage/#custom-validators","title":"Custom Validators","text":"<p>Advanced custom validator patterns:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst customValidators = {\n  // Date validators\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  $isFuture(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isFuture = date &gt; new Date();\n      return value ? isFuture : !isFuture;\n    };\n  },\n\n  // Numeric validators\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  },\n\n  // String validators\n  $matches(ref: string, regex: RegExp) {\n    return (item: any) =&gt; {\n      return regex.test(String(item[ref]));\n    };\n  },\n\n  // Array validators\n  $hasLength(ref: string, length: number) {\n    return (item: any) =&gt; {\n      return Array.isArray(item[ref]) &amp;&amp; item[ref].length === length;\n    };\n  },\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    let results = [...data];\n\n    operations.forEach(([method, ...args]) =&gt; {\n      if (method === 'filter' &amp;&amp; typeof args[0] === 'object') {\n        const query = args[0];\n        results = results.filter(item =&gt; {\n          return Object.entries(query).every(([key, condition]) =&gt; {\n            if (typeof condition === 'object') {\n              return Object.entries(condition).every(([operator, value]) =&gt; {\n                if (validators &amp;&amp; operator in validators) {\n                  const validator = validators[operator];\n                  const validatorFn = validator(key, value);\n                  return validatorFn(item);\n                }\n                return true;\n              });\n            }\n            return item[key] === condition;\n          });\n        });\n      }\n    });\n\n    return results;\n  },\n  customValidators\n);\n\n// Usage\nconst results = await items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] },\n  email: { $matches: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/i },\n  tags: { $hasLength: 3 },\n});\n</code></pre>"},{"location":"examples/async-collection-usage/#complex-query-chains","title":"Complex Query Chains","text":"<p>Building complex, multi-step queries:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n// Complex user search with multiple conditions\nconst userSearch = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  console.log(`Building complex query: ${metadata.operation_count} operations`);\n\n  // Extract and organize operations\n  const where_ops = operations.filter(([m]) =&gt; m === 'where' || m === 'whereNot');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n  const slice_ops = operations.filter(([m]) =&gt; m === 'slice' || m === 'paginate');\n  const terminal_ops = operations.filter(([m]) =&gt; ['first', 'last'].includes(m));\n\n  // Build where conditions\n  const where: any = { AND: [] };\n  where_ops.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push(condition);\n    } else if (method === 'whereNot') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push({ NOT: condition });\n    }\n  });\n\n  // Build order\n  const orderBy = sort_ops.map(([_, key, direction]) =&gt; ({\n    [key]: direction || 'asc',\n  }));\n\n  // Build pagination\n  let take: number | undefined;\n  let skip: number | undefined;\n\n  slice_ops.forEach(([method, ...args]) =&gt; {\n    if (method === 'slice') {\n      const [start, end] = args;\n      skip = start;\n      take = end ? end - start : undefined;\n    } else if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      skip = (page - 1) * perPage;\n      take = perPage;\n    }\n  });\n\n  // Execute query based on terminal operation\n  if (terminal_ops.length &gt; 0 &amp;&amp; terminal_ops[0][0] === 'first') {\n    const result = await prisma.user.findFirst({\n      where: where.AND.length &gt; 0 ? where : undefined,\n      orderBy,\n    });\n    return result ? [result] : [];\n  }\n\n  return await prisma.user.findMany({\n    where: where.AND.length &gt; 0 ? where : undefined,\n    orderBy,\n    take,\n    skip,\n  });\n});\n\n// Usage: Complex search\nconst results = await userSearch\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .where('age', '&lt;=', 65)\n  .whereNot('deleted', true)\n  .whereNot('banned', true)\n  .sort('score', 'desc')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"examples/async-collection-usage/#error-handling-patterns","title":"Error Handling Patterns","text":"<p>Robust error handling in executors:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nclass QueryError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'QueryError';\n  }\n}\n\nconst users = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  try {\n    // Validate operations\n    const unsupported = operations.find(([method]) =&gt;\n      !['where', 'sort', 'first', 'slice'].includes(method)\n    );\n\n    if (unsupported) {\n      throw new QueryError(\n        `Unsupported operation: ${unsupported[0]}`,\n        'UNSUPPORTED_OPERATION'\n      );\n    }\n\n    // Build query\n    const query = buildQuery(operations);\n\n    // Execute with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() =&gt; controller.abort(), 5000);\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        body: JSON.stringify(query),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new QueryError(\n          `API error: ${response.statusText}`,\n          'API_ERROR'\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new QueryError('Query timeout exceeded', 'TIMEOUT');\n      }\n      throw error;\n    }\n  } catch (error) {\n    console.error('Query execution failed:', {\n      error,\n      operations,\n      metadata,\n    });\n\n    if (error instanceof QueryError) {\n      throw error;\n    }\n\n    throw new QueryError(\n      `Unexpected error: ${error.message}`,\n      'UNEXPECTED_ERROR'\n    );\n  }\n});\n\n// Usage with error handling\ntry {\n  const results = await users\n    .where('age', '&gt;=', 18)\n    .sort('name', 'asc');\n} catch (error) {\n  if (error instanceof QueryError) {\n    switch (error.code) {\n      case 'TIMEOUT':\n        console.error('Query took too long');\n        break;\n      case 'UNSUPPORTED_OPERATION':\n        console.error('Invalid operation used');\n        break;\n      case 'API_ERROR':\n        console.error('API returned an error');\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"examples/async-collection-usage/#performance-optimization","title":"Performance Optimization","text":"<p>Optimizing query execution:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst optimizedUsers = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  console.log(`Optimizing ${metadata.operation_count} operations`);\n\n  // Group related operations\n  const operation_groups = {\n    filters: operations.filter(([m]) =&gt; ['where', 'whereNot', 'filter'].includes(m)),\n    sorting: operations.filter(([m]) =&gt; m === 'sort'),\n    pagination: operations.filter(([m]) =&gt; ['slice', 'paginate'].includes(m)),\n    terminal: operations.filter(([m]) =&gt; ['first', 'last'].includes(m)),\n  };\n\n  // Optimize: If terminal operation is 'first', limit to 1\n  const shouldLimitOne = operation_groups.terminal.some(([m]) =&gt; m === 'first');\n\n  // Build optimized query\n  const query = {\n    where: buildOptimizedWhere(operation_groups.filters),\n    orderBy: buildOrderBy(operation_groups.sorting),\n    ...(shouldLimitOne\n      ? { take: 1 }\n      : buildPagination(operation_groups.pagination)),\n  };\n\n  // Execute with connection pooling\n  const results = await executeWithPool(query);\n\n  // Return based on terminal operation\n  if (shouldLimitOne) {\n    return results.length &gt; 0 ? [results[0]] : [];\n  }\n\n  return results;\n});\n\nfunction buildOptimizedWhere(filters: any[]) {\n  // Combine multiple where clauses on same field\n  const grouped = filters.reduce((acc, [method, ...args]) =&gt; {\n    const key = args[0];\n    if (!acc[key]) acc[key] = [];\n    acc[key].push({ method, args });\n    return acc;\n  }, {});\n\n  // Build optimized conditions\n  return Object.entries(grouped).map(([key, conditions]: [string, any]) =&gt; {\n    if (conditions.length === 1) {\n      return buildSingleCondition(conditions[0]);\n    }\n    return { AND: conditions.map(buildSingleCondition) };\n  });\n}\n</code></pre>"},{"location":"examples/async-collection-usage/#see-also","title":"See Also","text":"<ul> <li>AsyncCollection Guide</li> <li>API Reference</li> <li>TypeScript Usage</li> </ul>"},{"location":"examples/basic-usage/","title":"Basic Usage","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"examples/basic-usage/#creating-collections","title":"Creating Collections","text":""},{"location":"examples/basic-usage/#filtering-data","title":"Filtering Data","text":""},{"location":"examples/basic-usage/#transforming-elements","title":"Transforming Elements","text":""},{"location":"examples/basic-usage/#finding-items","title":"Finding Items","text":"<pre><code>const users = new Collection([...]);\nconst active = users.filter({ active: true });\n</code></pre>"},{"location":"examples/filtering-sorting/","title":"Filtering &amp; Sorting","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"guides/aggregation-methods/","title":"Aggregation Methods","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"guides/async-collection/","title":"AsyncCollection Guide","text":"<p>Welcome to the AsyncCollection guide! This guide introduces the deferred query builder pattern for creating abstractions over any data source including ORMs, REST APIs, GraphQL, and more.</p>"},{"location":"guides/async-collection/#what-is-asynccollection","title":"What is AsyncCollection?","text":"<p>AsyncCollection implements a Query Builder Pattern that constructs a \"query plan\" (array of operations) that executes when the promise resolves. This allows creating powerful abstractions over any data source by transforming operations into the specific format required by your ORM or API.</p>"},{"location":"guides/async-collection/#key-features","title":"Key Features","text":"<ul> <li>Deferred Execution: Operations are registered but not executed until you await or call <code>.then()</code></li> <li>ORM Agnostic: Works with Prisma, TypeORM, Sequelize, Mongoose, or any data source</li> <li>Type Safe: Full TypeScript support with generics</li> <li>Chainable: Fluent interface for building complex queries</li> <li>Flexible: Transform operations to match your data source format</li> </ul>"},{"location":"guides/async-collection/#when-to-use-asynccollection","title":"When to Use AsyncCollection","text":"<p>Use AsyncCollection when you need to:</p> <ul> <li>Create abstractions over database ORMs</li> <li>Build reusable query interfaces for REST APIs</li> <li>Implement custom data access layers</li> <li>Unify different data sources under a common interface</li> <li>Defer query execution until all filters are applied</li> </ul>"},{"location":"guides/async-collection/#basic-concepts","title":"Basic Concepts","text":""},{"location":"guides/async-collection/#the-executor-function","title":"The Executor Function","text":"<p>The executor is the core of AsyncCollection. It receives a context containing all operations and returns the results:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst executor = async ({ operations, validators, metadata }) =&gt; {\n  // operations: Array of [method_name, ...args]\n  // validators: Custom validators (optional)\n  // metadata: Query info (created_at, operation_count, chain_depth)\n\n  console.log(`Processing ${metadata.operation_count} operations`);\n\n  // Transform operations to your format\n  // Execute query\n  // Return results\n\n  return results;\n};\n\nconst collection = new AsyncCollection(executor);\n</code></pre>"},{"location":"guides/async-collection/#operation-registration","title":"Operation Registration","text":"<p>When you chain methods, they're registered as operations:</p> <pre><code>const users = new AsyncCollection(executor);\n\n// These register operations but DON'T execute yet\nusers\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .sort('name', 'asc');\n\n// Execution happens here (when promise resolves)\nconst results = await users;\n</code></pre>"},{"location":"guides/async-collection/#executorcontext","title":"ExecutorContext","text":"<p>The context passed to your executor contains:</p> <pre><code>interface ExecutorContext&lt;T, V&gt; {\n  // Array of operations: [method_name, ...args]\n  operations: [string, ...any[]][];\n\n  // Custom validators for query()\n  validators?: V;\n\n  // Metadata about the query\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre>"},{"location":"guides/async-collection/#simple-example-in-memory-array","title":"Simple Example: In-Memory Array","text":"<p>Let's start with a simple example using an in-memory array:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\n// In-memory data\nconst data = [\n  { id: 1, name: \"Alice\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", age: 35, status: \"active\" }\n];\n\n// Simple executor\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        if (operator === '&gt;=') return item[key] &gt;= value;\n        if (operator === '=') return item[key] === value;\n        return true;\n      });\n    }\n\n    if (method === 'first') {\n      results = [results[0]];\n    }\n  });\n\n  return results;\n});\n\n// Use it\nconst active = await users.where('status', 'active');\n// [{ id: 1, ... }, { id: 3, ... }]\n\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\n// { id: 1, name: \"Alice\", ... }\n</code></pre>"},{"location":"guides/async-collection/#working-with-prisma","title":"Working with Prisma","text":"<p>Transform operations to Prisma queries:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const where: any = {};\n  let orderBy: any = undefined;\n  let take: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '&gt;=') where[key] = { gte: value };\n      else if (operator === '&gt;') where[key] = { gt: value };\n      else if (operator === '=') where[key] = value;\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      orderBy = { [key]: direction || 'asc' };\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await prisma.user.findFirst({ where, orderBy });\n  }\n\n  return await prisma.user.findMany({ where, orderBy, take });\n});\n\n// Use it like Collection\nconst active = await users\n  .where('age', '&gt;=', 18)\n  .where('verified', true)\n  .sort('createdAt', 'desc');\n\nconst firstUser = await users\n  .where('status', 'active')\n  .first();\n</code></pre>"},{"location":"guides/async-collection/#working-with-typeorm","title":"Working with TypeORM","text":"<p>Build TypeORM QueryBuilder from operations:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `${key}_${Math.random()}`;\n\n      if (operator === '&gt;=') {\n        qb.andWhere(`user.${key} &gt;= :${paramKey}`, { [paramKey]: value });\n      } else if (operator === '=') {\n        qb.andWhere(`user.${key} = :${paramKey}`, { [paramKey]: value });\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      qb.orderBy(`user.${key}`, direction?.toUpperCase() || 'ASC');\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await qb.getOne();\n  }\n\n  return await qb.getMany();\n});\n\n// Chain operations\nconst result = await users\n  .where('age', '&gt;=', 21)\n  .where('status', 'active')\n  .sort('name', 'asc');\n</code></pre>"},{"location":"guides/async-collection/#custom-validators","title":"Custom Validators","text":"<p>Extend query capabilities with custom validators:</p> <pre><code>const customValidators = {\n  // Check if date is in the past\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  // Check if value is within range\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  }\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    // Use validators to process operations\n    // Transform to your data source format\n    return processData(operations, validators);\n  },\n  customValidators\n);\n\n// Use custom validators\nawait items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] }\n});\n</code></pre>"},{"location":"guides/async-collection/#method-chaining","title":"Method Chaining","text":"<p>Chain multiple operations fluently:</p> <pre><code>const users = new AsyncCollection(executor);\n\nconst result = await users\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .not({ deleted: true })\n  .sort('createdAt', 'desc')\n  .slice(0, 10)\n  .map(user =&gt; ({\n    id: user.id,\n    name: user.name,\n    displayName: `${user.name} (${user.age})`\n  }));\n</code></pre>"},{"location":"guides/async-collection/#supported-operations","title":"Supported Operations","text":"<p>AsyncCollection supports all Collection methods:</p>"},{"location":"guides/async-collection/#filtering","title":"Filtering","text":"<ul> <li><code>where(key, value)</code> or <code>where(key, operator, value)</code></li> <li><code>whereNot(key, value)</code> or <code>whereNot(key, operator, value)</code></li> <li><code>filter(handler)</code> - Function or query object</li> <li><code>not(handler)</code> - Inverse filter</li> </ul>"},{"location":"guides/async-collection/#finding","title":"Finding","text":"<ul> <li><code>first(handler?)</code> - First matching element</li> <li><code>last(handler?)</code> - Last matching element</li> <li><code>find(handler)</code> - Alias for first</li> </ul>"},{"location":"guides/async-collection/#transformation","title":"Transformation","text":"<ul> <li><code>map(handler)</code> - Transform elements</li> <li><code>each(handler)</code> - Iterate elements</li> <li><code>forget(...keys)</code> - Remove fields</li> </ul>"},{"location":"guides/async-collection/#sorting-ordering","title":"Sorting &amp; Ordering","text":"<ul> <li><code>sort(key, direction)</code> or <code>sort(compareFunction)</code></li> <li><code>reverse()</code> - Reverse order</li> <li><code>shuffle()</code> - Random order</li> </ul>"},{"location":"guides/async-collection/#slicing-pagination","title":"Slicing &amp; Pagination","text":"<ul> <li><code>slice(start, end?)</code> - Array slice</li> <li><code>chunk(size)</code> - Divide into chunks</li> <li><code>paginate(page, perPage)</code> - Paginate results</li> </ul>"},{"location":"guides/async-collection/#aggregation","title":"Aggregation","text":"<ul> <li><code>sum(key)</code> - Sum values</li> <li><code>max(key)</code> - Maximum value</li> <li><code>min(key)</code> - Minimum value</li> <li><code>groupBy(key)</code> - Group by key</li> <li><code>countBy(key)</code> - Count by key</li> </ul>"},{"location":"guides/async-collection/#utility","title":"Utility","text":"<ul> <li><code>unique(key)</code> - Unique elements</li> <li><code>random(count?)</code> - Random elements</li> <li><code>every(handler)</code> - Validate all</li> <li><code>collect(items?)</code> - Clone context</li> </ul>"},{"location":"guides/async-collection/#debugging","title":"Debugging","text":"<ul> <li><code>dump()</code> - Print to console</li> <li><code>dd()</code> - Dump and die (Node.js)</li> <li><code>stringify(replacer?, space?)</code> - Convert to JSON</li> </ul>"},{"location":"guides/async-collection/#error-handling","title":"Error Handling","text":"<p>Handle errors in your executor:</p> <pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  try {\n    // Build and execute query\n    const results = await executeQuery(operations);\n    return results;\n  } catch (error) {\n    console.error('Query failed:', error);\n    throw new Error(`Failed to fetch users: ${error.message}`);\n  }\n});\n\n// Handle errors when awaiting\ntry {\n  const results = await users.where('age', '&gt;=', 18);\n} catch (error) {\n  console.error('Error:', error);\n}\n\n// Or with .catch()\nusers\n  .where('age', '&gt;=', 18)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"guides/async-collection/#best-practices","title":"Best Practices","text":""},{"location":"guides/async-collection/#1-validate-operations","title":"1. Validate Operations","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Validate operations before executing\n  const hasInvalidOp = operations.some(([method]) =&gt;\n    !['where', 'sort', 'first'].includes(method)\n  );\n\n  if (hasInvalidOp) {\n    throw new Error('Unsupported operation');\n  }\n\n  return processOperations(operations);\n});\n</code></pre>"},{"location":"guides/async-collection/#2-handle-terminal-operations","title":"2. Handle Terminal Operations","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  const lastOp = operations[operations.length - 1];\n\n  // Check for terminal operations\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await findFirst(operations.slice(0, -1));\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    return await findLast(operations.slice(0, -1));\n  }\n\n  return await findMany(operations);\n});\n</code></pre>"},{"location":"guides/async-collection/#3-optimize-query-building","title":"3. Optimize Query Building","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Group operations by type for efficient processing\n  const where_ops = operations.filter(([m]) =&gt; m === 'where');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n\n  // Build optimized query\n  const query = buildQuery({ where_ops, sort_ops });\n\n  return await executeQuery(query);\n});\n</code></pre>"},{"location":"guides/async-collection/#next-steps","title":"Next Steps","text":"<ul> <li>Check out API Reference for complete method documentation</li> <li>See Usage Examples for real-world patterns</li> <li>Learn about TypeScript Usage for type safety</li> </ul>"},{"location":"guides/async-collection/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/async-collection/#rest-api-wrapper","title":"REST API Wrapper","text":"<pre><code>const api = new AsyncCollection(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, value] = args.length === 2 ? args : [args[0], args[2]];\n      params.append(key, value);\n    }\n  });\n\n  const response = await fetch(`/api/users?${params}`);\n  return await response.json();\n});\n\nconst users = await api.where('status', 'active');\n</code></pre>"},{"location":"guides/async-collection/#graphql-builder","title":"GraphQL Builder","text":"<pre><code>const gql = new AsyncCollection(async ({ operations }) =&gt; {\n  const filters = operations\n    .filter(([m]) =&gt; m === 'where')\n    .map(([_, key, value]) =&gt; `${key}: \"${value}\"`);\n\n  const query = `\n    query {\n      users(where: { ${filters.join(', ')} }) {\n        id name email\n      }\n    }\n  `;\n\n  const response = await graphqlClient.query(query);\n  return response.data.users;\n});\n</code></pre>"},{"location":"guides/async-collection/#tips","title":"Tips","text":"<ol> <li>Keep executors focused - One responsibility per AsyncCollection</li> <li>Validate operations - Reject unsupported operations early</li> <li>Handle edge cases - Check for terminal operations like first/last</li> <li>Type everything - Use TypeScript generics for type safety</li> <li>Test thoroughly - Unit test your executor with different operation chains</li> </ol>"},{"location":"guides/best-practices/","title":"Best Practices","text":"<p>Tips and best practices for using <code>@arcaelas/collection</code> effectively.</p>"},{"location":"guides/best-practices/#use-typescript","title":"Use TypeScript","text":""},{"location":"guides/best-practices/#chain-methods","title":"Chain Methods","text":""},{"location":"guides/best-practices/#leverage-query-operators","title":"Leverage Query Operators","text":""},{"location":"guides/best-practices/#prefer-immutable-operations","title":"Prefer Immutable Operations","text":""},{"location":"guides/best-practices/#performance-considerations","title":"Performance Considerations","text":""},{"location":"guides/core-concepts/","title":"Core Concepts","text":"<p>Learn the fundamental concepts behind <code>@arcaelas/collection</code>.</p>"},{"location":"guides/core-concepts/#collections-as-enhanced-arrays","title":"Collections as Enhanced Arrays","text":"<p>Collections extend native JavaScript arrays with powerful methods:</p> <pre><code>const collection = new Collection([1, 2, 3]);\n// Has all Array methods plus Collection methods\n</code></pre>"},{"location":"guides/core-concepts/#type-safety","title":"Type Safety","text":"<p>Use TypeScript generics for type-safe collections:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n</code></pre>"},{"location":"guides/core-concepts/#query-language","title":"Query Language","text":"<p>Collections support MongoDB-style queries:</p> <pre><code>collection.filter({\n  age: { $gte: 18 },\n  status: { $in: ['active', 'pending'] }\n});\n</code></pre>"},{"location":"guides/core-concepts/#immutability","title":"Immutability","text":"<p>Most methods return new collections:</p> <pre><code>const original = new Collection([1, 2, 3]);\nconst filtered = original.filter(n =&gt; n &gt; 1);\n// original unchanged\n</code></pre>"},{"location":"guides/core-concepts/#method-chaining","title":"Method Chaining","text":"<p>Chain methods for fluent syntax:</p> <pre><code>collection\n  .filter({ active: true })\n  .sort('age', 'desc')\n  .slice(0, 10);\n</code></pre> <p>Next: Query Operators</p>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>Welcome to the getting started guide for <code>@arcaelas/collection</code>! This guide will walk you through the basics and help you become productive quickly.</p>"},{"location":"guides/getting-started/#your-first-collection","title":"Your First Collection","text":"<p>Let's create your first collection:</p> <pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(numbers.length); // 5\nconsole.log(numbers.first()); // 1\nconsole.log(numbers.last()); // 5\n</code></pre>"},{"location":"guides/getting-started/#working-with-objects","title":"Working with Objects","text":"<p>Collections really shine when working with objects:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  age: number;\n  active: boolean;\n}\n\nconst users = new Collection&lt;User&gt;([\n  { id: 1, name: \"Alice\", age: 25, active: true },\n  { id: 2, name: \"Bob\", age: 30, active: false },\n  { id: 3, name: \"Charlie\", age: 35, active: true }\n]);\n</code></pre>"},{"location":"guides/getting-started/#basic-filtering","title":"Basic Filtering","text":"<p>Filter collections using callbacks:</p> <pre><code>// Get active users\nconst activeUsers = users.filter(user =&gt; user.active);\n\n// Get users over 25\nconst adults = users.filter(user =&gt; user.age &gt; 25);\n</code></pre> <p>Or use query objects:</p> <pre><code>// Same results with query syntax\nconst activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre>"},{"location":"guides/getting-started/#finding-elements","title":"Finding Elements","text":"<p>Find specific elements:</p> <pre><code>// Get first active user\nconst firstActive = users.first({ active: true });\n\n// Get last user over 30\nconst lastAdult = users.last(user =&gt; user.age &gt; 30);\n</code></pre>"},{"location":"guides/getting-started/#transforming-data","title":"Transforming Data","text":"<p>Transform collections with <code>map()</code>:</p> <pre><code>// Get array of names\nconst names = users.map(user =&gt; user.name);\n// [\"Alice\", \"Bob\", \"Charlie\"]\n\n// Create display labels\nconst labels = users.map(user =&gt; `${user.name} (${user.age})`);\n// [\"Alice (25)\", \"Bob (30)\", \"Charlie (35)\"]\n</code></pre>"},{"location":"guides/getting-started/#sorting","title":"Sorting","text":"<p>Sort collections easily:</p> <pre><code>// Sort by age ascending\nusers.sort(\"age\", \"asc\");\n\n// Sort by name descending\nusers.sort(\"name\", \"desc\");\n\n// Custom sorting\nusers.sort((a, b) =&gt; a.age - b.age);\n</code></pre>"},{"location":"guides/getting-started/#method-chaining","title":"Method Chaining","text":"<p>Combine multiple operations:</p> <pre><code>const result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .map(user =&gt; user.name);\n\nconsole.log(result); // [\"Charlie\", \"Alice\"]\n</code></pre>"},{"location":"guides/getting-started/#aggregation","title":"Aggregation","text":"<p>Calculate aggregate values:</p> <pre><code>// Total age of all users\nconst totalAge = users.sum(\"age\");\n\n// Maximum age\nconst maxAge = users.max(\"age\");\n\n// Minimum age\nconst minAge = users.min(\"age\");\n\n// Average age\nconst avgAge = users.sum(\"age\") / users.length;\n</code></pre>"},{"location":"guides/getting-started/#grouping-data","title":"Grouping Data","text":"<p>Group elements by a key:</p> <pre><code>const products = new Collection([\n  { name: \"Laptop\", category: \"electronics\", price: 1000 },\n  { name: \"Mouse\", category: \"electronics\", price: 20 },\n  { name: \"Desk\", category: \"furniture\", price: 300 }\n]);\n\nconst byCategory = products.groupBy(\"category\");\n// {\n//   electronics: [...],\n//   furniture: [...]\n// }\n</code></pre>"},{"location":"guides/getting-started/#pagination","title":"Pagination","text":"<p>Paginate large collections:</p> <pre><code>const page1 = users.paginate(1, 10);\n// {\n//   items: [...], // First 10 users\n//   prev: false,\n//   next: 2\n// }\n</code></pre>"},{"location":"guides/getting-started/#unique-values","title":"Unique Values","text":"<p>Get unique elements:</p> <pre><code>const items = new Collection([1, 2, 2, 3, 3, 3, 4]);\nconst unique = items.unique(x =&gt; x);\n// [1, 2, 3, 4]\n\n// With objects\nconst uniqueUsers = users.unique(\"email\");\n</code></pre>"},{"location":"guides/getting-started/#updating-elements","title":"Updating Elements","text":"<p>Update elements that match a condition:</p> <pre><code>// Deactivate all users over 30\nusers.update(\n  { age: { $gt: 30 } },\n  { active: false }\n);\n\n// Update with callback\nusers.update(\n  { active: false },\n  user =&gt; ({ ...user, deletedAt: new Date() })\n);\n</code></pre>"},{"location":"guides/getting-started/#removing-fields","title":"Removing Fields","text":"<p>Remove sensitive fields:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n  password: string;\n  token: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// Remove password and token\nusers.forget(\"password\", \"token\");\n</code></pre>"},{"location":"guides/getting-started/#debugging","title":"Debugging","text":"<p>Use debug methods:</p> <pre><code>// Print and continue\nusers\n  .filter({ active: true })\n  .dump()  // Prints to console\n  .sort(\"age\", \"desc\");\n\n// Print and exit (in Node.js)\nusers.dd();  // Dumps and exits\n</code></pre>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ol> <li>Learn about Core Concepts</li> <li>Explore Query Operators</li> <li>Check out Examples</li> <li>Read the API Reference</li> </ol>"},{"location":"guides/getting-started/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/getting-started/#filter-and-sort","title":"Filter and Sort","text":"<pre><code>const topUsers = users\n  .filter({ verified: true })\n  .sort(\"score\", \"desc\")\n  .slice(0, 10);\n</code></pre>"},{"location":"guides/getting-started/#transform-and-group","title":"Transform and Group","text":"<pre><code>const grouped = products\n  .map(p =&gt; ({ ...p, discounted: p.price * 0.9 }))\n  .groupBy(\"category\");\n</code></pre>"},{"location":"guides/getting-started/#clean-and-dedupe","title":"Clean and Dedupe","text":"<pre><code>const clean = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .filter({ verified: true });\n</code></pre>"},{"location":"guides/getting-started/#tips","title":"Tips","text":"<ol> <li>Use TypeScript for type safety and autocompletion</li> <li>Chain methods for readable, concise code</li> <li>Use query objects for complex filtering</li> <li>Leverage operators like <code>$gt</code>, <code>$in</code>, <code>$contains</code></li> <li>Prefer immutable operations - use <code>collect()</code> to clone</li> </ol>"},{"location":"guides/getting-started/#help-support","title":"Help &amp; Support","text":"<ul> <li>Documentation: Full API Reference</li> <li>Examples: More Examples</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"guides/query-operators/","title":"Query Operators","text":"<p>Master MongoDB-style query operators in <code>@arcaelas/collection</code>.</p>"},{"location":"guides/query-operators/#comparison-operators","title":"Comparison Operators","text":""},{"location":"guides/query-operators/#eq-equal","title":"$eq (Equal)","text":"<pre><code>collection.filter({ age: { $eq: 25 } });\n// or shorthand\ncollection.filter({ age: 25 });\n</code></pre>"},{"location":"guides/query-operators/#gt-greater-than","title":"$gt (Greater Than)","text":"<pre><code>collection.filter({ age: { $gt: 18 } });\n</code></pre>"},{"location":"guides/query-operators/#gte-greater-than-or-equal","title":"$gte (Greater Than or Equal)","text":"<pre><code>collection.filter({ age: { $gte: 18 } });\n</code></pre>"},{"location":"guides/query-operators/#lt-less-than","title":"$lt (Less Than)","text":"<pre><code>collection.filter({ age: { $lt: 65 } });\n</code></pre>"},{"location":"guides/query-operators/#lte-less-than-or-equal","title":"$lte (Less Than or Equal)","text":"<pre><code>collection.filter({ age: { $lte: 65 } });\n</code></pre>"},{"location":"guides/query-operators/#logical-operators","title":"Logical Operators","text":""},{"location":"guides/query-operators/#not-not","title":"$not (Not)","text":"<pre><code>collection.filter({ \n  $not: { age: { $lt: 18 } }\n});\n</code></pre>"},{"location":"guides/query-operators/#in-in-array","title":"$in (In Array)","text":"<pre><code>collection.filter({\n  status: { $in: ['active', 'pending', 'verified'] }\n});\n</code></pre>"},{"location":"guides/query-operators/#contains-contains","title":"$contains (Contains)","text":"<pre><code>collection.filter({\n  skills: { $contains: 'TypeScript' }\n});\n</code></pre>"},{"location":"guides/query-operators/#operator-aliases","title":"Operator Aliases","text":"<p>For convenience, use shorthand aliases:</p> <pre><code>// These are equivalent\ncollection.where('age', '&gt;=', 18);\ncollection.filter({ age: { $gte: 18 } });\n</code></pre> Alias Operator Meaning <code>=</code> <code>$eq</code> Equal <code>!=</code> <code>$not</code> Not equal <code>&gt;</code> <code>$gt</code> Greater than <code>&lt;</code> <code>$lt</code> Less than <code>&gt;=</code> <code>$gte</code> Greater or equal <code>&lt;=</code> <code>$lte</code> Less or equal <code>in</code> <code>$in</code> In array <code>includes</code> <code>$includes</code> Contains <p>Next: Aggregation Methods</p>"},{"location":"es/","title":"Bienvenido a @arcaelas/collection","text":"**Una potente biblioteca de colecciones TypeScript con DSL de consultas similar a MongoDB**    [![versi\u00f3n npm](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![Licencia](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![Estrellas GitHub](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"es/#descripcion-general","title":"Descripci\u00f3n General","text":"<p><code>@arcaelas/collection</code> es una biblioteca de utilidades completa que extiende los arrays nativos de JavaScript con potentes capacidades de filtrado, consulta y transformaci\u00f3n. Inspirada en las Colecciones de Laravel y el lenguaje de consultas de MongoDB, proporciona una API elegante y type-safe para trabajar con colecciones de datos.</p>"},{"location":"es/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>DSL de Consultas Similar a MongoDB - Sintaxis de consulta intuitiva con operadores como <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code>, y m\u00e1s</li> <li>TypeScript Type-Safe - Soporte completo de TypeScript con tipos gen\u00e9ricos para autocompletado y verificaci\u00f3n de tipos</li> <li>API Rica - M\u00e1s de 30 m\u00e9todos integrados para filtrar, transformar y agregar datos</li> <li>Encadenamiento de M\u00e9todos - Interfaz fluida para componer operaciones complejas</li> <li>Extensible - Agregue m\u00e9todos personalizados con macros</li> <li>Sin Dependencias - Ligero con dependencias externas m\u00ednimas</li> <li>Optimizado para Rendimiento - Compilaci\u00f3n eficiente de consultas y delegaci\u00f3n de arrays nativos</li> </ul>"},{"location":"es/#inicio-rapido","title":"Inicio R\u00e1pido","text":""},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install @arcaelas/collection\n# o\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"es/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filtrar con consultas similares a MongoDB\nconst activeUsers = users.filter({ active: true });\n\n// Filtrar con operadores de consulta\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Encadenar m\u00e9todos\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"es/#por-que-arcaelascollection","title":"\u00bfPor qu\u00e9 @arcaelas/collection?","text":""},{"location":"es/#problema","title":"Problema","text":"<p>Los arrays nativos de JavaScript tienen funcionalidad limitada para operaciones de datos complejas:</p> <pre><code>// Enfoque nativo - verboso y propenso a errores\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"es/#solucion","title":"Soluci\u00f3n","text":"<p>Collection proporciona una API elegante y encadenable:</p> <pre><code>// Enfoque con Collection - limpio y expresivo\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"es/#conceptos-basicos","title":"Conceptos B\u00e1sicos","text":""},{"location":"es/#operadores-de-consulta","title":"Operadores de Consulta","text":"<p>Use operadores estilo MongoDB para consultas potentes:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"es/#encadenamiento-de-metodos","title":"Encadenamiento de M\u00e9todos","text":"<p>Componga operaciones complejas con sintaxis fluida:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"es/#seguridad-de-tipos","title":"Seguridad de Tipos","text":"<p>Aproveche TypeScript para seguridad en tiempo de compilaci\u00f3n:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript conoce la forma\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"es/#casos-de-uso","title":"Casos de Uso","text":""},{"location":"es/#filtrado-de-datos","title":"Filtrado de Datos","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"es/#agregacion","title":"Agregaci\u00f3n","text":"<pre><code>const orders = new Collection(orderData);\n\nconst totalRevenue = orders.sum(\"total\");\nconst avgOrderValue = orders.sum(\"total\") / orders.length;\nconst ordersByStatus = orders.groupBy(\"status\");\n</code></pre>"},{"location":"es/#transformacion-de-datos","title":"Transformaci\u00f3n de Datos","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"es/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<ul> <li> <p> Primeros Pasos</p> <p>Aprenda los conceptos b\u00e1sicos y cree su primera colecci\u00f3n</p> </li> <li> <p> Conceptos B\u00e1sicos</p> <p>Comprenda los principios y patrones fundamentales</p> </li> <li> <p> Operadores de Consulta</p> <p>Domine la sintaxis de consulta similar a MongoDB</p> </li> <li> <p> Referencia de API</p> <p>Explore todos los m\u00e9todos y firmas disponibles</p> </li> <li> <p> Ejemplos</p> <p>Vea ejemplos pr\u00e1cticos y patrones comunes</p> </li> <li> <p> Avanzado</p> <p>Consejos de rendimiento y t\u00e9cnicas avanzadas</p> </li> </ul>"},{"location":"es/#comunidad-y-soporte","title":"Comunidad y Soporte","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Reportar errores o solicitar funciones</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"es/#licencia","title":"Licencia","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Construido con \u2764\ufe0f por el equipo de Arcaelas Insiders </p> <p>     \u00bfQuiere discutir alguno de nuestros proyectos de c\u00f3digo abierto? Env\u00edenos un mensaje en     Twitter o patroc\u00ednenos en     GitHub Sponsors.   </p>"},{"location":"es/CHANGELOG/","title":"Registro de Cambios","text":"<p>Todos los cambios notables en <code>@arcaelas/collection</code> se documentar\u00e1n en este archivo.</p>"},{"location":"es/CHANGELOG/#corregido","title":"Corregido","text":"<ul> <li>Inferencia de tipos TypeScript corregida para sobrecargas del m\u00e9todo <code>every()</code></li> <li>Tipo de retorno corregido para el m\u00e9todo <code>collect()</code> para mantener tipos gen\u00e9ricos</li> <li>Validaci\u00f3n de consultas corregida para objetos anidados</li> </ul>"},{"location":"es/CHANGELOG/#mejorado","title":"Mejorado","text":"<ul> <li>Rendimiento mejorado del m\u00e9todo <code>unique()</code> con grandes conjuntos de datos</li> <li>Compilaci\u00f3n de consultas optimizada para operaciones de filtro repetidas</li> <li>Mejores mensajes de error para uso de operadores inv\u00e1lidos</li> </ul>"},{"location":"es/CHANGELOG/#agregado","title":"Agregado","text":"<ul> <li>Nuevo m\u00e9todo <code>every()</code> con m\u00faltiples firmas de sobrecarga</li> <li>Soporte para notaci\u00f3n de puntos en m\u00e9todos <code>where()</code> y <code>whereNot()</code></li> <li>M\u00e9todo <code>update()</code> mejorado con soporte de callback</li> </ul>"},{"location":"es/CHANGELOG/#agregado_1","title":"Agregado","text":"<ul> <li>Operadores de consulta estilo MongoDB</li> <li>Alias de operadores de consulta</li> <li>M\u00e9todos <code>macro()</code> est\u00e1tico e de instancia</li> <li>M\u00e9todo <code>stringify()</code> para serializaci\u00f3n JSON</li> </ul>"},{"location":"es/CHANGELOG/#agregado_2","title":"Agregado","text":"<ul> <li>Reescritura completa en TypeScript</li> <li>Soporte completo de tipos gen\u00e9ricos</li> <li>Nuevos m\u00e9todos de agregaci\u00f3n y transformaci\u00f3n</li> </ul>"},{"location":"es/CHANGELOG/#soporte-de-versiones","title":"Soporte de Versiones","text":"Versi\u00f3n Estado Node.js TypeScript 2.1.x Activa 14+ 4.x+ 2.0.x Mantenimiento 14+ 4.x+ 1.x Fin de vida 12+ 3.x+"},{"location":"es/installation/","title":"Instalaci\u00f3n","text":"<p>Esta gu\u00eda le ayudar\u00e1 a instalar y configurar <code>@arcaelas/collection</code> en su proyecto.</p>"},{"location":"es/installation/#requisitos","title":"Requisitos","text":"<ul> <li>Node.js: 14.x o superior</li> <li>TypeScript: 4.x o superior (opcional, para proyectos TypeScript)</li> <li>Gestor de Paquetes: npm, yarn o pnpm</li> </ul>"},{"location":"es/installation/#instalacion-con-gestor-de-paquetes","title":"Instalaci\u00f3n con Gestor de Paquetes","text":""},{"location":"es/installation/#usando-npm","title":"Usando npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#usando-yarn","title":"Usando yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#usando-pnpm","title":"Usando pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"es/installation/#metodos-de-importacion","title":"M\u00e9todos de Importaci\u00f3n","text":""},{"location":"es/installation/#es-module-recomendado","title":"ES Module (Recomendado)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"es/installation/#importacion-nombrada","title":"Importaci\u00f3n Nombrada","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"es/installation/#configuracion-de-typescript","title":"Configuraci\u00f3n de TypeScript","text":"<p>Si est\u00e1 usando TypeScript, aseg\u00farese de que su <code>tsconfig.json</code> incluya la configuraci\u00f3n adecuada:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"es/installation/#verificar-instalacion","title":"Verificar Instalaci\u00f3n","text":"<p>Cree un archivo de prueba simple para verificar la instalaci\u00f3n:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Total:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"M\u00e1ximo:\", numbers.max(\"value\"));\nconsole.log(\"Primero:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Filtrado:\", filtered); // [3, 4, 5]\n</code></pre> <p>Ejecute la prueba:</p> <pre><code># Si usa TypeScript\nnpx ts-node test-collection.ts\n\n# Si usa JavaScript\nnode test-collection.js\n</code></pre>"},{"location":"es/installation/#tamano-del-bundle","title":"Tama\u00f1o del Bundle","text":"<p>La biblioteca es ligera y tree-shakeable:</p> <ul> <li>Minificado: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"es/installation/#compatibilidad-de-navegadores","title":"Compatibilidad de Navegadores","text":"<p><code>@arcaelas/collection</code> funciona en todos los navegadores modernos que soportan ES2020:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>Para navegadores m\u00e1s antiguos, use un transpilador como Babel.</p>"},{"location":"es/installation/#uso-con-cdn","title":"Uso con CDN","text":"<p>Tambi\u00e9n puede usar la biblioteca directamente desde un CDN:</p>"},{"location":"es/installation/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>Ahora que tiene <code>@arcaelas/collection</code> instalado, puede:</p> <ul> <li>Leer la gu\u00eda de Primeros Pasos</li> <li>Explorar Conceptos B\u00e1sicos</li> <li>Ver Ejemplos</li> <li>Navegar la Referencia de API</li> </ul>"},{"location":"es/advanced/extending-collection/","title":"Extendiendo Collection","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"es/advanced/performance/","title":"Rendimiento","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"es/advanced/typescript-usage/","title":"Uso con TypeScript","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"es/api/aggregation-methods/","title":"M\u00e9todos de Agregaci\u00f3n","text":""},{"location":"es/api/async-collection-class/","title":"Clase AsyncCollection","text":"<p>Referencia completa de la API para la clase AsyncCollection - un query builder diferido para crear abstracciones sobre cualquier fuente de datos.</p>"},{"location":"es/api/async-collection-class/#importacion","title":"Importaci\u00f3n","text":"<pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n</code></pre>"},{"location":"es/api/async-collection-class/#new-asynccollectiont-vexecutor-validators","title":"<code>new AsyncCollection&lt;T, V&gt;(executor, validators?)</code>","text":"<p>Crea una nueva instancia de AsyncCollection con una funci\u00f3n executor personalizada.</p> <p>Par\u00e1metros de Tipo:</p> <ul> <li><code>T</code> - Tipo de elementos en la colecci\u00f3n</li> <li><code>V</code> - Tipo de validadores personalizados (opcional)</li> </ul> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Requerido Descripci\u00f3n <code>executor</code> <code>Executor&lt;T, V&gt;</code> S\u00ed Funci\u00f3n que procesa operaciones y retorna resultados <code>validators</code> <code>V</code> No Validadores personalizados para extender operadores de consulta <p>Ejemplo:</p> <pre><code>const users = new AsyncCollection&lt;User&gt;(\n  async ({ operations, validators, metadata }) =&gt; {\n    console.log(`Procesando ${metadata.operation_count} operaciones`);\n    return await processOperations(operations);\n  }\n);\n</code></pre>"},{"location":"es/api/async-collection-class/#definiciones-de-tipos","title":"Definiciones de Tipos","text":""},{"location":"es/api/async-collection-class/#executort-v","title":"<code>Executor&lt;T, V&gt;</code>","text":"<p>Tipo de funci\u00f3n para el executor que procesa el contexto.</p> <pre><code>type Executor&lt;T = any, V = any&gt; = (\n  context: ExecutorContext&lt;T, V&gt;\n) =&gt; T | T[] | Promise&lt;T | T[]&gt;;\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li><code>context</code> - ExecutorContext conteniendo operaciones, validadores y metadatos</li> </ul> <p>Retorna:</p> <ul> <li>Un \u00fanico item <code>T</code>, array de items <code>T[]</code>, o Promise de cualquiera de los dos</li> </ul>"},{"location":"es/api/async-collection-class/#executorcontextt-v","title":"<code>ExecutorContext&lt;T, V&gt;</code>","text":"<p>Objeto de contexto pasado a la funci\u00f3n executor.</p> <pre><code>interface ExecutorContext&lt;T = any, V = any&gt; {\n  operations: [string, ...any[]][];\n  validators?: V;\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre> <p>Propiedades:</p> Propiedad Tipo Descripci\u00f3n <code>operations</code> <code>[string, ...any[]][]</code> Array de operaciones registradas en formato <code>[nombre_m\u00e9todo, ...args]</code> <code>validators</code> <code>V</code> Validadores personalizados proporcionados en el constructor <code>metadata.created_at</code> <code>Date</code> Marca de tiempo cuando se cre\u00f3 el contexto <code>metadata.operation_count</code> <code>Number</code> N\u00famero total de operaciones registradas <code>metadata.chain_depth</code> <code>Number</code> Profundidad de la cadena de m\u00e9todos (igual a operation_count)"},{"location":"es/api/async-collection-class/#implementacion-thenable","title":"Implementaci\u00f3n Thenable","text":"<p>AsyncCollection implementa la interfaz Thenable, haci\u00e9ndola awaitable.</p>"},{"location":"es/api/async-collection-class/#thenonfulfilled-onrejected","title":"<code>then(onfulfilled?, onrejected?)</code>","text":"<p>Implementa Promise.then() para ejecuci\u00f3n as\u00edncrona.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>onfulfilled</code> <code>(value: any) =&gt; TResult1</code> Callback opcional cuando se resuelve <code>onrejected</code> <code>(reason: any) =&gt; TResult2</code> Callback opcional cuando se rechaza <p>Retorna: <code>Promise&lt;TResult1 | TResult2&gt;</code></p> <p>Ejemplo:</p> <pre><code>users\n  .where('active', true)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n\n// O con await\nconst results = await users.where('active', true);\n</code></pre>"},{"location":"es/api/async-collection-class/#catchonrejected","title":"<code>catch(onrejected?)</code>","text":"<p>Implementa Promise.catch() para manejo de errores.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>onrejected</code> <code>(reason: any) =&gt; TResult</code> Manejador de errores opcional <p>Retorna: <code>Promise&lt;TResult&gt;</code></p> <p>Ejemplo:</p> <pre><code>users\n  .where('age', '&gt;=', 18)\n  .catch(error =&gt; {\n    console.error('Consulta fallida:', error);\n    return [];\n  });\n</code></pre>"},{"location":"es/api/async-collection-class/#finallyonfinally","title":"<code>finally(onfinally?)</code>","text":"<p>Implementa Promise.finally() para limpieza.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>onfinally</code> <code>() =&gt; void</code> Callback de limpieza opcional <p>Retorna: <code>Promise&lt;any&gt;</code></p> <p>Ejemplo:</p> <pre><code>users\n  .where('active', true)\n  .finally(() =&gt; {\n    console.log('Consulta completada');\n  });\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-filtrado","title":"M\u00e9todos de Filtrado","text":""},{"location":"es/api/async-collection-class/#wherekey-operator-value","title":"<code>where(key, operator, value)</code>","text":"<p>Filtra la colecci\u00f3n usando operador where con comparaciones.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>key</code> <code>string</code> Clave del campo a comparar (soporta notaci\u00f3n de punto) <code>operator</code> <code>string</code> Operador de comparaci\u00f3n opcional: <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>in</code>, <code>includes</code> <code>value</code> <code>any</code> Valor a comparar <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.where('age', '&gt;=', 18)\nusers.where('status', 'active')  // operador '=' por defecto\nusers.where('user.profile.verified', true)\n</code></pre>"},{"location":"es/api/async-collection-class/#wherenotkey-operator-value","title":"<code>whereNot(key, operator, value)</code>","text":"<p>Filtro inverso - excluye elementos coincidentes.</p> <p>Par\u00e1metros: Igual que <code>where()</code></p> <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.whereNot('deleted', true)\nusers.whereNot('age', '&lt;', 18)\n</code></pre>"},{"location":"es/api/async-collection-class/#filterhandler","title":"<code>filter(handler)</code>","text":"<p>Filtra elementos usando una funci\u00f3n u objeto Query.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object</code> Funci\u00f3n de filtro u objeto de consulta <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.filter(user =&gt; user.age &gt;= 18)\nusers.filter({ age: { $gte: 18 }, status: 'active' })\n</code></pre>"},{"location":"es/api/async-collection-class/#nothandler","title":"<code>not(handler)</code>","text":"<p>Filtro inverso - excluye elementos coincidentes.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object</code> Funci\u00f3n de filtro u objeto de consulta <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.not(user =&gt; user.deleted)\nusers.not({ deleted: true })\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-busqueda","title":"M\u00e9todos de B\u00fasqueda","text":""},{"location":"es/api/async-collection-class/#firsthandler","title":"<code>first(handler?)</code>","text":"<p>Obtiene el primer elemento que coincide con el criterio.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object</code> Funci\u00f3n de filtro u objeto de consulta opcional <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.where('age', '&gt;=', 18).first()\nusers.first(user =&gt; user.active)\nusers.first({ status: 'active' })\n</code></pre>"},{"location":"es/api/async-collection-class/#lasthandler","title":"<code>last(handler?)</code>","text":"<p>Obtiene el \u00faltimo elemento que coincide con el criterio.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object</code> Funci\u00f3n de filtro u objeto de consulta opcional <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.where('age', '&gt;=', 18).last()\nusers.last(user =&gt; user.active)\n</code></pre>"},{"location":"es/api/async-collection-class/#findhandler","title":"<code>find(handler)</code>","text":"<p>Busca el primer elemento que coincide con el criterio (alias de <code>first()</code>).</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object</code> Funci\u00f3n de filtro u objeto de consulta <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.find(user =&gt; user.email === 'test@example.com')\nusers.find({ email: 'test@example.com' })\n</code></pre>"},{"location":"es/api/async-collection-class/#everyhandler-value","title":"<code>every(handler, value?)</code>","text":"<p>Verifica que todos los elementos cumplan el criterio.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>Function \\| Object \\| string</code> Funci\u00f3n de validaci\u00f3n, objeto de consulta o clave string <code>value</code> <code>any</code> Valor opcional a comparar (cuando handler es string) <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.every(user =&gt; user.age &gt;= 18)\nusers.every({ active: true })\nusers.every('status', 'active')\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-transformacion","title":"M\u00e9todos de Transformaci\u00f3n","text":""},{"location":"es/api/async-collection-class/#maphandler","title":"<code>map(handler)</code>","text":"<p>Transforma cada elemento usando una funci\u00f3n de mapeo.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>(item: T, index: number, arr: T[]) =&gt; any</code> Funci\u00f3n de transformaci\u00f3n <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.map(user =&gt; ({ ...user, displayName: `${user.name} (${user.age})` }))\nusers.map(user =&gt; user.email)\n</code></pre>"},{"location":"es/api/async-collection-class/#eachfn","title":"<code>each(fn)</code>","text":"<p>Itera sobre cada elemento ejecutando un callback.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>fn</code> <code>(item: T, index: number, arr: T[]) =&gt; any</code> Callback para cada elemento (retorna <code>false</code> para detener) <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.each((user, index) =&gt; {\n  console.log(user);\n  if (index &gt;= 10) return false; // Detener despu\u00e9s de 10\n})\n</code></pre>"},{"location":"es/api/async-collection-class/#forgetkeys","title":"<code>forget(...keys)</code>","text":"<p>Elimina campos espec\u00edficos de cada elemento.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>keys</code> <code>string[]</code> Claves de campos a eliminar <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.forget('password', 'token')\nusers.forget('secret', 'internal_id')\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-ordenamiento","title":"M\u00e9todos de Ordenamiento","text":""},{"location":"es/api/async-collection-class/#sorthandler-direction","title":"<code>sort(handler?, direction?)</code>","text":"<p>Ordena elementos por clave o funci\u00f3n comparadora.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>string \\| ((a: T, b: T) =&gt; number)</code> Clave del campo o funci\u00f3n comparadora <code>direction</code> <code>'asc' \\| 'desc'</code> Direcci\u00f3n del ordenamiento (cuando handler es string) <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.sort('price', 'desc')\nusers.sort((a, b) =&gt; a.price - b.price)\n</code></pre>"},{"location":"es/api/async-collection-class/#reverse","title":"<code>reverse()</code>","text":"<p>Invierte el orden de los elementos.</p> <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.reverse()\n</code></pre>"},{"location":"es/api/async-collection-class/#shuffle","title":"<code>shuffle()</code>","text":"<p>Desordena aleatoriamente los elementos.</p> <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.shuffle()\n</code></pre>"},{"location":"es/api/async-collection-class/#randomlength","title":"<code>random(length?)</code>","text":"<p>Obtiene elementos aleatorios de la colecci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Por Defecto Descripci\u00f3n <code>length</code> <code>number</code> <code>Infinity</code> N\u00famero de elementos aleatorios a obtener <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.random(5)  // Obtener 5 usuarios aleatorios\nusers.random()   // Obtener todos en orden aleatorio\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-fragmentacion-y-paginacion","title":"M\u00e9todos de Fragmentaci\u00f3n y Paginaci\u00f3n","text":""},{"location":"es/api/async-collection-class/#slicestart-end","title":"<code>slice(start, end?)</code>","text":"<p>Obtiene un fragmento de la colecci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>start</code> <code>number</code> \u00cdndice de inicio <code>end</code> <code>number</code> \u00cdndice de fin opcional <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.slice(0, 10)   // Primeros 10\nusers.slice(10, 20)  // Items 10-20\nusers.slice(5)       // Desde \u00edndice 5 hasta el final\n</code></pre>"},{"location":"es/api/async-collection-class/#chunksize","title":"<code>chunk(size)</code>","text":"<p>Divide la colecci\u00f3n en bloques de tama\u00f1o especificado.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>size</code> <code>number</code> Tama\u00f1o de cada bloque <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.chunk(10)  // Dividir en grupos de 10\n</code></pre>"},{"location":"es/api/async-collection-class/#paginatepage-perpage","title":"<code>paginate(page?, perPage?)</code>","text":"<p>Pagina los resultados.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Por Defecto Descripci\u00f3n <code>page</code> <code>number</code> <code>1</code> N\u00famero de p\u00e1gina (basado en 1) <code>perPage</code> <code>number</code> <code>20</code> Items por p\u00e1gina <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.paginate(1, 20)  // Primera p\u00e1gina, 20 items\nusers.paginate(2, 50)  // Segunda p\u00e1gina, 50 items\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-agregacion","title":"M\u00e9todos de Agregaci\u00f3n","text":""},{"location":"es/api/async-collection-class/#sumhandler","title":"<code>sum(handler)</code>","text":"<p>Suma valores de una clave o funci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; number)</code> Clave del campo o funci\u00f3n que retorna valor num\u00e9rico <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.sum('price')\nusers.sum(user =&gt; user.price * user.quantity)\n</code></pre>"},{"location":"es/api/async-collection-class/#maxkey","title":"<code>max(key)</code>","text":"<p>Obtiene el valor m\u00e1ximo de una clave.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>key</code> <code>string</code> Clave del campo <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.max('age')\nusers.max('score')\n</code></pre>"},{"location":"es/api/async-collection-class/#minkey","title":"<code>min(key)</code>","text":"<p>Obtiene el valor m\u00ednimo de una clave.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>key</code> <code>string</code> Clave del campo <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.min('age')\nusers.min('price')\n</code></pre>"},{"location":"es/api/async-collection-class/#groupbyhandler","title":"<code>groupBy(handler)</code>","text":"<p>Agrupa elementos por clave o funci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; string \\| number)</code> Clave del campo o funci\u00f3n de agrupaci\u00f3n <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.groupBy('category')\nusers.groupBy(user =&gt; user.date.getFullYear())\n</code></pre>"},{"location":"es/api/async-collection-class/#countbyhandler","title":"<code>countBy(handler)</code>","text":"<p>Cuenta elementos agrupados por clave o funci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; string \\| number)</code> Clave del campo o funci\u00f3n de agrupaci\u00f3n <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.countBy('status')  // { active: 10, inactive: 5 }\nusers.countBy(user =&gt; user.age &gt;= 18 ? 'adult' : 'minor')\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-utilitarios","title":"M\u00e9todos Utilitarios","text":""},{"location":"es/api/async-collection-class/#uniquehandler","title":"<code>unique(handler)</code>","text":"<p>Obtiene solo elementos \u00fanicos por clave o funci\u00f3n.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>handler</code> <code>string \\| ((item: T, index: number, arr: T[]) =&gt; any)</code> Clave del campo o funci\u00f3n que retorna identificador \u00fanico <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.unique('email')\nusers.unique(user =&gt; user.user_id)\n</code></pre>"},{"location":"es/api/async-collection-class/#updatewhere-set","title":"<code>update(where, set?)</code>","text":"<p>Actualiza elementos que coinciden con un criterio.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>where</code> <code>Object \\| Function</code> Objeto de consulta o funci\u00f3n de filtro (opcional) <code>set</code> <code>Object \\| Function</code> Campos a actualizar o funci\u00f3n de actualizaci\u00f3n <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.update({ active: false }, { deletedAt: new Date() })\nusers.update({ deletedAt: new Date() })  // Actualizar todos\n</code></pre>"},{"location":"es/api/async-collection-class/#deletewhere","title":"<code>delete(where)</code>","text":"<p>Elimina elementos que coinciden con un criterio.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>where</code> <code>Object \\| Function</code> Objeto de consulta o funci\u00f3n de filtro <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.delete({ deleted: true })\nusers.delete(user =&gt; user.inactive)\n</code></pre>"},{"location":"es/api/async-collection-class/#collectitems","title":"<code>collect(items?)</code>","text":"<p>Clona el contexto actual con items opcionales.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>items</code> <code>T[]</code> Items opcionales para nueva colecci\u00f3n <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.collect([...newData])\nusers.collect()  // Clonar sin items\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-debugging","title":"M\u00e9todos de Debugging","text":""},{"location":"es/api/async-collection-class/#dump","title":"<code>dump()</code>","text":"<p>Imprime la colecci\u00f3n en consola para debugging.</p> <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users\n  .filter({ active: true })\n  .dump()  // Imprime en consola\n  .sort('age', 'desc');\n</code></pre>"},{"location":"es/api/async-collection-class/#dd","title":"<code>dd()</code>","text":"<p>Imprime la colecci\u00f3n y termina el proceso (solo Node.js).</p> <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.dd();  // Imprime y sale\n</code></pre>"},{"location":"es/api/async-collection-class/#stringifyreplacer-space","title":"<code>stringify(replacer?, space?)</code>","text":"<p>Convierte la colecci\u00f3n a string JSON.</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>replacer</code> <code>(key: string, value: any) =&gt; any</code> Funci\u00f3n replacer de JSON opcional <code>space</code> <code>string \\| number</code> Espaciado opcional para formato <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.stringify(null, 2)  // JSON con formato\nusers.stringify()         // JSON compacto\n</code></pre>"},{"location":"es/api/async-collection-class/#metodos-de-extension","title":"M\u00e9todos de Extensi\u00f3n","text":""},{"location":"es/api/async-collection-class/#macrokey-handler","title":"<code>macro(key, handler)</code>","text":"<p>Registra un macro personalizado (extensi\u00f3n de m\u00e9todo).</p> <p>Par\u00e1metros:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>key</code> <code>string</code> Nombre del m\u00e9todo personalizado <code>handler</code> <code>Function</code> Implementaci\u00f3n del m\u00e9todo personalizado <p>Retorna: <code>this</code> (encadenable)</p> <p>Ejemplo:</p> <pre><code>users.macro('activeOnly', function() {\n  return this.where('status', 'active');\n})\n\n// Uso\nawait users.activeOnly();\n</code></pre>"},{"location":"es/api/async-collection-class/#ejemplos-de-uso","title":"Ejemplos de Uso","text":""},{"location":"es/api/async-collection-class/#con-prisma","title":"Con Prisma","text":"<pre><code>const users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const where: any = {};\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, op, val] = args.length === 3 ? args : [args[0], '=', args[1]];\n      where[key] = op === '&gt;=' ? { gte: val } : val;\n    }\n  });\n  return await prisma.user.findMany({ where });\n});\n\nawait users.where('age', '&gt;=', 18);\n</code></pre>"},{"location":"es/api/async-collection-class/#con-typeorm","title":"Con TypeORM","text":"<pre><code>const users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      qb.andWhere(`user.${args[0]} = :${args[0]}`, { [args[0]]: args[1] });\n    }\n  });\n  return await qb.getMany();\n});\n\nawait users.where('status', 'active');\n</code></pre>"},{"location":"es/api/async-collection-class/#con-api-rest","title":"Con API REST","text":"<pre><code>const api = new AsyncCollection(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      params.append(args[0], args[1]);\n    }\n  });\n  const response = await fetch(`/api/users?${params}`);\n  return await response.json();\n});\n\nawait api.where('status', 'active');\n</code></pre>"},{"location":"es/api/async-collection-class/#ver-tambien","title":"Ver Tambi\u00e9n","text":"<ul> <li>Gu\u00eda de AsyncCollection - Introducci\u00f3n y conceptos</li> <li>Ejemplos de Uso - Ejemplos del mundo real</li> <li>Uso con TypeScript - Patrones de seguridad de tipos</li> </ul>"},{"location":"es/api/collection-class/","title":"Clase Collection","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"es/api/filtering-methods/","title":"M\u00e9todos de Filtrado","text":""},{"location":"es/api/transformation-methods/","title":"M\u00e9todos de Transformaci\u00f3n","text":""},{"location":"es/api/utility-methods/","title":"M\u00e9todos Utilitarios","text":""},{"location":"es/examples/advanced-patterns/","title":"Patrones Avanzados","text":"<p>Advanced patterns and techniques.</p>"},{"location":"es/examples/aggregation/","title":"Agregaci\u00f3n","text":"<p>Examples of aggregation operations.</p> <pre><code>const totalRevenue = orders.sum('total');\nconst avgOrderValue = orders.sum('total') / orders.length;\nconst byStatus = orders.groupBy('status');\n</code></pre>"},{"location":"es/examples/async-collection-usage/","title":"Ejemplos de Uso de AsyncCollection","text":"<p>Ejemplos del mundo real de uso de AsyncCollection con diferentes fuentes de datos y patrones.</p>"},{"location":"es/examples/async-collection-usage/#tabla-de-contenidos","title":"Tabla de Contenidos","text":"<ul> <li>Ejemplo B\u00e1sico en Memoria</li> <li>Integraci\u00f3n con Prisma ORM</li> <li>Integraci\u00f3n con TypeORM</li> <li>Integraci\u00f3n con Sequelize</li> <li>Wrapper de API REST</li> <li>Constructor de Consultas GraphQL</li> <li>Validadores Personalizados</li> <li>Cadenas de Consultas Complejas</li> <li>Patrones de Manejo de Errores</li> </ul>"},{"location":"es/examples/async-collection-usage/#ejemplo-basico-en-memoria","title":"Ejemplo B\u00e1sico en Memoria","text":"<p>Executor simple para filtrar datos en memoria:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n  status: 'active' | 'inactive';\n}\n\nconst data: User[] = [\n  { id: 1, name: \"Alice\", email: \"alice@example.com\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", email: \"bob@example.com\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", email: \"charlie@example.com\", age: 35, status: \"active\" }\n];\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        const itemValue = item[key as keyof User];\n\n        switch (operator) {\n          case '=': return itemValue === value;\n          case '!=': return itemValue !== value;\n          case '&gt;': return itemValue &gt; value;\n          case '&lt;': return itemValue &lt; value;\n          case '&gt;=': return itemValue &gt;= value;\n          case '&lt;=': return itemValue &lt;= value;\n          default: return true;\n        }\n      });\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      results.sort((a, b) =&gt; {\n        const aVal = a[key as keyof User];\n        const bVal = b[key as keyof User];\n        const comparison = aVal &gt; bVal ? 1 : aVal &lt; bVal ? -1 : 0;\n        return direction === 'desc' ? -comparison : comparison;\n      });\n    }\n\n    if (method === 'first') {\n      results = results.length &gt; 0 ? [results[0]] : [];\n    }\n  });\n\n  return results;\n});\n\n// Uso\nconst activeUsers = await users.where('status', 'active');\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\nconst sorted = await users.sort('age', 'desc');\n</code></pre>"},{"location":"es/examples/async-collection-usage/#integracion-con-prisma-orm","title":"Integraci\u00f3n con Prisma ORM","text":"<p>Integraci\u00f3n completa de Prisma con construcci\u00f3n avanzada de consultas:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient, User, Prisma } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations, metadata }) =&gt; {\n  let where: Prisma.UserWhereInput = {};\n  let orderBy: Prisma.UserOrderByWithRelationInput | undefined;\n  let take: number | undefined;\n  let skip: number | undefined;\n\n  console.log(`Construyendo consulta Prisma con ${metadata.operation_count} operaciones`);\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildWhereCondition(key, operator, value);\n      where = { ...where, ...condition };\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = { [key]: direction };\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      skip = (page - 1) * perPage;\n      take = perPage;\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await prisma.user.findFirst({ where, orderBy });\n    return result ? [result] : [];\n  }\n\n  return await prisma.user.findMany({ where, orderBy, take, skip });\n});\n\nfunction buildWhereCondition(\n  key: string,\n  operator: string,\n  value: any\n): Prisma.UserWhereInput {\n  switch (operator) {\n    case '=': return { [key]: value };\n    case '!=': return { [key]: { not: value } };\n    case '&gt;': return { [key]: { gt: value } };\n    case '&lt;': return { [key]: { lt: value } };\n    case '&gt;=': return { [key]: { gte: value } };\n    case '&lt;=': return { [key]: { lte: value } };\n    case 'in': return { [key]: { in: value } };\n    case 'includes': return { [key]: { contains: value } };\n    default: return { [key]: value };\n  }\n}\n\n// Ejemplos de uso\nconst activeVerified = await users\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .sort('createdAt', 'desc')\n  .slice(0, 10);\n\nconst firstUser = await users\n  .where('email', 'includes', '@example.com')\n  .first();\n\nconst page2 = await users\n  .where('status', 'active')\n  .paginate(2, 50);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#integracion-con-typeorm","title":"Integraci\u00f3n con TypeORM","text":"<p>Construyendo TypeORM QueryBuilder desde operaciones:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n  let paramIndex = 0;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `param${paramIndex++}`;\n      const column = `user.${key}`;\n\n      switch (operator) {\n        case '=':\n          qb.andWhere(`${column} = :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&gt;=':\n          qb.andWhere(`${column} &gt;= :${paramKey}`, { [paramKey]: value });\n          break;\n        case 'in':\n          qb.andWhere(`${column} IN (:...${paramKey})`, { [paramKey]: value });\n          break;\n        case 'includes':\n          qb.andWhere(`${column} LIKE :${paramKey}`, { [paramKey]: `%${value}%` });\n          break;\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      qb.orderBy(`user.${key}`, direction.toUpperCase() as 'ASC' | 'DESC');\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      qb.skip((page - 1) * perPage);\n      qb.take(perPage);\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await qb.getOne();\n    return result ? [result] : [];\n  }\n\n  return await qb.getMany();\n});\n\n// Uso\nconst results = await users\n  .where('age', '&gt;=', 21)\n  .where('country', 'USA')\n  .sort('createdAt', 'desc')\n  .slice(0, 20);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#integracion-con-sequelize","title":"Integraci\u00f3n con Sequelize","text":"<p>Trabajando con Sequelize ORM:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { Op } from \"sequelize\";\nimport { User } from \"./models/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const where: any = {};\n  let order: any[] = [];\n  let limit: number | undefined;\n  let offset: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildSequelizeCondition(operator, value);\n      where[key] = condition;\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      order.push([key, direction.toUpperCase()]);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      offset = (page - 1) * perPage;\n      limit = perPage;\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await User.findOne({ where, order });\n    return result ? [result] : [];\n  }\n\n  return await User.findAll({ where, order, limit, offset });\n});\n\nfunction buildSequelizeCondition(operator: string, value: any) {\n  switch (operator) {\n    case '=': return value;\n    case '!=': return { [Op.ne]: value };\n    case '&gt;': return { [Op.gt]: value };\n    case '&gt;=': return { [Op.gte]: value };\n    case '&lt;=': return { [Op.lte]: value };\n    case 'in': return { [Op.in]: value };\n    case 'includes': return { [Op.like]: `%${value}%` };\n    default: return value;\n  }\n}\n\n// Uso\nconst results = await users\n  .where('status', 'active')\n  .where('age', '&gt;=', 18)\n  .sort('name', 'asc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#wrapper-de-api-rest","title":"Wrapper de API REST","text":"<p>Creando un cliente API con AsyncCollection:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface ApiUser {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst apiUsers = new AsyncCollection&lt;ApiUser&gt;(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '=') {\n        params.append(key, String(value));\n      } else if (operator === 'includes') {\n        params.append(`${key}_like`, String(value));\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      params.append('_sort', key);\n      params.append('_order', direction);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      params.append('_page', String(page));\n      params.append('_limit', String(perPage));\n    }\n  });\n\n  const url = `/api/users?${params.toString()}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`Error en API: ${response.statusText}`);\n  }\n\n  return await response.json();\n});\n\n// Uso\nconst users = await apiUsers\n  .where('status', 'active')\n  .where('name', 'includes', 'John')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#constructor-de-consultas-graphql","title":"Constructor de Consultas GraphQL","text":"<p>Construyendo consultas GraphQL din\u00e1micamente:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { GraphQLClient } from \"graphql-request\";\n\nconst client = new GraphQLClient('https://api.example.com/graphql');\n\nconst gqlUsers = new AsyncCollection(async ({ operations }) =&gt; {\n  const filters: string[] = [];\n  let orderBy: string | undefined;\n  let limit: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const gqlOperator = mapToGQLOperator(operator);\n      filters.push(`${key}: { ${gqlOperator}: \"${value}\" }`);\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = `${key}: ${direction.toUpperCase()}`;\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      limit = perPage;\n    }\n  });\n\n  const whereClause = filters.length &gt; 0 ? `where: { ${filters.join(', ')} }` : '';\n  const orderClause = orderBy ? `orderBy: { ${orderBy} }` : '';\n  const limitClause = limit ? `take: ${limit}` : '';\n\n  const args = [whereClause, orderClause, limitClause]\n    .filter(Boolean)\n    .join(', ');\n\n  const query = `\n    query {\n      users${args ? `(${args})` : ''} {\n        id name email createdAt\n      }\n    }\n  `;\n\n  const response = await client.request(query);\n  return response.users;\n});\n\nfunction mapToGQLOperator(operator: string): string {\n  const mapping: Record&lt;string, string&gt; = {\n    '=': 'equals',\n    '!=': 'not',\n    '&gt;': 'gt',\n    '&gt;=': 'gte',\n    'includes': 'contains',\n  };\n  return mapping[operator] || 'equals';\n}\n\n// Uso\nconst users = await gqlUsers\n  .where('status', 'active')\n  .sort('name', 'asc')\n  .paginate(1, 10);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#validadores-personalizados","title":"Validadores Personalizados","text":"<p>Patrones avanzados de validadores personalizados:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst customValidators = {\n  // Validadores de fecha\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  $isFuture(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isFuture = date &gt; new Date();\n      return value ? isFuture : !isFuture;\n    };\n  },\n\n  // Validadores num\u00e9ricos\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  },\n\n  // Validadores de cadena\n  $matches(ref: string, regex: RegExp) {\n    return (item: any) =&gt; {\n      return regex.test(String(item[ref]));\n    };\n  },\n\n  // Validadores de array\n  $hasLength(ref: string, length: number) {\n    return (item: any) =&gt; {\n      return Array.isArray(item[ref]) &amp;&amp; item[ref].length === length;\n    };\n  },\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    let results = [...data];\n\n    operations.forEach(([method, ...args]) =&gt; {\n      if (method === 'filter' &amp;&amp; typeof args[0] === 'object') {\n        const query = args[0];\n        results = results.filter(item =&gt; {\n          return Object.entries(query).every(([key, condition]) =&gt; {\n            if (typeof condition === 'object') {\n              return Object.entries(condition).every(([operator, value]) =&gt; {\n                if (validators &amp;&amp; operator in validators) {\n                  const validator = validators[operator];\n                  const validatorFn = validator(key, value);\n                  return validatorFn(item);\n                }\n                return true;\n              });\n            }\n            return item[key] === condition;\n          });\n        });\n      }\n    });\n\n    return results;\n  },\n  customValidators\n);\n\n// Uso\nconst results = await items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] },\n  email: { $matches: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/i },\n  tags: { $hasLength: 3 },\n});\n</code></pre>"},{"location":"es/examples/async-collection-usage/#cadenas-de-consultas-complejas","title":"Cadenas de Consultas Complejas","text":"<p>Construyendo consultas complejas de m\u00faltiples pasos:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst userSearch = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  console.log(`Construyendo consulta compleja: ${metadata.operation_count} operaciones`);\n\n  // Extraer y organizar operaciones\n  const where_ops = operations.filter(([m]) =&gt; m === 'where' || m === 'whereNot');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n  const terminal_ops = operations.filter(([m]) =&gt; ['first', 'last'].includes(m));\n\n  // Construir condiciones where\n  const where: any = { AND: [] };\n  where_ops.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push(condition);\n    } else if (method === 'whereNot') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push({ NOT: condition });\n    }\n  });\n\n  // Construir orden\n  const orderBy = sort_ops.map(([_, key, direction]) =&gt; ({\n    [key]: direction || 'asc',\n  }));\n\n  // Ejecutar consulta basada en operaci\u00f3n terminal\n  if (terminal_ops.length &gt; 0 &amp;&amp; terminal_ops[0][0] === 'first') {\n    const result = await prisma.user.findFirst({\n      where: where.AND.length &gt; 0 ? where : undefined,\n      orderBy,\n    });\n    return result ? [result] : [];\n  }\n\n  return await prisma.user.findMany({\n    where: where.AND.length &gt; 0 ? where : undefined,\n    orderBy,\n  });\n});\n\n// Uso: B\u00fasqueda compleja\nconst results = await userSearch\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .where('age', '&lt;=', 65)\n  .whereNot('deleted', true)\n  .whereNot('banned', true)\n  .sort('score', 'desc')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"es/examples/async-collection-usage/#patrones-de-manejo-de-errores","title":"Patrones de Manejo de Errores","text":"<p>Manejo robusto de errores en executors:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nclass QueryError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'QueryError';\n  }\n}\n\nconst users = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  try {\n    // Validar operaciones\n    const unsupported = operations.find(([method]) =&gt;\n      !['where', 'sort', 'first', 'slice'].includes(method)\n    );\n\n    if (unsupported) {\n      throw new QueryError(\n        `Operaci\u00f3n no soportada: ${unsupported[0]}`,\n        'UNSUPPORTED_OPERATION'\n      );\n    }\n\n    // Construir consulta\n    const query = buildQuery(operations);\n\n    // Ejecutar con timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() =&gt; controller.abort(), 5000);\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        body: JSON.stringify(query),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new QueryError(\n          `Error de API: ${response.statusText}`,\n          'API_ERROR'\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new QueryError('Tiempo de consulta excedido', 'TIMEOUT');\n      }\n      throw error;\n    }\n  } catch (error) {\n    console.error('Ejecuci\u00f3n de consulta fall\u00f3:', {\n      error,\n      operations,\n      metadata,\n    });\n\n    if (error instanceof QueryError) {\n      throw error;\n    }\n\n    throw new QueryError(\n      `Error inesperado: ${error.message}`,\n      'UNEXPECTED_ERROR'\n    );\n  }\n});\n\n// Uso con manejo de errores\ntry {\n  const results = await users\n    .where('age', '&gt;=', 18)\n    .sort('name', 'asc');\n} catch (error) {\n  if (error instanceof QueryError) {\n    switch (error.code) {\n      case 'TIMEOUT':\n        console.error('La consulta tom\u00f3 demasiado tiempo');\n        break;\n      case 'UNSUPPORTED_OPERATION':\n        console.error('Operaci\u00f3n inv\u00e1lida usada');\n        break;\n      case 'API_ERROR':\n        console.error('La API retorn\u00f3 un error');\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"es/examples/async-collection-usage/#ver-tambien","title":"Ver Tambi\u00e9n","text":"<ul> <li>Gu\u00eda de AsyncCollection</li> <li>Referencia de API</li> <li>Uso con TypeScript</li> </ul>"},{"location":"es/examples/basic-usage/","title":"Uso B\u00e1sico","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"es/examples/filtering-sorting/","title":"Filtrado y Ordenamiento","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"es/guides/aggregation-methods/","title":"M\u00e9todos de Agregaci\u00f3n","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"es/guides/async-collection/","title":"Gu\u00eda de AsyncCollection","text":"<p>\u00a1Bienvenido a la gu\u00eda de AsyncCollection! Esta gu\u00eda introduce el patr\u00f3n de query builder diferido para crear abstracciones sobre cualquier fuente de datos, incluyendo ORMs, APIs REST, GraphQL y m\u00e1s.</p>"},{"location":"es/guides/async-collection/#que-es-asynccollection","title":"\u00bfQu\u00e9 es AsyncCollection?","text":"<p>AsyncCollection implementa un patr\u00f3n de Query Builder que construye un \"plan de consulta\" (array de operaciones) que se ejecuta cuando la promesa se resuelve. Esto permite crear abstracciones poderosas sobre cualquier fuente de datos transformando las operaciones al formato espec\u00edfico requerido por tu ORM o API.</p>"},{"location":"es/guides/async-collection/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Ejecuci\u00f3n Diferida: Las operaciones se registran pero no se ejecutan hasta que usas await o llamas <code>.then()</code></li> <li>Agn\u00f3stico de ORM: Funciona con Prisma, TypeORM, Sequelize, Mongoose o cualquier fuente de datos</li> <li>Seguridad de Tipos: Soporte completo de TypeScript con gen\u00e9ricos</li> <li>Encadenable: Interfaz fluida para construir consultas complejas</li> <li>Flexible: Transforma operaciones para coincidir con el formato de tu fuente de datos</li> </ul>"},{"location":"es/guides/async-collection/#cuando-usar-asynccollection","title":"Cu\u00e1ndo Usar AsyncCollection","text":"<p>Usa AsyncCollection cuando necesites:</p> <ul> <li>Crear abstracciones sobre ORMs de base de datos</li> <li>Construir interfaces de consulta reutilizables para APIs REST</li> <li>Implementar capas de acceso a datos personalizadas</li> <li>Unificar diferentes fuentes de datos bajo una interfaz com\u00fan</li> <li>Diferir la ejecuci\u00f3n de consultas hasta que se apliquen todos los filtros</li> </ul>"},{"location":"es/guides/async-collection/#conceptos-basicos","title":"Conceptos B\u00e1sicos","text":""},{"location":"es/guides/async-collection/#la-funcion-executor","title":"La Funci\u00f3n Executor","text":"<p>El executor es el n\u00facleo de AsyncCollection. Recibe un contexto que contiene todas las operaciones y devuelve los resultados:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst executor = async ({ operations, validators, metadata }) =&gt; {\n  // operations: Array de [nombre_metodo, ...args]\n  // validators: Validadores personalizados (opcional)\n  // metadata: Info de la consulta (created_at, operation_count, chain_depth)\n\n  console.log(`Procesando ${metadata.operation_count} operaciones`);\n\n  // Transforma operaciones a tu formato\n  // Ejecuta la consulta\n  // Retorna resultados\n\n  return results;\n};\n\nconst collection = new AsyncCollection(executor);\n</code></pre>"},{"location":"es/guides/async-collection/#registro-de-operaciones","title":"Registro de Operaciones","text":"<p>Cuando encadenas m\u00e9todos, se registran como operaciones:</p> <pre><code>const users = new AsyncCollection(executor);\n\n// Estas operaciones se registran pero NO se ejecutan a\u00fan\nusers\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .sort('name', 'asc');\n\n// La ejecuci\u00f3n ocurre aqu\u00ed (cuando la promesa se resuelve)\nconst results = await users;\n</code></pre>"},{"location":"es/guides/async-collection/#executorcontext","title":"ExecutorContext","text":"<p>El contexto pasado a tu executor contiene:</p> <pre><code>interface ExecutorContext&lt;T, V&gt; {\n  // Array de operaciones: [nombre_metodo, ...args]\n  operations: [string, ...any[]][];\n\n  // Validadores personalizados para query()\n  validators?: V;\n\n  // Metadata sobre la consulta\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre>"},{"location":"es/guides/async-collection/#ejemplo-simple-array-en-memoria","title":"Ejemplo Simple: Array en Memoria","text":"<p>Comencemos con un ejemplo simple usando un array en memoria:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\n// Datos en memoria\nconst data = [\n  { id: 1, name: \"Alice\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", age: 35, status: \"active\" }\n];\n\n// Executor simple\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        if (operator === '&gt;=') return item[key] &gt;= value;\n        if (operator === '=') return item[key] === value;\n        return true;\n      });\n    }\n\n    if (method === 'first') {\n      results = [results[0]];\n    }\n  });\n\n  return results;\n});\n\n// \u00dasalo\nconst active = await users.where('status', 'active');\n// [{ id: 1, ... }, { id: 3, ... }]\n\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\n// { id: 1, name: \"Alice\", ... }\n</code></pre>"},{"location":"es/guides/async-collection/#trabajando-con-prisma","title":"Trabajando con Prisma","text":"<p>Transforma operaciones a consultas de Prisma:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const where: any = {};\n  let orderBy: any = undefined;\n  let take: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '&gt;=') where[key] = { gte: value };\n      else if (operator === '&gt;') where[key] = { gt: value };\n      else if (operator === '=') where[key] = value;\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      orderBy = { [key]: direction || 'asc' };\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await prisma.user.findFirst({ where, orderBy });\n  }\n\n  return await prisma.user.findMany({ where, orderBy, take });\n});\n\n// \u00dasalo como Collection\nconst active = await users\n  .where('age', '&gt;=', 18)\n  .where('verified', true)\n  .sort('createdAt', 'desc');\n\nconst firstUser = await users\n  .where('status', 'active')\n  .first();\n</code></pre>"},{"location":"es/guides/async-collection/#trabajando-con-typeorm","title":"Trabajando con TypeORM","text":"<p>Construye TypeORM QueryBuilder desde operaciones:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `${key}_${Math.random()}`;\n\n      if (operator === '&gt;=') {\n        qb.andWhere(`user.${key} &gt;= :${paramKey}`, { [paramKey]: value });\n      } else if (operator === '=') {\n        qb.andWhere(`user.${key} = :${paramKey}`, { [paramKey]: value });\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      qb.orderBy(`user.${key}`, direction?.toUpperCase() || 'ASC');\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await qb.getOne();\n  }\n\n  return await qb.getMany();\n});\n\n// Encadena operaciones\nconst result = await users\n  .where('age', '&gt;=', 21)\n  .where('status', 'active')\n  .sort('name', 'asc');\n</code></pre>"},{"location":"es/guides/async-collection/#validadores-personalizados","title":"Validadores Personalizados","text":"<p>Extiende las capacidades de consulta con validadores personalizados:</p> <pre><code>const customValidators = {\n  // Verifica si la fecha est\u00e1 en el pasado\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  // Verifica si el valor est\u00e1 dentro del rango\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  }\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    // Usa validators para procesar operaciones\n    // Transforma al formato de tu fuente de datos\n    return processData(operations, validators);\n  },\n  customValidators\n);\n\n// Usa validadores personalizados\nawait items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] }\n});\n</code></pre>"},{"location":"es/guides/async-collection/#encadenamiento-de-metodos","title":"Encadenamiento de M\u00e9todos","text":"<p>Encadena m\u00faltiples operaciones de forma fluida:</p> <pre><code>const users = new AsyncCollection(executor);\n\nconst result = await users\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .not({ deleted: true })\n  .sort('createdAt', 'desc')\n  .slice(0, 10)\n  .map(user =&gt; ({\n    id: user.id,\n    name: user.name,\n    displayName: `${user.name} (${user.age})`\n  }));\n</code></pre>"},{"location":"es/guides/async-collection/#operaciones-soportadas","title":"Operaciones Soportadas","text":"<p>AsyncCollection soporta todos los m\u00e9todos de Collection:</p>"},{"location":"es/guides/async-collection/#filtrado","title":"Filtrado","text":"<ul> <li><code>where(key, value)</code> o <code>where(key, operator, value)</code></li> <li><code>whereNot(key, value)</code> o <code>whereNot(key, operator, value)</code></li> <li><code>filter(handler)</code> - Funci\u00f3n u objeto de consulta</li> <li><code>not(handler)</code> - Filtro inverso</li> </ul>"},{"location":"es/guides/async-collection/#busqueda","title":"B\u00fasqueda","text":"<ul> <li><code>first(handler?)</code> - Primer elemento coincidente</li> <li><code>last(handler?)</code> - \u00daltimo elemento coincidente</li> <li><code>find(handler)</code> - Alias de first</li> </ul>"},{"location":"es/guides/async-collection/#transformacion","title":"Transformaci\u00f3n","text":"<ul> <li><code>map(handler)</code> - Transforma elementos</li> <li><code>each(handler)</code> - Itera elementos</li> <li><code>forget(...keys)</code> - Elimina campos</li> </ul>"},{"location":"es/guides/async-collection/#ordenamiento","title":"Ordenamiento","text":"<ul> <li><code>sort(key, direction)</code> o <code>sort(compareFunction)</code></li> <li><code>reverse()</code> - Invierte orden</li> <li><code>shuffle()</code> - Orden aleatorio</li> </ul>"},{"location":"es/guides/async-collection/#fragmentacion-y-paginacion","title":"Fragmentaci\u00f3n y Paginaci\u00f3n","text":"<ul> <li><code>slice(start, end?)</code> - Fragmento de array</li> <li><code>chunk(size)</code> - Divide en bloques</li> <li><code>paginate(page, perPage)</code> - Pagina resultados</li> </ul>"},{"location":"es/guides/async-collection/#agregacion","title":"Agregaci\u00f3n","text":"<ul> <li><code>sum(key)</code> - Suma valores</li> <li><code>max(key)</code> - Valor m\u00e1ximo</li> <li><code>min(key)</code> - Valor m\u00ednimo</li> <li><code>groupBy(key)</code> - Agrupa por clave</li> <li><code>countBy(key)</code> - Cuenta por clave</li> </ul>"},{"location":"es/guides/async-collection/#utilidades","title":"Utilidades","text":"<ul> <li><code>unique(key)</code> - Elementos \u00fanicos</li> <li><code>random(count?)</code> - Elementos aleatorios</li> <li><code>every(handler)</code> - Valida todos</li> <li><code>collect(items?)</code> - Clona contexto</li> </ul>"},{"location":"es/guides/async-collection/#debugging","title":"Debugging","text":"<ul> <li><code>dump()</code> - Imprime en consola</li> <li><code>dd()</code> - Dump and die (Node.js)</li> <li><code>stringify(replacer?, space?)</code> - Convierte a JSON</li> </ul>"},{"location":"es/guides/async-collection/#manejo-de-errores","title":"Manejo de Errores","text":"<p>Maneja errores en tu executor:</p> <pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  try {\n    // Construye y ejecuta consulta\n    const results = await executeQuery(operations);\n    return results;\n  } catch (error) {\n    console.error('Consulta fall\u00f3:', error);\n    throw new Error(`Fall\u00f3 obtener usuarios: ${error.message}`);\n  }\n});\n\n// Maneja errores al esperar\ntry {\n  const results = await users.where('age', '&gt;=', 18);\n} catch (error) {\n  console.error('Error:', error);\n}\n\n// O con .catch()\nusers\n  .where('age', '&gt;=', 18)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"es/guides/async-collection/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"es/guides/async-collection/#1-valida-operaciones","title":"1. Valida Operaciones","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Valida operaciones antes de ejecutar\n  const hasInvalidOp = operations.some(([method]) =&gt;\n    !['where', 'sort', 'first'].includes(method)\n  );\n\n  if (hasInvalidOp) {\n    throw new Error('Operaci\u00f3n no soportada');\n  }\n\n  return processOperations(operations);\n});\n</code></pre>"},{"location":"es/guides/async-collection/#2-maneja-operaciones-terminales","title":"2. Maneja Operaciones Terminales","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  const lastOp = operations[operations.length - 1];\n\n  // Verifica operaciones terminales\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await findFirst(operations.slice(0, -1));\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    return await findLast(operations.slice(0, -1));\n  }\n\n  return await findMany(operations);\n});\n</code></pre>"},{"location":"es/guides/async-collection/#3-optimiza-construccion-de-consultas","title":"3. Optimiza Construcci\u00f3n de Consultas","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Agrupa operaciones por tipo para procesamiento eficiente\n  const where_ops = operations.filter(([m]) =&gt; m === 'where');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n\n  // Construye consulta optimizada\n  const query = buildQuery({ where_ops, sort_ops });\n\n  return await executeQuery(query);\n});\n</code></pre>"},{"location":"es/guides/async-collection/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<ul> <li>Consulta la Referencia de API para documentaci\u00f3n completa de m\u00e9todos</li> <li>Ver Ejemplos de Uso para patrones del mundo real</li> <li>Aprende sobre Uso de TypeScript para seguridad de tipos</li> </ul>"},{"location":"es/guides/async-collection/#patrones-comunes","title":"Patrones Comunes","text":""},{"location":"es/guides/async-collection/#wrapper-de-api-rest","title":"Wrapper de API REST","text":"<pre><code>const api = new AsyncCollection(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, value] = args.length === 2 ? args : [args[0], args[2]];\n      params.append(key, value);\n    }\n  });\n\n  const response = await fetch(`/api/users?${params}`);\n  return await response.json();\n});\n\nconst users = await api.where('status', 'active');\n</code></pre>"},{"location":"es/guides/async-collection/#constructor-graphql","title":"Constructor GraphQL","text":"<pre><code>const gql = new AsyncCollection(async ({ operations }) =&gt; {\n  const filters = operations\n    .filter(([m]) =&gt; m === 'where')\n    .map(([_, key, value]) =&gt; `${key}: \"${value}\"`);\n\n  const query = `\n    query {\n      users(where: { ${filters.join(', ')} }) {\n        id name email\n      }\n    }\n  `;\n\n  const response = await graphqlClient.query(query);\n  return response.data.users;\n});\n</code></pre>"},{"location":"es/guides/async-collection/#consejos","title":"Consejos","text":"<ol> <li>Mant\u00e9n executors enfocados - Una responsabilidad por AsyncCollection</li> <li>Valida operaciones - Rechaza operaciones no soportadas temprano</li> <li>Maneja casos edge - Verifica operaciones terminales como first/last</li> <li>Tipifica todo - Usa gen\u00e9ricos de TypeScript para seguridad de tipos</li> <li>Prueba exhaustivamente - Unit test de tu executor con diferentes cadenas de operaciones</li> </ol>"},{"location":"es/guides/best-practices/","title":"Buenas Pr\u00e1cticas","text":"<p>Tips and best practices for using <code>@arcaelas/collection</code> effectively.</p>"},{"location":"es/guides/core-concepts/","title":"Conceptos B\u00e1sicos","text":"<p>Aprenda los conceptos fundamentales detr\u00e1s de <code>@arcaelas/collection</code>.</p>"},{"location":"es/guides/core-concepts/#colecciones-como-arrays-mejorados","title":"Colecciones como Arrays Mejorados","text":"<p>Las colecciones extienden los arrays nativos de JavaScript con m\u00e9todos potentes.</p>"},{"location":"es/guides/core-concepts/#seguridad-de-tipos","title":"Seguridad de Tipos","text":"<p>Use gen\u00e9ricos de TypeScript para colecciones type-safe.</p>"},{"location":"es/guides/core-concepts/#lenguaje-de-consultas","title":"Lenguaje de Consultas","text":"<p>Las colecciones soportan consultas estilo MongoDB.</p>"},{"location":"es/guides/core-concepts/#inmutabilidad","title":"Inmutabilidad","text":"<p>La mayor\u00eda de los m\u00e9todos devuelven nuevas colecciones.</p>"},{"location":"es/guides/core-concepts/#encadenamiento-de-metodos","title":"Encadenamiento de M\u00e9todos","text":"<p>Encadene m\u00e9todos para sintaxis fluida.</p> <p>Siguiente: Operadores de Consulta</p>"},{"location":"es/guides/getting-started/","title":"Primeros Pasos","text":"<p>Bienvenido a la gu\u00eda de primeros pasos para <code>@arcaelas/collection</code>!</p>"},{"location":"es/guides/getting-started/#tu-primera-coleccion","title":"Tu Primera Colecci\u00f3n","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"es/guides/getting-started/#filtrado-basico","title":"Filtrado B\u00e1sico","text":"<pre><code>const activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre> <p>Contin\u00faa leyendo en Conceptos B\u00e1sicos.</p>"},{"location":"es/guides/query-operators/","title":"Operadores de Consulta","text":"<p>Domine los operadores de consulta estilo MongoDB en <code>@arcaelas/collection</code>.</p>"},{"location":"es/guides/query-operators/#operadores-de-comparacion","title":"Operadores de Comparaci\u00f3n","text":""},{"location":"es/guides/query-operators/#eq-igual-gt-mayor-que-gte-lt-lte","title":"$eq (Igual), $gt (Mayor Que), $gte, $lt, $lte","text":""},{"location":"es/guides/query-operators/#operadores-logicos","title":"Operadores L\u00f3gicos","text":""},{"location":"es/guides/query-operators/#not-in-contains","title":"$not, $in, $contains","text":""},{"location":"es/guides/query-operators/#alias-de-operadores","title":"Alias de Operadores","text":"Alias Operador Significado <code>=</code> <code>$eq</code> Igual <code>!=</code> <code>$not</code> No igual <p>Siguiente: M\u00e9todos de Agregaci\u00f3n</p>"},{"location":"de/","title":"Willkommen bei @arcaelas/collection","text":"**Eine leistungsstarke TypeScript-Collection-Bibliothek mit MongoDB-\u00e4hnlicher Query-DSL**    [![npm Version](https://img.shields.io/npm/v/@arcaelas/collection.svg)](https://www.npmjs.com/package/@arcaelas/collection)   [![Lizenz](https://img.shields.io/npm/l/@arcaelas/collection.svg)](https://github.com/arcaelas/collection/blob/main/LICENSE)   [![GitHub Sterne](https://img.shields.io/github/stars/arcaelas/collection.svg)](https://github.com/arcaelas/collection)"},{"location":"de/#ubersicht","title":"\u00dcbersicht","text":"<p><code>@arcaelas/collection</code> ist eine umfassende Utility-Bibliothek, die native JavaScript-Arrays mit leistungsstarken Filter-, Abfrage- und Transformationsfunktionen erweitert. Inspiriert von Laravels Collections und MongoDBs Abfragesprache bietet sie eine elegante und typsichere API f\u00fcr die Arbeit mit Datensammlungen.</p>"},{"location":"de/#hauptmerkmale","title":"Hauptmerkmale","text":"<ul> <li>MongoDB-\u00e4hnliche Query-DSL - Intuitive Abfragesyntax mit Operatoren wie <code>$eq</code>, <code>$gt</code>, <code>$in</code>, <code>$contains</code> und mehr</li> <li>Typsicheres TypeScript - Vollst\u00e4ndige TypeScript-Unterst\u00fctzung mit generischen Typen f\u00fcr Autovervollst\u00e4ndigung und Typpr\u00fcfung</li> <li>Umfangreiche API - \u00dcber 30 integrierte Methoden zum Filtern, Transformieren und Aggregieren von Daten</li> <li>Methodenverkettung - Fluent Interface zum Komponieren komplexer Operationen</li> <li>Erweiterbar - F\u00fcgen Sie benutzerdefinierte Methoden mit Makros hinzu</li> <li>Keine Abh\u00e4ngigkeiten - Leichtgewichtig mit minimalen externen Abh\u00e4ngigkeiten</li> <li>Leistungsoptimiert - Effiziente Query-Kompilierung und native Array-Delegation</li> </ul>"},{"location":"de/#schnellstart","title":"Schnellstart","text":""},{"location":"de/#installation","title":"Installation","text":"<pre><code>npm install @arcaelas/collection\n# oder\nyarn add @arcaelas/collection\n</code></pre>"},{"location":"de/#grundlegende-verwendung","title":"Grundlegende Verwendung","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst users = new Collection([\n  { name: \"Alice\", age: 25, active: true },\n  { name: \"Bob\", age: 30, active: false },\n  { name: \"Charlie\", age: 35, active: true }\n]);\n\n// Filtern mit MongoDB-\u00e4hnlichen Abfragen\nconst activeUsers = users.filter({ active: true });\n\n// Filtern mit Abfrageoperatoren\nconst adults = users.filter({ age: { $gte: 18 } });\n\n// Methoden verketten\nconst result = users\n  .filter({ active: true })\n  .where(\"age\", \"&gt;=\", 25)\n  .sort(\"age\", \"desc\")\n  .first();\n\nconsole.log(result); // { name: \"Charlie\", age: 35, active: true }\n</code></pre>"},{"location":"de/#warum-arcaelascollection","title":"Warum @arcaelas/collection?","text":""},{"location":"de/#problem","title":"Problem","text":"<p>Native JavaScript-Arrays haben begrenzte Funktionalit\u00e4t f\u00fcr komplexe Datenoperationen:</p> <pre><code>// Nativer Ansatz - ausf\u00fchrlich und fehleranf\u00e4llig\nconst activeUsers = users.filter(user =&gt; user.active);\nconst adults = users.filter(user =&gt; user.age &gt;= 18);\nconst sorted = users.sort((a, b) =&gt; b.age - a.age);\n</code></pre>"},{"location":"de/#losung","title":"L\u00f6sung","text":"<p>Collection bietet eine elegante, verkettbare API:</p> <pre><code>// Collection-Ansatz - sauber und ausdrucksstark\nconst result = collection\n  .filter({ active: true, age: { $gte: 18 } })\n  .sort(\"age\", \"desc\");\n</code></pre>"},{"location":"de/#grundkonzepte","title":"Grundkonzepte","text":""},{"location":"de/#abfrageoperatoren","title":"Abfrageoperatoren","text":"<p>Verwenden Sie MongoDB-Style-Operatoren f\u00fcr leistungsstarke Abfragen:</p> <pre><code>collection.filter({\n  age: { $gte: 18, $lt: 65 },\n  name: { $regex: /^A/ },\n  skills: { $contains: \"TypeScript\" },\n  role: { $in: [\"admin\", \"moderator\"] }\n});\n</code></pre>"},{"location":"de/#methodenverkettung","title":"Methodenverkettung","text":"<p>Komponieren Sie komplexe Operationen mit fluenter Syntax:</p> <pre><code>collection\n  .where(\"verified\", true)\n  .whereNot(\"banned\", true)\n  .sort(\"created_at\", \"desc\")\n  .paginate(1, 20);\n</code></pre>"},{"location":"de/#typsicherheit","title":"Typsicherheit","text":"<p>Nutzen Sie TypeScript f\u00fcr Compile-Time-Sicherheit:</p> <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users = new Collection&lt;User&gt;([...]);\n\n// TypeScript kennt die Form\nusers.first()?.email; // string | undefined\n</code></pre>"},{"location":"de/#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":""},{"location":"de/#datenfilterung","title":"Datenfilterung","text":"<pre><code>const products = new Collection(inventory);\n\nconst available = products.filter({\n  stock: { $gt: 0 },\n  price: { $lte: 100 },\n  category: { $in: [\"electronics\", \"gadgets\"] }\n});\n</code></pre>"},{"location":"de/#datentransformation","title":"Datentransformation","text":"<pre><code>const users = new Collection(userData);\n\nconst sanitized = users\n  .forget(\"password\", \"token\")\n  .unique(\"email\")\n  .sort(\"created_at\", \"desc\");\n</code></pre>"},{"location":"de/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<ul> <li> <p> Erste Schritte</p> <p>Lernen Sie die Grundlagen und erstellen Sie Ihre erste Collection</p> </li> <li> <p> Grundkonzepte</p> <p>Verstehen Sie die grundlegenden Prinzipien und Muster</p> </li> <li> <p> Abfrageoperatoren</p> <p>Meistern Sie die MongoDB-\u00e4hnliche Abfragesyntax</p> </li> <li> <p> API-Referenz</p> <p>Erkunden Sie alle verf\u00fcgbaren Methoden und Signaturen</p> </li> <li> <p> Beispiele</p> <p>Sehen Sie praktische Beispiele und g\u00e4ngige Muster</p> </li> <li> <p> Erweitert</p> <p>Leistungstipps und fortgeschrittene Techniken</p> </li> </ul>"},{"location":"de/#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: arcaelas/collection</li> <li>Issues: Fehler melden oder Funktionen anfordern</li> <li>Twitter: @arcaelas</li> <li>Email: community@arcaelas.com</li> </ul>"},{"location":"de/#lizenz","title":"Lizenz","text":"<p>MIT \u00a9 2025 Arcaelas Insiders</p> <p> Mit \u2764\ufe0f vom Arcaelas Insiders Team gebaut </p> <p>     M\u00f6chten Sie eines unserer Open-Source-Projekte diskutieren? Senden Sie uns eine Nachricht auf     Twitter oder sponsern Sie uns bei     GitHub Sponsors.   </p>"},{"location":"de/CHANGELOG/","title":"\u00c4nderungsprotokoll","text":"<p>Alle wichtigen \u00c4nderungen an <code>@arcaelas/collection</code> werden in dieser Datei dokumentiert.</p>"},{"location":"de/CHANGELOG/#behoben","title":"Behoben","text":"<ul> <li>TypeScript-Typinferenz f\u00fcr <code>every()</code>-Methoden\u00fcberladungen behoben</li> <li>R\u00fcckgabetyp f\u00fcr <code>collect()</code>-Methode korrigiert</li> <li>Abfragevalidierung f\u00fcr verschachtelte Objekte korrigiert</li> </ul>"},{"location":"de/CHANGELOG/#verbessert","title":"Verbessert","text":"<ul> <li>Leistung der <code>unique()</code>-Methode mit gro\u00dfen Datens\u00e4tzen verbessert</li> <li>Abfragekompilierung f\u00fcr wiederholte Filteroperationen optimiert</li> <li>Bessere Fehlermeldungen f\u00fcr ung\u00fcltige Operatorverwendung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt","title":"Hinzugef\u00fcgt","text":"<ul> <li>Neue <code>every()</code>-Methode mit mehreren \u00dcberladungssignaturen</li> <li>Unterst\u00fctzung f\u00fcr Punktnotation in <code>where()</code>- und <code>whereNot()</code>-Methoden</li> <li>Verbesserte <code>update()</code>-Methode mit Callback-Unterst\u00fctzung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt_1","title":"Hinzugef\u00fcgt","text":"<ul> <li>MongoDB-Stil-Abfrageoperatoren</li> <li>Abfrageoperator-Aliase</li> <li>Statische und Instanz-<code>macro()</code>-Methoden</li> <li><code>stringify()</code>-Methode f\u00fcr JSON-Serialisierung</li> </ul>"},{"location":"de/CHANGELOG/#hinzugefugt_2","title":"Hinzugef\u00fcgt","text":"<ul> <li>Vollst\u00e4ndige TypeScript-Umschreibung</li> <li>Vollst\u00e4ndige generische Typunterst\u00fctzung</li> <li>Neue Aggregations- und Transformationsmethoden</li> </ul>"},{"location":"de/CHANGELOG/#versionsunterstutzung","title":"Versionsunterst\u00fctzung","text":"Version Status Node.js TypeScript 2.1.x Aktiv 14+ 4.x+ 2.0.x Wartung 14+ 4.x+ 1.x Lebensende 12+ 3.x+"},{"location":"de/installation/","title":"Installation","text":"<p>Diese Anleitung hilft Ihnen bei der Installation und Einrichtung von <code>@arcaelas/collection</code> in Ihrem Projekt.</p>"},{"location":"de/installation/#anforderungen","title":"Anforderungen","text":"<ul> <li>Node.js: 14.x oder h\u00f6her</li> <li>TypeScript: 4.x oder h\u00f6her (optional, f\u00fcr TypeScript-Projekte)</li> <li>Paketmanager: npm, yarn oder pnpm</li> </ul>"},{"location":"de/installation/#installation-mit-paketmanager","title":"Installation mit Paketmanager","text":""},{"location":"de/installation/#mit-npm","title":"Mit npm","text":"<pre><code>npm install @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#mit-yarn","title":"Mit yarn","text":"<pre><code>yarn add @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#mit-pnpm","title":"Mit pnpm","text":"<pre><code>pnpm add @arcaelas/collection\n</code></pre>"},{"location":"de/installation/#importmethoden","title":"Importmethoden","text":""},{"location":"de/installation/#es-modul-empfohlen","title":"ES-Modul (Empfohlen)","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst collection = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"de/installation/#benannter-import","title":"Benannter Import","text":"<pre><code>import { Collection } from \"@arcaelas/collection\";\n\nconst collection = new Collection([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"de/installation/#typescript-konfiguration","title":"TypeScript-Konfiguration","text":"<p>Wenn Sie TypeScript verwenden, stellen Sie sicher, dass Ihre <code>tsconfig.json</code> die richtige Konfiguration enth\u00e4lt:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ES2020\",\n    \"lib\": [\"ES2020\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"resolveJsonModule\": true\n  }\n}\n</code></pre>"},{"location":"de/installation/#installation-uberprufen","title":"Installation \u00dcberpr\u00fcfen","text":"<p>Erstellen Sie eine einfache Testdatei, um die Installation zu \u00fcberpr\u00fcfen:</p> <pre><code>// test-collection.ts\nimport Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n\nconsole.log(\"Gesamt:\", numbers.sum(n =&gt; n)); // 15\nconsole.log(\"Maximum:\", numbers.max(\"value\"));\nconsole.log(\"Erstes:\", numbers.first()); // 1\n\nconst filtered = numbers.filter(n =&gt; n &gt; 2);\nconsole.log(\"Gefiltert:\", filtered); // [3, 4, 5]\n</code></pre> <p>Test ausf\u00fchren:</p> <pre><code># Wenn Sie TypeScript verwenden\nnpx ts-node test-collection.ts\n\n# Wenn Sie JavaScript verwenden\nnode test-collection.js\n</code></pre>"},{"location":"de/installation/#bundle-groe","title":"Bundle-Gr\u00f6\u00dfe","text":"<p>Die Bibliothek ist leichtgewichtig und tree-shakeable:</p> <ul> <li>Minifiziert: ~15 KB</li> <li>Gzipped: ~5 KB</li> </ul>"},{"location":"de/installation/#browser-kompatibilitat","title":"Browser-Kompatibilit\u00e4t","text":"<p><code>@arcaelas/collection</code> funktioniert in allen modernen Browsern, die ES2020 unterst\u00fctzen:</p> <ul> <li>Chrome 80+</li> <li>Firefox 72+</li> <li>Safari 13.1+</li> <li>Edge 80+</li> </ul> <p>F\u00fcr \u00e4ltere Browser verwenden Sie einen Transpiler wie Babel.</p>"},{"location":"de/installation/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<p>Jetzt, da Sie <code>@arcaelas/collection</code> installiert haben, k\u00f6nnen Sie:</p> <ul> <li>Die Anleitung Erste Schritte lesen</li> <li>Grundkonzepte erkunden</li> <li>Beispiele ansehen</li> <li>Die API-Referenz durchsuchen</li> </ul>"},{"location":"de/advanced/extending-collection/","title":"Collection erweitern","text":"<p>Learn how to extend Collection with custom functionality.</p>"},{"location":"de/advanced/performance/","title":"Leistung","text":"<p>Performance optimization tips and benchmarks.</p>"},{"location":"de/advanced/typescript-usage/","title":"TypeScript-Verwendung","text":"<p>Advanced TypeScript patterns and techniques.</p>"},{"location":"de/api/aggregation-methods/","title":"Aggregationsmethoden","text":""},{"location":"de/api/async-collection-class/","title":"AsyncCollection-Klasse","text":"<p>Vollst\u00e4ndige API-Referenz f\u00fcr die AsyncCollection-Klasse - ein verz\u00f6gerter Query-Builder zum Erstellen von Abstraktionen \u00fcber jede Datenquelle.</p>"},{"location":"de/api/async-collection-class/#konstruktor","title":"Konstruktor","text":""},{"location":"de/api/async-collection-class/#new-asynccollectiont-vexecutor-validators","title":"<code>new AsyncCollection&lt;T, V&gt;(executor, validators?)</code>","text":"<p>Erstellt eine neue AsyncCollection-Instanz mit einer benutzerdefinierten Executor-Funktion.</p> <p>Typparameter:</p> <ul> <li><code>T</code> - Typ der Elemente in der Sammlung</li> <li><code>V</code> - Typ der benutzerdefinierten Validatoren (optional)</li> </ul> <p>Parameter:</p> Parameter Typ Erforderlich Beschreibung <code>executor</code> <code>Executor&lt;T, V&gt;</code> Ja Funktion, die Operationen verarbeitet und Ergebnisse zur\u00fcckgibt <code>validators</code> <code>V</code> Nein Benutzerdefinierte Validatoren zur Erweiterung von Abfrageoperatoren <p>Beispiel:</p> <pre><code>const users = new AsyncCollection&lt;User&gt;(\n  async ({ operations, validators, metadata }) =&gt; {\n    console.log(`Verarbeite ${metadata.operation_count} Operationen`);\n    return await processOperations(operations);\n  }\n);\n</code></pre>"},{"location":"de/api/async-collection-class/#typdefinitionen","title":"Typdefinitionen","text":""},{"location":"de/api/async-collection-class/#executort-v","title":"<code>Executor&lt;T, V&gt;</code>","text":"<p>Funktionstyp f\u00fcr den Executor, der den Kontext verarbeitet.</p> <pre><code>type Executor&lt;T = any, V = any&gt; = (\n  context: ExecutorContext&lt;T, V&gt;\n) =&gt; T | T[] | Promise&lt;T | T[]&gt;;\n</code></pre>"},{"location":"de/api/async-collection-class/#executorcontextt-v","title":"<code>ExecutorContext&lt;T, V&gt;</code>","text":"<p>Kontextobjekt, das an die Executor-Funktion \u00fcbergeben wird.</p> <pre><code>interface ExecutorContext&lt;T = any, V = any&gt; {\n  operations: [string, ...any[]][];\n  validators?: V;\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre>"},{"location":"de/api/async-collection-class/#thenable-implementierung","title":"Thenable-Implementierung","text":"<p>AsyncCollection implementiert die Thenable-Schnittstelle und ist daher awaitable.</p>"},{"location":"de/api/async-collection-class/#thenonfulfilled-onrejected","title":"<code>then(onfulfilled?, onrejected?)</code>","text":"<p>Implementiert Promise.then() f\u00fcr asynchrone Ausf\u00fchrung.</p> <p>R\u00fcckgabe: <code>Promise&lt;TResult1 | TResult2&gt;</code></p> <p>Beispiel:</p> <pre><code>users\n  .where('active', true)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n\n// Oder mit await\nconst results = await users.where('active', true);\n</code></pre>"},{"location":"de/api/async-collection-class/#catchonrejected","title":"<code>catch(onrejected?)</code>","text":"<p>Implementiert Promise.catch() f\u00fcr Fehlerbehandlung.</p>"},{"location":"de/api/async-collection-class/#finallyonfinally","title":"<code>finally(onfinally?)</code>","text":"<p>Implementiert Promise.finally() f\u00fcr Bereinigung.</p>"},{"location":"de/api/async-collection-class/#filtermethoden","title":"Filtermethoden","text":""},{"location":"de/api/async-collection-class/#wherekey-value-wherekey-operator-value","title":"<code>where(key, value)</code> / <code>where(key, operator, value)</code>","text":"<p>Filtert Sammlung mit where-Operator und Vergleichen.</p> <p>Beispiel:</p> <pre><code>users.where('age', '&gt;=', 18)\nusers.where('status', 'active')  // Operator '=' standardm\u00e4\u00dfig\n</code></pre>"},{"location":"de/api/async-collection-class/#wherenotkey-value-wherenotkey-operator-value","title":"<code>whereNot(key, value)</code> / <code>whereNot(key, operator, value)</code>","text":"<p>Inverser Filter - schlie\u00dft \u00fcbereinstimmende Elemente aus.</p>"},{"location":"de/api/async-collection-class/#filterhandler","title":"<code>filter(handler)</code>","text":"<p>Filtert Elemente mit einer Funktion oder einem Query-Objekt.</p>"},{"location":"de/api/async-collection-class/#nothandler","title":"<code>not(handler)</code>","text":"<p>Inverser Filter - schlie\u00dft \u00fcbereinstimmende Elemente aus.</p>"},{"location":"de/api/async-collection-class/#suchmethoden","title":"Suchmethoden","text":""},{"location":"de/api/async-collection-class/#firsthandler","title":"<code>first(handler?)</code>","text":"<p>Ruft das erste Element ab, das die Kriterien erf\u00fcllt.</p>"},{"location":"de/api/async-collection-class/#lasthandler","title":"<code>last(handler?)</code>","text":"<p>Ruft das letzte Element ab, das die Kriterien erf\u00fcllt.</p>"},{"location":"de/api/async-collection-class/#findhandler","title":"<code>find(handler)</code>","text":"<p>Findet erstes \u00fcbereinstimmendes Element (Alias f\u00fcr <code>first()</code>).</p>"},{"location":"de/api/async-collection-class/#everyhandler-value","title":"<code>every(handler, value?)</code>","text":"<p>\u00dcberpr\u00fcft, ob alle Elemente die Kriterien erf\u00fcllen.</p>"},{"location":"de/api/async-collection-class/#transformationsmethoden","title":"Transformationsmethoden","text":""},{"location":"de/api/async-collection-class/#maphandler","title":"<code>map(handler)</code>","text":"<p>Transformiert jedes Element mit einer Mapping-Funktion.</p>"},{"location":"de/api/async-collection-class/#eachfn","title":"<code>each(fn)</code>","text":"<p>Iteriert \u00fcber jedes Element und f\u00fchrt einen Callback aus.</p>"},{"location":"de/api/async-collection-class/#forgetkeys","title":"<code>forget(...keys)</code>","text":"<p>Entfernt bestimmte Felder aus jedem Element.</p>"},{"location":"de/api/async-collection-class/#sortiermethoden","title":"Sortiermethoden","text":""},{"location":"de/api/async-collection-class/#sorthandler-direction","title":"<code>sort(handler?, direction?)</code>","text":"<p>Sortiert Elemente nach Schl\u00fcssel oder Vergleichsfunktion.</p>"},{"location":"de/api/async-collection-class/#reverse","title":"<code>reverse()</code>","text":"<p>Kehrt die Reihenfolge der Elemente um.</p>"},{"location":"de/api/async-collection-class/#shuffle","title":"<code>shuffle()</code>","text":"<p>Mischt Elemente zuf\u00e4llig.</p>"},{"location":"de/api/async-collection-class/#randomlength","title":"<code>random(length?)</code>","text":"<p>Ruft zuf\u00e4llige Elemente aus der Sammlung ab.</p>"},{"location":"de/api/async-collection-class/#slicing-methoden","title":"Slicing-Methoden","text":""},{"location":"de/api/async-collection-class/#slicestart-end","title":"<code>slice(start, end?)</code>","text":"<p>Ruft einen Ausschnitt der Sammlung ab.</p>"},{"location":"de/api/async-collection-class/#chunksize","title":"<code>chunk(size)</code>","text":"<p>Teilt Sammlung in Bl\u00f6cke der angegebenen Gr\u00f6\u00dfe.</p>"},{"location":"de/api/async-collection-class/#paginatepage-perpage","title":"<code>paginate(page?, perPage?)</code>","text":"<p>Paginiert Ergebnisse.</p>"},{"location":"de/api/async-collection-class/#aggregationsmethoden","title":"Aggregationsmethoden","text":""},{"location":"de/api/async-collection-class/#sumhandler","title":"<code>sum(handler)</code>","text":"<p>Summiert Werte eines Schl\u00fcssels oder einer Funktion.</p>"},{"location":"de/api/async-collection-class/#maxkey","title":"<code>max(key)</code>","text":"<p>Ruft Maximalwert eines Schl\u00fcssels ab.</p>"},{"location":"de/api/async-collection-class/#minkey","title":"<code>min(key)</code>","text":"<p>Ruft Minimalwert eines Schl\u00fcssels ab.</p>"},{"location":"de/api/async-collection-class/#groupbyhandler","title":"<code>groupBy(handler)</code>","text":"<p>Gruppiert Elemente nach Schl\u00fcssel oder Funktion.</p>"},{"location":"de/api/async-collection-class/#countbyhandler","title":"<code>countBy(handler)</code>","text":"<p>Z\u00e4hlt Elemente gruppiert nach Schl\u00fcssel oder Funktion.</p>"},{"location":"de/api/async-collection-class/#hilfsmethoden","title":"Hilfsmethoden","text":""},{"location":"de/api/async-collection-class/#uniquehandler","title":"<code>unique(handler)</code>","text":"<p>Ruft nur eindeutige Elemente nach Schl\u00fcssel oder Funktion ab.</p>"},{"location":"de/api/async-collection-class/#updatewhere-set","title":"<code>update(where, set?)</code>","text":"<p>Aktualisiert Elemente, die Kriterien entsprechen.</p>"},{"location":"de/api/async-collection-class/#deletewhere","title":"<code>delete(where)</code>","text":"<p>L\u00f6scht Elemente, die Kriterien entsprechen.</p>"},{"location":"de/api/async-collection-class/#collectitems","title":"<code>collect(items?)</code>","text":"<p>Klont aktuellen Kontext mit optionalen Items.</p>"},{"location":"de/api/async-collection-class/#debugging-methoden","title":"Debugging-Methoden","text":""},{"location":"de/api/async-collection-class/#dump","title":"<code>dump()</code>","text":"<p>Gibt Sammlung in Konsole aus zum Debugging.</p>"},{"location":"de/api/async-collection-class/#dd","title":"<code>dd()</code>","text":"<p>Gibt Sammlung aus und beendet Prozess (nur Node.js).</p>"},{"location":"de/api/async-collection-class/#stringifyreplacer-space","title":"<code>stringify(replacer?, space?)</code>","text":"<p>Konvertiert Sammlung in JSON-String.</p>"},{"location":"de/api/async-collection-class/#erweiterungsmethoden","title":"Erweiterungsmethoden","text":""},{"location":"de/api/async-collection-class/#macrokey-handler","title":"<code>macro(key, handler)</code>","text":"<p>Registriert ein benutzerdefiniertes Makro (Methodenerweiterung).</p>"},{"location":"de/api/async-collection-class/#siehe-auch","title":"Siehe auch","text":"<ul> <li>AsyncCollection-Anleitung</li> <li>Verwendungsbeispiele</li> <li>TypeScript-Verwendung</li> </ul>"},{"location":"de/api/collection-class/","title":"Collection-Klasse","text":"<p>Complete API reference for the Collection class.</p>"},{"location":"de/api/filtering-methods/","title":"Filtermethoden","text":""},{"location":"de/api/macros/","title":"Makros","text":"<p>Extend Collection with custom methods using macros.</p> <pre><code>Collection.macro('pluck', function(key) {\n  return this.map(item =&gt; item[key]);\n});\n\ncollection.pluck('name');\n</code></pre>"},{"location":"de/api/transformation-methods/","title":"Transformationsmethoden","text":""},{"location":"de/api/utility-methods/","title":"Hilfsmethoden","text":""},{"location":"de/examples/advanced-patterns/","title":"Erweiterte Muster","text":"<p>Advanced patterns and techniques.</p>"},{"location":"de/examples/async-collection-usage/","title":"AsyncCollection Verwendungsbeispiele","text":"<p>Reale Beispiele f\u00fcr die Verwendung von AsyncCollection mit verschiedenen Datenquellen und Mustern.</p>"},{"location":"de/examples/async-collection-usage/#inhaltsverzeichnis","title":"Inhaltsverzeichnis","text":"<ul> <li>Grundlegendes In-Memory-Beispiel</li> <li>Prisma ORM Integration</li> <li>TypeORM Integration</li> <li>Sequelize Integration</li> <li>REST-API-Wrapper</li> <li>GraphQL Query Builder</li> <li>Benutzerdefinierte Validatoren</li> <li>Komplexe Abfrageketten</li> <li>Fehlerbehandlungsmuster</li> </ul>"},{"location":"de/examples/async-collection-usage/#grundlegendes-in-memory-beispiel","title":"Grundlegendes In-Memory-Beispiel","text":"<p>Einfacher Executor zum Filtern von In-Memory-Daten:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  age: number;\n  status: 'active' | 'inactive';\n}\n\nconst data: User[] = [\n  { id: 1, name: \"Alice\", email: \"alice@example.com\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", email: \"bob@example.com\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", email: \"charlie@example.com\", age: 35, status: \"active\" }\n];\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        const itemValue = item[key as keyof User];\n\n        switch (operator) {\n          case '=': return itemValue === value;\n          case '!=': return itemValue !== value;\n          case '&gt;': return itemValue &gt; value;\n          case '&lt;': return itemValue &lt; value;\n          case '&gt;=': return itemValue &gt;= value;\n          case '&lt;=': return itemValue &lt;= value;\n          default: return true;\n        }\n      });\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      results.sort((a, b) =&gt; {\n        const aVal = a[key as keyof User];\n        const bVal = b[key as keyof User];\n        const comparison = aVal &gt; bVal ? 1 : aVal &lt; bVal ? -1 : 0;\n        return direction === 'desc' ? -comparison : comparison;\n      });\n    }\n\n    if (method === 'first') {\n      results = results.length &gt; 0 ? [results[0]] : [];\n    }\n  });\n\n  return results;\n});\n\n// Verwendung\nconst activeUsers = await users.where('status', 'active');\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\nconst sorted = await users.sort('age', 'desc');\n</code></pre>"},{"location":"de/examples/async-collection-usage/#prisma-orm-integration","title":"Prisma ORM Integration","text":"<p>Vollst\u00e4ndige Prisma-Integration mit erweiterter Abfrageerstellung:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient, User, Prisma } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations, metadata }) =&gt; {\n  let where: Prisma.UserWhereInput = {};\n  let orderBy: Prisma.UserOrderByWithRelationInput | undefined;\n  let take: number | undefined;\n  let skip: number | undefined;\n\n  console.log(`Erstelle Prisma-Abfrage mit ${metadata.operation_count} Operationen`);\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildWhereCondition(key, operator, value);\n      where = { ...where, ...condition };\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = { [key]: direction };\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      skip = (page - 1) * perPage;\n      take = perPage;\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await prisma.user.findFirst({ where, orderBy });\n    return result ? [result] : [];\n  }\n\n  return await prisma.user.findMany({ where, orderBy, take, skip });\n});\n\nfunction buildWhereCondition(\n  key: string,\n  operator: string,\n  value: any\n): Prisma.UserWhereInput {\n  switch (operator) {\n    case '=': return { [key]: value };\n    case '!=': return { [key]: { not: value } };\n    case '&gt;': return { [key]: { gt: value } };\n    case '&lt;': return { [key]: { lt: value } };\n    case '&gt;=': return { [key]: { gte: value } };\n    case '&lt;=': return { [key]: { lte: value } };\n    case 'in': return { [key]: { in: value } };\n    case 'includes': return { [key]: { contains: value } };\n    default: return { [key]: value };\n  }\n}\n\n// Verwendungsbeispiele\nconst activeVerified = await users\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .sort('createdAt', 'desc')\n  .slice(0, 10);\n\nconst firstUser = await users\n  .where('email', 'includes', '@example.com')\n  .first();\n\nconst page2 = await users\n  .where('status', 'active')\n  .paginate(2, 50);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#typeorm-integration","title":"TypeORM Integration","text":"<p>Erstellen von TypeORM QueryBuilder aus Operationen:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n  let paramIndex = 0;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `param${paramIndex++}`;\n      const column = `user.${key}`;\n\n      switch (operator) {\n        case '=':\n          qb.andWhere(`${column} = :${paramKey}`, { [paramKey]: value });\n          break;\n        case '&gt;=':\n          qb.andWhere(`${column} &gt;= :${paramKey}`, { [paramKey]: value });\n          break;\n        case 'in':\n          qb.andWhere(`${column} IN (:...${paramKey})`, { [paramKey]: value });\n          break;\n        case 'includes':\n          qb.andWhere(`${column} LIKE :${paramKey}`, { [paramKey]: `%${value}%` });\n          break;\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      qb.orderBy(`user.${key}`, direction.toUpperCase() as 'ASC' | 'DESC');\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      qb.skip((page - 1) * perPage);\n      qb.take(perPage);\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await qb.getOne();\n    return result ? [result] : [];\n  }\n\n  return await qb.getMany();\n});\n\n// Verwendung\nconst results = await users\n  .where('age', '&gt;=', 21)\n  .where('country', 'USA')\n  .sort('createdAt', 'desc')\n  .slice(0, 20);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#sequelize-integration","title":"Sequelize Integration","text":"<p>Arbeiten mit Sequelize ORM:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { Op } from \"sequelize\";\nimport { User } from \"./models/User\";\n\nconst users = new AsyncCollection&lt;User&gt;(async ({ operations }) =&gt; {\n  const where: any = {};\n  let order: any[] = [];\n  let limit: number | undefined;\n  let offset: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const condition = buildSequelizeCondition(operator, value);\n      where[key] = condition;\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      order.push([key, direction.toUpperCase()]);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      offset = (page - 1) * perPage;\n      limit = perPage;\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    const result = await User.findOne({ where, order });\n    return result ? [result] : [];\n  }\n\n  return await User.findAll({ where, order, limit, offset });\n});\n\nfunction buildSequelizeCondition(operator: string, value: any) {\n  switch (operator) {\n    case '=': return value;\n    case '!=': return { [Op.ne]: value };\n    case '&gt;': return { [Op.gt]: value };\n    case '&gt;=': return { [Op.gte]: value };\n    case '&lt;=': return { [Op.lte]: value };\n    case 'in': return { [Op.in]: value };\n    case 'includes': return { [Op.like]: `%${value}%` };\n    default: return value;\n  }\n}\n\n// Verwendung\nconst results = await users\n  .where('status', 'active')\n  .where('age', '&gt;=', 18)\n  .sort('name', 'asc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#rest-api-wrapper","title":"REST-API-Wrapper","text":"<p>Erstellen eines API-Clients mit AsyncCollection:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\ninterface ApiUser {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst apiUsers = new AsyncCollection&lt;ApiUser&gt;(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '=') {\n        params.append(key, String(value));\n      } else if (operator === 'includes') {\n        params.append(`${key}_like`, String(value));\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      params.append('_sort', key);\n      params.append('_order', direction);\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      params.append('_page', String(page));\n      params.append('_limit', String(perPage));\n    }\n  });\n\n  const url = `/api/users?${params.toString()}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`API-Fehler: ${response.statusText}`);\n  }\n\n  return await response.json();\n});\n\n// Verwendung\nconst users = await apiUsers\n  .where('status', 'active')\n  .where('name', 'includes', 'John')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#graphql-query-builder","title":"GraphQL Query Builder","text":"<p>Dynamisches Erstellen von GraphQL-Abfragen:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { GraphQLClient } from \"graphql-request\";\n\nconst client = new GraphQLClient('https://api.example.com/graphql');\n\nconst gqlUsers = new AsyncCollection(async ({ operations }) =&gt; {\n  const filters: string[] = [];\n  let orderBy: string | undefined;\n  let limit: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const gqlOperator = mapToGQLOperator(operator);\n      filters.push(`${key}: { ${gqlOperator}: \"${value}\" }`);\n    }\n\n    if (method === 'sort') {\n      const [key, direction = 'asc'] = args;\n      orderBy = `${key}: ${direction.toUpperCase()}`;\n    }\n\n    if (method === 'paginate') {\n      const [page = 1, perPage = 20] = args;\n      limit = perPage;\n    }\n  });\n\n  const whereClause = filters.length &gt; 0 ? `where: { ${filters.join(', ')} }` : '';\n  const orderClause = orderBy ? `orderBy: { ${orderBy} }` : '';\n  const limitClause = limit ? `take: ${limit}` : '';\n\n  const args = [whereClause, orderClause, limitClause]\n    .filter(Boolean)\n    .join(', ');\n\n  const query = `\n    query {\n      users${args ? `(${args})` : ''} {\n        id name email createdAt\n      }\n    }\n  `;\n\n  const response = await client.request(query);\n  return response.users;\n});\n\nfunction mapToGQLOperator(operator: string): string {\n  const mapping: Record&lt;string, string&gt; = {\n    '=': 'equals',\n    '!=': 'not',\n    '&gt;': 'gt',\n    '&gt;=': 'gte',\n    'includes': 'contains',\n  };\n  return mapping[operator] || 'equals';\n}\n\n// Verwendung\nconst users = await gqlUsers\n  .where('status', 'active')\n  .sort('name', 'asc')\n  .paginate(1, 10);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#benutzerdefinierte-validatoren","title":"Benutzerdefinierte Validatoren","text":"<p>Erweiterte benutzerdefinierte Validatormuster:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst customValidators = {\n  // Datumsvalidatoren\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  $isFuture(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isFuture = date &gt; new Date();\n      return value ? isFuture : !isFuture;\n    };\n  },\n\n  // Numerische Validatoren\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  },\n\n  // String-Validatoren\n  $matches(ref: string, regex: RegExp) {\n    return (item: any) =&gt; {\n      return regex.test(String(item[ref]));\n    };\n  },\n\n  // Array-Validatoren\n  $hasLength(ref: string, length: number) {\n    return (item: any) =&gt; {\n      return Array.isArray(item[ref]) &amp;&amp; item[ref].length === length;\n    };\n  },\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    let results = [...data];\n\n    operations.forEach(([method, ...args]) =&gt; {\n      if (method === 'filter' &amp;&amp; typeof args[0] === 'object') {\n        const query = args[0];\n        results = results.filter(item =&gt; {\n          return Object.entries(query).every(([key, condition]) =&gt; {\n            if (typeof condition === 'object') {\n              return Object.entries(condition).every(([operator, value]) =&gt; {\n                if (validators &amp;&amp; operator in validators) {\n                  const validator = validators[operator];\n                  const validatorFn = validator(key, value);\n                  return validatorFn(item);\n                }\n                return true;\n              });\n            }\n            return item[key] === condition;\n          });\n        });\n      }\n    });\n\n    return results;\n  },\n  customValidators\n);\n\n// Verwendung\nconst results = await items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] },\n  email: { $matches: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/i },\n  tags: { $hasLength: 3 },\n});\n</code></pre>"},{"location":"de/examples/async-collection-usage/#komplexe-abfrageketten","title":"Komplexe Abfrageketten","text":"<p>Erstellen komplexer mehrstufiger Abfragen:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst userSearch = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  console.log(`Erstelle komplexe Abfrage: ${metadata.operation_count} Operationen`);\n\n  // Operationen extrahieren und organisieren\n  const where_ops = operations.filter(([m]) =&gt; m === 'where' || m === 'whereNot');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n  const terminal_ops = operations.filter(([m]) =&gt; ['first', 'last'].includes(m));\n\n  // Where-Bedingungen erstellen\n  const where: any = { AND: [] };\n  where_ops.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push(condition);\n    } else if (method === 'whereNot') {\n      const condition = buildPrismaCondition(args);\n      where.AND.push({ NOT: condition });\n    }\n  });\n\n  // Reihenfolge erstellen\n  const orderBy = sort_ops.map(([_, key, direction]) =&gt; ({\n    [key]: direction || 'asc',\n  }));\n\n  // Abfrage basierend auf Terminaloperation ausf\u00fchren\n  if (terminal_ops.length &gt; 0 &amp;&amp; terminal_ops[0][0] === 'first') {\n    const result = await prisma.user.findFirst({\n      where: where.AND.length &gt; 0 ? where : undefined,\n      orderBy,\n    });\n    return result ? [result] : [];\n  }\n\n  return await prisma.user.findMany({\n    where: where.AND.length &gt; 0 ? where : undefined,\n    orderBy,\n  });\n});\n\n// Verwendung: Komplexe Suche\nconst results = await userSearch\n  .where('status', 'active')\n  .where('verified', true)\n  .where('age', '&gt;=', 18)\n  .where('age', '&lt;=', 65)\n  .whereNot('deleted', true)\n  .whereNot('banned', true)\n  .sort('score', 'desc')\n  .sort('createdAt', 'desc')\n  .paginate(1, 20);\n</code></pre>"},{"location":"de/examples/async-collection-usage/#fehlerbehandlungsmuster","title":"Fehlerbehandlungsmuster","text":"<p>Robuste Fehlerbehandlung in Executors:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nclass QueryError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'QueryError';\n  }\n}\n\nconst users = new AsyncCollection(async ({ operations, metadata }) =&gt; {\n  try {\n    // Operationen validieren\n    const unsupported = operations.find(([method]) =&gt;\n      !['where', 'sort', 'first', 'slice'].includes(method)\n    );\n\n    if (unsupported) {\n      throw new QueryError(\n        `Nicht unterst\u00fctzte Operation: ${unsupported[0]}`,\n        'UNSUPPORTED_OPERATION'\n      );\n    }\n\n    // Abfrage erstellen\n    const query = buildQuery(operations);\n\n    // Mit Timeout ausf\u00fchren\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() =&gt; controller.abort(), 5000);\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        body: JSON.stringify(query),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new QueryError(\n          `API-Fehler: ${response.statusText}`,\n          'API_ERROR'\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new QueryError('Abfrage-Timeout \u00fcberschritten', 'TIMEOUT');\n      }\n      throw error;\n    }\n  } catch (error) {\n    console.error('Abfrageausf\u00fchrung fehlgeschlagen:', {\n      error,\n      operations,\n      metadata,\n    });\n\n    if (error instanceof QueryError) {\n      throw error;\n    }\n\n    throw new QueryError(\n      `Unerwarteter Fehler: ${error.message}`,\n      'UNEXPECTED_ERROR'\n    );\n  }\n});\n\n// Verwendung mit Fehlerbehandlung\ntry {\n  const results = await users\n    .where('age', '&gt;=', 18)\n    .sort('name', 'asc');\n} catch (error) {\n  if (error instanceof QueryError) {\n    switch (error.code) {\n      case 'TIMEOUT':\n        console.error('Abfrage dauerte zu lange');\n        break;\n      case 'UNSUPPORTED_OPERATION':\n        console.error('Ung\u00fcltige Operation verwendet');\n        break;\n      case 'API_ERROR':\n        console.error('API hat einen Fehler zur\u00fcckgegeben');\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"de/examples/async-collection-usage/#siehe-auch","title":"Siehe auch","text":"<ul> <li>AsyncCollection-Anleitung</li> <li>API-Referenz</li> <li>TypeScript-Verwendung</li> </ul>"},{"location":"de/examples/basic-usage/","title":"Grundlegende Verwendung","text":"<p>Practical examples of common Collection operations.</p>"},{"location":"de/examples/filtering-sorting/","title":"Filtern und Sortieren","text":"<p>Advanced filtering and sorting examples.</p> <pre><code>const result = users\n  .filter({ verified: true })\n  .where('age', '&gt;=', 21)\n  .sort('name', 'asc');\n</code></pre>"},{"location":"de/guides/aggregation-methods/","title":"Aggregationsmethoden","text":"<p>Learn aggregation methods like <code>sum()</code>, <code>max()</code>, <code>min()</code>, <code>groupBy()</code>, and <code>countBy()</code>.</p> <pre><code>const total = collection.sum('price');\nconst max = collection.max('score');\nconst groups = collection.groupBy('category');\n</code></pre>"},{"location":"de/guides/async-collection/","title":"AsyncCollection Anleitung","text":"<p>Willkommen zur AsyncCollection-Anleitung! Diese Anleitung stellt das verz\u00f6gerte Query-Builder-Muster vor, um Abstraktionen \u00fcber beliebige Datenquellen zu erstellen, einschlie\u00dflich ORMs, REST-APIs, GraphQL und mehr.</p>"},{"location":"de/guides/async-collection/#was-ist-asynccollection","title":"Was ist AsyncCollection?","text":"<p>AsyncCollection implementiert ein Query-Builder-Muster, das einen \"Abfrageplan\" (Array von Operationen) erstellt, der ausgef\u00fchrt wird, wenn die Promise aufgel\u00f6st wird. Dies erm\u00f6glicht die Erstellung leistungsstarker Abstraktionen \u00fcber jede Datenquelle durch Transformation der Operationen in das von Ihrem ORM oder Ihrer API ben\u00f6tigte spezifische Format.</p>"},{"location":"de/guides/async-collection/#hauptmerkmale","title":"Hauptmerkmale","text":"<ul> <li>Verz\u00f6gerte Ausf\u00fchrung: Operationen werden registriert, aber nicht ausgef\u00fchrt, bis Sie await verwenden oder <code>.then()</code> aufrufen</li> <li>ORM-Agnostisch: Funktioniert mit Prisma, TypeORM, Sequelize, Mongoose oder jeder Datenquelle</li> <li>Typsicher: Vollst\u00e4ndige TypeScript-Unterst\u00fctzung mit Generics</li> <li>Verkettbar: Flie\u00dfende Schnittstelle zum Erstellen komplexer Abfragen</li> <li>Flexibel: Transformiert Operationen, um sie an das Format Ihrer Datenquelle anzupassen</li> </ul>"},{"location":"de/guides/async-collection/#wann-asynccollection-verwenden","title":"Wann AsyncCollection verwenden","text":"<p>Verwenden Sie AsyncCollection, wenn Sie:</p> <ul> <li>Abstraktionen \u00fcber Datenbank-ORMs erstellen m\u00fcssen</li> <li>Wiederverwendbare Abfrageschnittstellen f\u00fcr REST-APIs erstellen</li> <li>Benutzerdefinierte Datenzugriffsschichten implementieren</li> <li>Verschiedene Datenquellen unter einer gemeinsamen Schnittstelle vereinheitlichen</li> <li>Die Abfrageausf\u00fchrung verz\u00f6gern m\u00f6chten, bis alle Filter angewendet wurden</li> </ul>"},{"location":"de/guides/async-collection/#grundkonzepte","title":"Grundkonzepte","text":""},{"location":"de/guides/async-collection/#die-executor-funktion","title":"Die Executor-Funktion","text":"<p>Der Executor ist der Kern von AsyncCollection. Er erh\u00e4lt einen Kontext mit allen Operationen und gibt die Ergebnisse zur\u00fcck:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\nconst executor = async ({ operations, validators, metadata }) =&gt; {\n  // operations: Array von [methodenname, ...args]\n  // validators: Benutzerdefinierte Validatoren (optional)\n  // metadata: Abfrageinformationen (created_at, operation_count, chain_depth)\n\n  console.log(`Verarbeite ${metadata.operation_count} Operationen`);\n\n  // Transformiere Operationen in Ihr Format\n  // F\u00fchre Abfrage aus\n  // Gib Ergebnisse zur\u00fcck\n\n  return results;\n};\n\nconst collection = new AsyncCollection(executor);\n</code></pre>"},{"location":"de/guides/async-collection/#operationsregistrierung","title":"Operationsregistrierung","text":"<p>Wenn Sie Methoden verketten, werden sie als Operationen registriert:</p> <pre><code>const users = new AsyncCollection(executor);\n\n// Diese registrieren Operationen, aber f\u00fchren sie NOCH NICHT aus\nusers\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .sort('name', 'asc');\n\n// Die Ausf\u00fchrung erfolgt hier (wenn die Promise aufgel\u00f6st wird)\nconst results = await users;\n</code></pre>"},{"location":"de/guides/async-collection/#executorcontext","title":"ExecutorContext","text":"<p>Der an Ihren Executor \u00fcbergebene Kontext enth\u00e4lt:</p> <pre><code>interface ExecutorContext&lt;T, V&gt; {\n  // Array von Operationen: [methodenname, ...args]\n  operations: [string, ...any[]][];\n\n  // Benutzerdefinierte Validatoren f\u00fcr query()\n  validators?: V;\n\n  // Metadata \u00fcber die Abfrage\n  metadata: {\n    created_at: Date;\n    operation_count: number;\n    chain_depth: number;\n  };\n}\n</code></pre>"},{"location":"de/guides/async-collection/#einfaches-beispiel-in-memory-array","title":"Einfaches Beispiel: In-Memory-Array","text":"<p>Beginnen wir mit einem einfachen Beispiel mit einem In-Memory-Array:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\n\n// In-Memory-Daten\nconst data = [\n  { id: 1, name: \"Alice\", age: 25, status: \"active\" },\n  { id: 2, name: \"Bob\", age: 30, status: \"inactive\" },\n  { id: 3, name: \"Charlie\", age: 35, status: \"active\" }\n];\n\n// Einfacher Executor\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  let results = [...data];\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      results = results.filter(item =&gt; {\n        if (operator === '&gt;=') return item[key] &gt;= value;\n        if (operator === '=') return item[key] === value;\n        return true;\n      });\n    }\n\n    if (method === 'first') {\n      results = [results[0]];\n    }\n  });\n\n  return results;\n});\n\n// Verwenden Sie es\nconst active = await users.where('status', 'active');\n// [{ id: 1, ... }, { id: 3, ... }]\n\nconst firstAdult = await users.where('age', '&gt;=', 25).first();\n// { id: 1, name: \"Alice\", ... }\n</code></pre>"},{"location":"de/guides/async-collection/#arbeiten-mit-prisma","title":"Arbeiten mit Prisma","text":"<p>Transformieren Sie Operationen in Prisma-Abfragen:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const where: any = {};\n  let orderBy: any = undefined;\n  let take: number | undefined;\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      if (operator === '&gt;=') where[key] = { gte: value };\n      else if (operator === '&gt;') where[key] = { gt: value };\n      else if (operator === '=') where[key] = value;\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      orderBy = { [key]: direction || 'asc' };\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await prisma.user.findFirst({ where, orderBy });\n  }\n\n  return await prisma.user.findMany({ where, orderBy, take });\n});\n\n// Verwenden wie Collection\nconst active = await users\n  .where('age', '&gt;=', 18)\n  .where('verified', true)\n  .sort('createdAt', 'desc');\n\nconst firstUser = await users\n  .where('status', 'active')\n  .first();\n</code></pre>"},{"location":"de/guides/async-collection/#arbeiten-mit-typeorm","title":"Arbeiten mit TypeORM","text":"<p>Erstellen Sie TypeORM QueryBuilder aus Operationen:</p> <pre><code>import AsyncCollection from \"@arcaelas/collection/async\";\nimport { getRepository } from \"typeorm\";\nimport { User } from \"./entities/User\";\n\nconst users = new AsyncCollection(async ({ operations }) =&gt; {\n  const qb = getRepository(User).createQueryBuilder('user');\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, operator, value] = args.length === 3\n        ? args\n        : [args[0], '=', args[1]];\n\n      const paramKey = `${key}_${Math.random()}`;\n\n      if (operator === '&gt;=') {\n        qb.andWhere(`user.${key} &gt;= :${paramKey}`, { [paramKey]: value });\n      } else if (operator === '=') {\n        qb.andWhere(`user.${key} = :${paramKey}`, { [paramKey]: value });\n      }\n    }\n\n    if (method === 'sort') {\n      const [key, direction] = args;\n      qb.orderBy(`user.${key}`, direction?.toUpperCase() || 'ASC');\n    }\n  });\n\n  const lastOp = operations[operations.length - 1];\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await qb.getOne();\n  }\n\n  return await qb.getMany();\n});\n\n// Verketten Sie Operationen\nconst result = await users\n  .where('age', '&gt;=', 21)\n  .where('status', 'active')\n  .sort('name', 'asc');\n</code></pre>"},{"location":"de/guides/async-collection/#benutzerdefinierte-validatoren","title":"Benutzerdefinierte Validatoren","text":"<p>Erweitern Sie die Abfragef\u00e4higkeiten mit benutzerdefinierten Validatoren:</p> <pre><code>const customValidators = {\n  // Pr\u00fcft, ob das Datum in der Vergangenheit liegt\n  $isPast(ref: string, value: boolean) {\n    return (item: any) =&gt; {\n      const date = new Date(item[ref]);\n      const isPast = date &lt; new Date();\n      return value ? isPast : !isPast;\n    };\n  },\n\n  // Pr\u00fcft, ob der Wert im Bereich liegt\n  $between(ref: string, range: [number, number]) {\n    return (item: any) =&gt; {\n      const val = item[ref];\n      return val &gt;= range[0] &amp;&amp; val &lt;= range[1];\n    };\n  }\n};\n\nconst items = new AsyncCollection(\n  async ({ operations, validators }) =&gt; {\n    // Verwenden Sie Validatoren zur Verarbeitung von Operationen\n    // Transformieren Sie zum Format Ihrer Datenquelle\n    return processData(operations, validators);\n  },\n  customValidators\n);\n\n// Verwenden Sie benutzerdefinierte Validatoren\nawait items.filter({\n  eventDate: { $isPast: true },\n  score: { $between: [50, 100] }\n});\n</code></pre>"},{"location":"de/guides/async-collection/#methodenverkettung","title":"Methodenverkettung","text":"<p>Verketten Sie mehrere Operationen flie\u00dfend:</p> <pre><code>const users = new AsyncCollection(executor);\n\nconst result = await users\n  .where('age', '&gt;=', 18)\n  .where('status', 'active')\n  .not({ deleted: true })\n  .sort('createdAt', 'desc')\n  .slice(0, 10)\n  .map(user =&gt; ({\n    id: user.id,\n    name: user.name,\n    displayName: `${user.name} (${user.age})`\n  }));\n</code></pre>"},{"location":"de/guides/async-collection/#unterstutzte-operationen","title":"Unterst\u00fctzte Operationen","text":"<p>AsyncCollection unterst\u00fctzt alle Collection-Methoden:</p>"},{"location":"de/guides/async-collection/#filtern","title":"Filtern","text":"<ul> <li><code>where(key, value)</code> oder <code>where(key, operator, value)</code></li> <li><code>whereNot(key, value)</code> oder <code>whereNot(key, operator, value)</code></li> <li><code>filter(handler)</code> - Funktion oder Abfrageobjekt</li> <li><code>not(handler)</code> - Inverser Filter</li> </ul>"},{"location":"de/guides/async-collection/#suchen","title":"Suchen","text":"<ul> <li><code>first(handler?)</code> - Erstes passendes Element</li> <li><code>last(handler?)</code> - Letztes passendes Element</li> <li><code>find(handler)</code> - Alias f\u00fcr first</li> </ul>"},{"location":"de/guides/async-collection/#transformation","title":"Transformation","text":"<ul> <li><code>map(handler)</code> - Transformiert Elemente</li> <li><code>each(handler)</code> - Iteriert Elemente</li> <li><code>forget(...keys)</code> - Entfernt Felder</li> </ul>"},{"location":"de/guides/async-collection/#sortierung","title":"Sortierung","text":"<ul> <li><code>sort(key, direction)</code> oder <code>sort(compareFunction)</code></li> <li><code>reverse()</code> - Umgekehrte Reihenfolge</li> <li><code>shuffle()</code> - Zuf\u00e4llige Reihenfolge</li> </ul>"},{"location":"de/guides/async-collection/#slicing-paginierung","title":"Slicing &amp; Paginierung","text":"<ul> <li><code>slice(start, end?)</code> - Array-Slice</li> <li><code>chunk(size)</code> - In Bl\u00f6cke aufteilen</li> <li><code>paginate(page, perPage)</code> - Paginiert Ergebnisse</li> </ul>"},{"location":"de/guides/async-collection/#aggregation","title":"Aggregation","text":"<ul> <li><code>sum(key)</code> - Summiert Werte</li> <li><code>max(key)</code> - Maximalwert</li> <li><code>min(key)</code> - Minimalwert</li> <li><code>groupBy(key)</code> - Gruppiert nach Schl\u00fcssel</li> <li><code>countBy(key)</code> - Z\u00e4hlt nach Schl\u00fcssel</li> </ul>"},{"location":"de/guides/async-collection/#hilfsprogramme","title":"Hilfsprogramme","text":"<ul> <li><code>unique(key)</code> - Eindeutige Elemente</li> <li><code>random(count?)</code> - Zuf\u00e4llige Elemente</li> <li><code>every(handler)</code> - Validiert alle</li> <li><code>collect(items?)</code> - Klont Kontext</li> </ul>"},{"location":"de/guides/async-collection/#debugging","title":"Debugging","text":"<ul> <li><code>dump()</code> - In Konsole ausgeben</li> <li><code>dd()</code> - Dump and die (Node.js)</li> <li><code>stringify(replacer?, space?)</code> - In JSON konvertieren</li> </ul>"},{"location":"de/guides/async-collection/#fehlerbehandlung","title":"Fehlerbehandlung","text":"<p>Behandeln Sie Fehler in Ihrem Executor:</p> <pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  try {\n    // Erstelle und f\u00fchre Abfrage aus\n    const results = await executeQuery(operations);\n    return results;\n  } catch (error) {\n    console.error('Abfrage fehlgeschlagen:', error);\n    throw new Error(`Benutzer konnten nicht abgerufen werden: ${error.message}`);\n  }\n});\n\n// Behandle Fehler beim Awaiten\ntry {\n  const results = await users.where('age', '&gt;=', 18);\n} catch (error) {\n  console.error('Fehler:', error);\n}\n\n// Oder mit .catch()\nusers\n  .where('age', '&gt;=', 18)\n  .then(results =&gt; console.log(results))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"de/guides/async-collection/#1-validieren-sie-operationen","title":"1. Validieren Sie Operationen","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Validiere Operationen vor der Ausf\u00fchrung\n  const hasInvalidOp = operations.some(([method]) =&gt;\n    !['where', 'sort', 'first'].includes(method)\n  );\n\n  if (hasInvalidOp) {\n    throw new Error('Nicht unterst\u00fctzte Operation');\n  }\n\n  return processOperations(operations);\n});\n</code></pre>"},{"location":"de/guides/async-collection/#2-behandeln-sie-terminaloperationen","title":"2. Behandeln Sie Terminaloperationen","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  const lastOp = operations[operations.length - 1];\n\n  // Pr\u00fcfe auf Terminaloperationen\n  if (lastOp &amp;&amp; lastOp[0] === 'first') {\n    return await findFirst(operations.slice(0, -1));\n  }\n\n  if (lastOp &amp;&amp; lastOp[0] === 'last') {\n    return await findLast(operations.slice(0, -1));\n  }\n\n  return await findMany(operations);\n});\n</code></pre>"},{"location":"de/guides/async-collection/#3-optimieren-sie-die-abfrageerstellung","title":"3. Optimieren Sie die Abfrageerstellung","text":"<pre><code>const users = new AsyncCollection(async ({ operations }) =&gt; {\n  // Gruppiere Operationen nach Typ f\u00fcr effiziente Verarbeitung\n  const where_ops = operations.filter(([m]) =&gt; m === 'where');\n  const sort_ops = operations.filter(([m]) =&gt; m === 'sort');\n\n  // Erstelle optimierte Abfrage\n  const query = buildQuery({ where_ops, sort_ops });\n\n  return await executeQuery(query);\n});\n</code></pre>"},{"location":"de/guides/async-collection/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<ul> <li>Siehe API-Referenz f\u00fcr vollst\u00e4ndige Methodendokumentation</li> <li>Siehe Verwendungsbeispiele f\u00fcr reale Muster</li> <li>Erfahren Sie mehr \u00fcber TypeScript-Verwendung f\u00fcr Typsicherheit</li> </ul>"},{"location":"de/guides/async-collection/#haufige-muster","title":"H\u00e4ufige Muster","text":""},{"location":"de/guides/async-collection/#rest-api-wrapper","title":"REST-API-Wrapper","text":"<pre><code>const api = new AsyncCollection(async ({ operations }) =&gt; {\n  const params = new URLSearchParams();\n\n  operations.forEach(([method, ...args]) =&gt; {\n    if (method === 'where') {\n      const [key, value] = args.length === 2 ? args : [args[0], args[2]];\n      params.append(key, value);\n    }\n  });\n\n  const response = await fetch(`/api/users?${params}`);\n  return await response.json();\n});\n\nconst users = await api.where('status', 'active');\n</code></pre>"},{"location":"de/guides/async-collection/#graphql-builder","title":"GraphQL-Builder","text":"<pre><code>const gql = new AsyncCollection(async ({ operations }) =&gt; {\n  const filters = operations\n    .filter(([m]) =&gt; m === 'where')\n    .map(([_, key, value]) =&gt; `${key}: \"${value}\"`);\n\n  const query = `\n    query {\n      users(where: { ${filters.join(', ')} }) {\n        id name email\n      }\n    }\n  `;\n\n  const response = await graphqlClient.query(query);\n  return response.data.users;\n});\n</code></pre>"},{"location":"de/guides/async-collection/#tipps","title":"Tipps","text":"<ol> <li>Halten Sie Executors fokussiert - Eine Verantwortung pro AsyncCollection</li> <li>Validieren Sie Operationen - Lehnen Sie nicht unterst\u00fctzte Operationen fr\u00fch ab</li> <li>Behandeln Sie Grenzf\u00e4lle - Pr\u00fcfen Sie auf Terminaloperationen wie first/last</li> <li>Typisieren Sie alles - Verwenden Sie TypeScript-Generics f\u00fcr Typsicherheit</li> <li>Testen Sie gr\u00fcndlich - Unit-Tests Ihres Executors mit verschiedenen Operationsketten</li> </ol>"},{"location":"de/guides/core-concepts/","title":"Grundkonzepte","text":"<p>Lernen Sie die grundlegenden Konzepte hinter <code>@arcaelas/collection</code>.</p>"},{"location":"de/guides/core-concepts/#collections-als-erweiterte-arrays","title":"Collections als Erweiterte Arrays","text":"<p>Collections erweitern native JavaScript-Arrays mit leistungsstarken Methoden.</p>"},{"location":"de/guides/core-concepts/#typsicherheit","title":"Typsicherheit","text":"<p>Verwenden Sie TypeScript-Generics f\u00fcr typsichere Collections.</p>"},{"location":"de/guides/core-concepts/#abfragesprache","title":"Abfragesprache","text":"<p>Collections unterst\u00fctzen MongoDB-Style-Abfragen.</p>"},{"location":"de/guides/core-concepts/#unveranderlichkeit","title":"Unver\u00e4nderlichkeit","text":"<p>Die meisten Methoden geben neue Collections zur\u00fcck.</p>"},{"location":"de/guides/core-concepts/#methodenverkettung","title":"Methodenverkettung","text":"<p>Verketten Sie Methoden f\u00fcr fluente Syntax.</p> <p>Weiter: Abfrageoperatoren</p>"},{"location":"de/guides/getting-started/","title":"Erste Schritte","text":"<p>Willkommen zum Leitfaden f\u00fcr die ersten Schritte mit <code>@arcaelas/collection</code>!</p>"},{"location":"de/guides/getting-started/#ihre-erste-collection","title":"Ihre Erste Collection","text":"<pre><code>import Collection from \"@arcaelas/collection\";\n\nconst numbers = new Collection([1, 2, 3, 4, 5]);\n</code></pre>"},{"location":"de/guides/getting-started/#grundlegende-filterung","title":"Grundlegende Filterung","text":"<pre><code>const activeUsers = users.filter({ active: true });\nconst adults = users.filter({ age: { $gt: 25 } });\n</code></pre> <p>Lesen Sie weiter in Grundkonzepte.</p>"},{"location":"de/guides/query-operators/","title":"Abfrageoperatoren","text":"<p>Meistern Sie MongoDB-Style-Abfrageoperatoren in <code>@arcaelas/collection</code>.</p>"},{"location":"de/guides/query-operators/#vergleichsoperatoren","title":"Vergleichsoperatoren","text":""},{"location":"de/guides/query-operators/#eq-gleich-gt-groer-als-gte-lt-lte","title":"$eq (Gleich), $gt (Gr\u00f6\u00dfer Als), $gte, $lt, $lte","text":""},{"location":"de/guides/query-operators/#logische-operatoren","title":"Logische Operatoren","text":""},{"location":"de/guides/query-operators/#not-in-contains","title":"$not, $in, $contains","text":""},{"location":"de/guides/query-operators/#operator-aliase","title":"Operator-Aliase","text":"Alias Operator Bedeutung <code>=</code> <code>$eq</code> Gleich <code>!=</code> <code>$not</code> Nicht gleich <p>Weiter: Aggregationsmethoden</p>"}]}