#!/bin/sh
# Hook de pre-push para compilar y publicar la documentación en la rama docs
# Este hook se ejecuta antes de hacer push a cualquier rama
# Autor: Miguel Alejandro
# Fecha: 2025-06-26

# Configuración
set -e  # Detener en caso de error

# Colores para mensajes
ROJO='\033[0;31m'
VERDE='\033[0;32m'
AMARILLO='\033[0;33m'
AZUL='\033[0;34m'
RESET='\033[0m'

# Función para mostrar mensajes de error
error() {
  echo -e "${ROJO}[ERROR] $1${RESET}" >&2
  exit 1
}

# Función para mostrar información
info() {
  echo -e "${AZUL}[INFO] $1${RESET}"
}

# Función para mostrar éxito
success() {
  echo -e "${VERDE}[OK] $1${RESET}"
}

# Función para mostrar advertencia
warning() {
  echo -e "${AMARILLO}[ADVERTENCIA] $1${RESET}"
}

# --- INICIO DEL SCRIPT ---
info "Iniciando hook pre-push..."

# ETAPA 1: Verificar que estamos en la rama main
info "ETAPA 1: Verificando rama actual..."

# Obtener la rama actual de múltiples maneras
RAMA_ACTUAL=""

# Método 1: Usando symbolic-ref
if RAMA=$(git symbolic-ref --short HEAD 2>/dev/null); then
  RAMA_ACTUAL=$RAMA
  success "Rama detectada (método 1): $RAMA_ACTUAL"
else
  # Método 2: Usando branch --show-current
  if RAMA=$(git branch --show-current 2>/dev/null); then
    RAMA_ACTUAL=$RAMA
    success "Rama detectada (método 2): $RAMA_ACTUAL"
  else
    # Método 3: Usando parsear git branch
    RAMA_ACTUAL=$(git branch | grep '^\*' | cut -d ' ' -f2-)
    if [ -n "$RAMA_ACTUAL" ]; then
      success "Rama detectada (método 3): $RAMA_ACTUAL"
    else
      error "No se pudo determinar la rama actual"
    fi
  fi
fi

# Verificar si estamos en la rama main
if [ "$RAMA_ACTUAL" != "main" ]; then
  warning "No estamos en la rama main (rama actual: $RAMA_ACTUAL). Saliendo..."
  exit 0
fi

success "ETAPA 1: Verificación de rama exitosa"
info "----------------------------------------"

# Si llegamos aquí, estamos en la rama main
info "ESTAMOS EN LA RAMA MAIN - Continuando con la verificación..."

# ETAPA 2: Verificar cambios en la documentación
info "ETAPA 2: Verificando cambios en la documentación..."

# Obtener cambios en la carpeta docs
CAMBIOS_DOCS=$(git diff --name-only HEAD@{1} HEAD 2>/dev/null | grep "^docs/" || true)

if [ -z "$CAMBIOS_DOCS" ] && [ "$1" != "--force" ]; then
  success "No hay cambios en la documentación. No es necesario compilar."
  exit 0
fi

if [ -n "$CAMBIOS_DOCS" ]; then
  success "Se detectaron cambios en la documentación:"
  echo "$CAMBIOS_DOCS" | while read -r archivo; do
    echo "  - $archivo"
  done
fi

info "Iniciando proceso de compilación y publicación de la documentación..."

# ETAPA 3: Compilar la documentación
info "ETAPA 3: Compilando documentación..."

# Guardar la rama actual
RAMA_ACTUAL=$(git symbolic-ref --short HEAD)
RAMA_DOCS="gh-pages"  # Cambiado de 'docs' a 'gh-pages' para GitHub Pages

# Instalar dependencias de docs si es necesario
if [ ! -d "docs/node_modules" ]; then
  info "Instalando dependencias de documentación..."
  (cd docs && yarn install)
fi

# Compilar documentación
info "Compilando documentación con 'yarn docs:build'..."
if ! yarn docs:build; then
  error "Error al compilar la documentación. Por favor, corrige los errores antes de continuar."
fi

# ETAPA 4: Publicar documentación
info "ETAPA 4: Publicando documentación en la rama $RAMA_DOCS..."

# Crear directorio temporal
DIR_TEMP=$(mktemp -d)
info "Directorio temporal creado: $DIR_TEMP"

# Clonar el repositorio en el directorio temporal
echo -e "\e[34m[INFO] Clonando repositorio en directorio temporal...\e[0m"
if ! git clone --branch gh-pages --single-branch --depth 1 "$REPO_URL" "$DIR_TEMP" 2>/dev/null; then
  # Si la rama gh-pages no existe, clonar el repositorio vacío
  git clone --depth 1 "$REPO_URL" "$DIR_TEMP"
  (cd "$DIR_TEMP" && git checkout --orphan gh-pages && git rm -rf . >/dev/null 2>&1)
fi

# Cambiar al directorio temporal
pushd $DIR_TEMP > /dev/null

# Crear rama docs si no existe
git checkout $RAMA_DOCS 2>/dev/null || (
  info "La rama $RAMA_DOCS no existe, creándola..."
  git checkout --orphan $RAMA_DOCS
  git rm -rf . > /dev/null
  echo "# Documentación de $RAMA_DOCS" > README.md
  git add README.md
  git commit -m "docs: inicializar rama $RAMA_DOCS"
  git push -u origin $RAMA_DOCS
)

# Limpiar todo excepto .git
info "Limpiando rama $RAMA_DOCS..."
find . -mindepth 1 -not -path '*/\..*' -not -path './.git*' -exec rm -rf {} + 2>/dev/null || true

# Copiar archivos compilados
info "Copiando archivos compilados..."
cp -r ../docs/build/* .

# Asegurarse de que los archivos necesarios para GitHub Pages estén presentes
touch .nojekyll

# Hacer commit de los cambios
git add .
if git diff --cached --quiet; then
  info "No hay cambios para publicar en la documentación."
else
  info "Haciendo commit de los cambios en la documentación..."
  git commit -m "docs: actualizar documentación $(date +'%Y-%m-%d %H:%M:%S')"
  
  # Hacer push forzado a la rama docs
  info "Subiendo cambios a la rama $RAMA_DOCS..."
  git push origin $RAMA_DOCS --force
  
  success "Documentación publicada exitosamente en la rama $RAMA_DOCS"
  info "Puedes ver la documentación en: https://arcaelas.github.io/collection/"
fi

# Volver al directorio original
popd > /dev/null

# Limpiar directorio temporal
info "Limpiando directorio temporal..."
rm -rf $DIR_TEMP

# Volver a la rama original
info "Volviendo a la rama original: $RAMA_ACTUAL"
git checkout -q $RAMA_ACTUAL

# Éxito
success "✅ Proceso de documentación completado exitosamente!"
info "----------------------------------------"
info "La documentación se ha publicado en la rama $RAMA_DOCS"
info "Puedes ver la documentación en: https://arcaelas.github.io/collection/"

exit 0

echo -e "${AZUL}[Pre-Push Hook] Detectados cambios en la documentación. Compilando...${RESET}"

# Guardar el hash del commit actual
COMMIT_HASH=$(git rev-parse --short HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=%B)

# Compilar la documentación
echo -e "${AZUL}[Pre-Push Hook] Compilando documentación con yarn docs:build...${RESET}"
yarn docs:build || {
  echo -e "${ROJO}[Pre-Push Hook] Error al compilar la documentación. Abortando push.${RESET}"
  exit 1
}

echo -e "${VERDE}[Pre-Push Hook] Documentación compilada exitosamente.${RESET}"

# Guardar la rama actual
RAMA_ORIGINAL=$RAMA_ACTUAL

# Verificar si existe la rama docs
RAMA_DOCS_EXISTE=$(git branch -a | grep -c "remotes/origin/docs")

if [ "$RAMA_DOCS_EXISTE" -eq 0 ]; then
  echo -e "${AZUL}[Pre-Push Hook] Creando rama docs...${RESET}"
  git checkout --orphan docs
else
  echo -e "${AZUL}[Pre-Push Hook] Cambiando a rama docs...${RESET}"
  git fetch origin docs
  git checkout docs || {
    git checkout -b docs
  }
fi

# Guardar el archivo CNAME y .nojekyll si existen
if [ -f "CNAME" ]; then
  cp CNAME /tmp/CNAME_backup
fi
if [ -f ".nojekyll" ]; then
  cp .nojekyll /tmp/nojekyll_backup
fi

# Eliminar todos los archivos excepto .git
echo -e "${AZUL}[Pre-Push Hook] Limpiando rama docs...${RESET}"
find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} \; 2>/dev/null

# Copiar los archivos compilados a la raíz
echo -e "${AZUL}[Pre-Push Hook] Copiando archivos compilados...${RESET}"
cp -r docs/build/* . || {
  echo -e "${ROJO}[Pre-Push Hook] Error al copiar archivos compilados. Volviendo a rama original...${RESET}"
  git checkout $RAMA_ORIGINAL
  exit 1
}

# Restaurar CNAME y .nojekyll
if [ -f "/tmp/CNAME_backup" ]; then
  mv /tmp/CNAME_backup CNAME
else
  echo "docs.arcaelas.com" > CNAME
fi
if [ -f "/tmp/nojekyll_backup" ]; then
  mv /tmp/nojekyll_backup .nojekyll
else
  touch .nojekyll
fi

# Commit y push
echo -e "${AZUL}[Pre-Push Hook] Haciendo commit de la documentación...${RESET}"
git add -A
git commit -m "docs: actualización de documentación desde commit ${COMMIT_HASH} - ${COMMIT_MESSAGE}" || {
  echo -e "${AMARILLO}[Pre-Push Hook] No hay cambios para commit en docs.${RESET}"
}

# Push a la rama docs
echo -e "${AZUL}[Pre-Push Hook] Publicando en rama docs...${RESET}"
git push origin docs || {
  echo -e "${ROJO}[Pre-Push Hook] Error al publicar en rama docs. Volviendo a rama original...${RESET}"
  git checkout $RAMA_ORIGINAL
  exit 1
}

# Volver a la rama original
echo -e "${AZUL}[Pre-Push Hook] Volviendo a la rama original...${RESET}"
git checkout $RAMA_ORIGINAL

echo -e "${VERDE}[Pre-Push Hook] Documentación publicada exitosamente en la rama docs.${RESET}"
